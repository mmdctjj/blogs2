const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const h=u*i;t:for(const c of e.keys())if(c===F){const d=o[h-1];d<=s&&n.set(r,[e.get(c),d])}else{let d=u;for(let l=0;l<c.length;++l,++d){const p=c[l],f=i*d,g=f-i;let a=o[f];const m=Math.max(0,d-s-1),y=Math.min(i-1,d+s);for(let _=m;_<y;++_){const b=p!==t[_],z=o[g+_]+ +b,A=o[g+_+1]+1,w=o[f+_]+1,L=o[f+_+1]=Math.min(z,A,w);L<a&&(a=L)}if(a>s)continue t}W(e.get(c),t,s,n,o,d,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const h=e.get(u);if(r===u.length)e=h;else{const c=new Map;c.set(u.slice(r),h),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)R(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},R=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)R(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d:h}=u;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof(console==null?void 0:console[e])=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,h=new Map)=>{if(o==null)return h;for(const c of Object.keys(u)){const d=u[c],l=e._fieldIds[c],p=o.get(l);if(p==null)continue;let f=p.size;const g=e._avgFieldLength[l];for(const a of p.keys()){if(!e._documentIds.has(a)){gt(e,l,a,s),f-=1;continue}const m=i?i(e._documentIds.get(a),s,e._storedFields.get(a)):1;if(!m)continue;const y=p.get(a),_=e._fieldLength.get(a)[l],b=at(y,f,e._documentCount,_,g,r),z=n*d*m*b,A=h.get(a);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(c):A.match[s]=[c]}else h.set(a,{score:z,terms:[t],match:{[s]:[c]}})}}return h},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((a,m)=>({...a,[m]:N(n.boost,m)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:h}=n,{fuzzy:c,prefix:d}={...J.weights,...i},l=e._index.get(t.term),p=B(e,t.term,t.term,1,l,o,u,h);let f,g;if(t.prefix&&(f=e._index.atPrefix(t.term)),t.fuzzy){const a=t.fuzzy===!0?.2:t.fuzzy,m=a<1?Math.min(r,Math.round(t.term.length*a)):a;m&&(g=e._index.fuzzyGet(t.term,m))}if(f)for(const[a,m]of f){const y=a.length-t.term.length;if(!y)continue;g==null||g.delete(a);const _=d*a.length/(a.length+.3*y);B(e,t.term,a,_,m,o,u,h,p)}if(g)for(const a of g.keys()){const[m,y]=g.get(a);if(!y)continue;const _=c*a.length/(a.length+y);B(e,t.term,a,_,m,o,u,h,p)}return p},X=(e,t,s={})=>{if(typeof t!="string"){const d={...s,...t,queries:void 0},l=t.queries.map(p=>X(e,p,d));return Y(l,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:h}=i,c=r(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>At(e,d,i));return Y(c,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:h}]of n){const c=r.length,d={id:e._documentIds.get(u),score:i*c,terms:Object.keys(h),match:h};Object.assign(d,e._storedFields.get(u)),(s.filter==null||s.filter(d))&&o.push(d)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),h=n.get(r);h!=null?(h.score+=u,h.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:h}]of n)o.push({suggestion:u,terms:r,score:i/h});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if((t==null?void 0:t.fields)==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:h,serializationVersion:c},d)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const l=new Et(d);l._documentCount=t,l._nextId=s,l._documentIds=k(n),l._idToShortId=new Map,l._fieldIds=o,l._fieldLength=k(u),l._avgFieldLength=i,l._storedFields=k(r),l._dirtCount=h||0,l._index=new C;for(const[p,f]of l._documentIds)l._idToShortId.set(f,p);for(const[p,f]of e){const g=new Map;for(const a of Object.keys(f)){let m=f[a];c===1&&(m=m.ds),g.set(parseInt(a,10),k(m))}l._index.set(p,g)}return l},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,d=!1)=>{let l="";i===0?l=c.length>20?`… ${c.slice(-20)}`:c:d?l=c.length+i>100?`${c.slice(0,100-i)}… `:c:l=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,l&&o.push(l),i+=l.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,u);if(h===-1)return null;for(;h>=0;){const c=h+n.length;if(r(e.slice(u,h)),u=c,i>100)break;h=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,h=u.includes("@"),c=u.includes("#"),[d,l]=u.split(/[#@]/),{contents:p}=n[d]??={title:"",contents:[]};if(h)p.push([{type:"customField",key:d,index:l,display:i.map(f=>o.c.map(g=>j(g,f))).flat().filter(f=>f!==null)},r]);else{const f=i.map(g=>j(o.h,g)).filter(g=>g!==null);if(f.length&&p.push([{type:c?"heading":"title",key:d,...c&&{anchor:l},display:f},r]),"t"in o)for(const g of o.t){const a=i.map(m=>j(g,m)).filter(m=>m!==null);a.length&&p.push([{type:"text",key:d,...c&&{anchor:l},display:a},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":425,\"nextId\":425,\"documentIds\":{\"0\":\"v-8daa1a0e\",\"1\":\"v-184f4da6\",\"2\":\"v-2e3eac9e\",\"3\":\"v-d2f12b70\",\"4\":\"v-d2f12b70#💡相关阅读\",\"5\":\"v-d2f12b70#响应式原理\",\"6\":\"v-d2f12b70#💎-万恶之源createsignal\",\"7\":\"v-d2f12b70#🚗-用法\",\"8\":\"v-d2f12b70#🚗-例子\",\"9\":\"v-d2f12b70#🚗-原理\",\"10\":\"v-d2f12b70#🚗-实现\",\"11\":\"v-d2f12b70#💎createeffect\",\"12\":\"v-d2f12b70#🚗-用法-1\",\"13\":\"v-d2f12b70#🚗-例子-1\",\"14\":\"v-d2f12b70#🚗-原理-1\",\"15\":\"v-d2f12b70#🚗-实现-1\",\"16\":\"v-d2f12b70#💎-creatememo\",\"17\":\"v-d2f12b70#🚗-用法-2\",\"18\":\"v-d2f12b70#🚗-例子-2\",\"19\":\"v-d2f12b70#🚗-原理-2\",\"20\":\"v-d2f12b70#🚗-实现-2\",\"21\":\"v-d2f12b70#🎉-最后\",\"22\":\"v-d2f12b70@0\",\"23\":\"v-d2f12b70@1\",\"24\":\"v-2ab9e68e\",\"25\":\"v-2ab9e68e#🚀模仿-超越\",\"26\":\"v-2ab9e68e#💎写法\",\"27\":\"v-2ab9e68e#💎响应式原理\",\"28\":\"v-2ab9e68e#💎模板编译原理\",\"29\":\"v-2ab9e68e#💎运行时原理\",\"30\":\"v-2ab9e68e@0\",\"31\":\"v-2ab9e68e@1\",\"32\":\"v-e6302754\",\"33\":\"v-e6302754#💡-同系列阅读\",\"34\":\"v-e6302754#💎-初识qwik\",\"35\":\"v-e6302754#🚀-usesignal\",\"36\":\"v-e6302754#🚀-usestore\",\"37\":\"v-e6302754#🚀-usecomputed\",\"38\":\"v-e6302754#🚀-usecontext\",\"39\":\"v-e6302754#🚀-usetask-or-usevisibletask\",\"40\":\"v-e6302754#👉-usetask\",\"41\":\"v-e6302754#👉-usevisibletask\",\"42\":\"v-e6302754#👉-帮它模拟完整的生命周期\",\"43\":\"v-e6302754#💎-总结\",\"44\":\"v-e6302754@0\",\"45\":\"v-e6302754@1\",\"46\":\"v-458d028c\",\"47\":\"v-458d028c#💎-只有运行时的javascript\",\"48\":\"v-458d028c#💎-只有编译时的typescript\",\"49\":\"v-458d028c#💎-编译时也有饭圈\",\"50\":\"v-458d028c#💎-运行时-vs-编译时-前端框架的选择\",\"51\":\"v-458d028c#重运行时的react\",\"52\":\"v-458d028c#重编译时的solidjs和svelte\",\"53\":\"v-458d028c#平衡大师vue\",\"54\":\"v-458d028c#🎉-总结\",\"55\":\"v-458d028c#💡-精彩文章回顾\",\"56\":\"v-458d028c@0\",\"57\":\"v-458d028c@1\",\"58\":\"v-67a9303b\",\"59\":\"v-67a9303b#一、模版语法\",\"60\":\"v-67a9303b#_1-模版命名\",\"61\":\"v-67a9303b#_2-插值表达式\",\"62\":\"v-67a9303b#_3-条件语句\",\"63\":\"v-67a9303b#_4-循环语句\",\"64\":\"v-67a9303b#_5-组件引用\",\"65\":\"v-67a9303b#_6-事件处理\",\"66\":\"v-67a9303b#_7-双向绑定\",\"67\":\"v-67a9303b#_8-插槽语法\",\"68\":\"v-67a9303b#默认插槽\",\"69\":\"v-67a9303b#具名插槽\",\"70\":\"v-67a9303b#二、声明变量\",\"71\":\"v-67a9303b#三、监听变量的变化\",\"72\":\"v-67a9303b#_1-方式\",\"73\":\"v-67a9303b#_2-watch-接口\",\"74\":\"v-67a9303b#三、组件化\",\"75\":\"v-67a9303b#_1-组件之间通信\",\"76\":\"v-67a9303b#props\",\"77\":\"v-67a9303b#context\",\"78\":\"v-67a9303b#store\",\"79\":\"v-67a9303b#eventbus\",\"80\":\"v-67a9303b#_2-生命周期钩子\",\"81\":\"v-67a9303b#五、指令\",\"82\":\"v-67a9303b#_1-内置指令\",\"83\":\"v-67a9303b#_2-自定义指令\",\"84\":\"v-67a9303b#六、总结\",\"85\":\"v-67a9303b@0\",\"86\":\"v-67a9303b@1\",\"87\":\"v-45cf2043\",\"88\":\"v-45cf2043#💡tip-1-告别-display-none\",\"89\":\"v-45cf2043#💡tip-2-修改-ol标签的排序\",\"90\":\"v-45cf2043#💡tip-3-使用-inputmode-numeric-代替-type-number\",\"91\":\"v-45cf2043#💡tip-4-使用-contenteditable-true-开启富文本编辑器\",\"92\":\"v-45cf2043#💡tip-5-使用-datalist-提高用户体验\",\"93\":\"v-45cf2043#💡tip-6-使用loading-lazy-懒加载资源-提高加载速度\",\"94\":\"v-45cf2043@0\",\"95\":\"v-45cf2043@1\",\"96\":\"v-06095cbc\",\"97\":\"v-06095cbc#认识图\",\"98\":\"v-06095cbc#最小生成树\",\"99\":\"v-06095cbc#kruskal-克鲁斯卡尔-算法\",\"100\":\"v-06095cbc#prim-普里姆\",\"101\":\"v-06095cbc#描述节点\",\"102\":\"v-06095cbc#定义边\",\"103\":\"v-06095cbc#实现图\",\"104\":\"v-06095cbc#属性\",\"105\":\"v-06095cbc#addnodes方法\",\"106\":\"v-06095cbc#addedges方法\",\"107\":\"v-06095cbc#showgraoh方法\",\"108\":\"v-06095cbc#深度优先和广度优先\",\"109\":\"v-06095cbc#深度优先\",\"110\":\"v-06095cbc#广度优先\",\"111\":\"v-06095cbc#测试\",\"112\":\"v-06095cbc#最短路径\",\"113\":\"v-06095cbc#测试-1\",\"114\":\"v-06095cbc@0\",\"115\":\"v-06095cbc@1\",\"116\":\"v-02894a5e\",\"117\":\"v-02894a5e#💎《javascript高级程序设计》\",\"118\":\"v-02894a5e#💎《javascript权威指南》\",\"119\":\"v-02894a5e#💎《图解http》\",\"120\":\"v-02894a5e#💎《数据结构与算法javascript描述》\",\"121\":\"v-02894a5e#💎《javascript设计模式》\",\"122\":\"v-02894a5e@0\",\"123\":\"v-02894a5e@1\",\"124\":\"v-2cbae216\",\"125\":\"v-2cbae216#一、说明\",\"126\":\"v-2cbae216#二、怎么问你\",\"127\":\"v-2cbae216#三、这么回答\",\"128\":\"v-2cbae216#青铜\",\"129\":\"v-2cbae216#_1-语言类型\",\"130\":\"v-2cbae216#_2-包装类\",\"131\":\"v-2cbae216#_3-number类型的差异\",\"132\":\"v-2cbae216#_4-的区别\",\"133\":\"v-2cbae216#_5-数组的异同\",\"134\":\"v-2cbae216#黄金\",\"135\":\"v-2cbae216#_6-面向对象\",\"136\":\"v-2cbae216#_7-私有属性和公有属性\",\"137\":\"v-2cbae216#铂金\",\"138\":\"v-2cbae216#_8-垃圾回收-gc\",\"139\":\"v-2cbae216#v8引擎\",\"140\":\"v-2cbae216#java\",\"141\":\"v-2cbae216#_10-异步编程\",\"142\":\"v-2cbae216#javascript\",\"143\":\"v-2cbae216#java-1\",\"144\":\"v-2cbae216#四、结束\",\"145\":\"v-2cbae216@0\",\"146\":\"v-2cbae216@1\",\"147\":\"v-5e2e641b\",\"148\":\"v-5e2e641b#命令模式介绍\",\"149\":\"v-5e2e641b#思想\",\"150\":\"v-5e2e641b#优点\",\"151\":\"v-5e2e641b#缺点\",\"152\":\"v-5e2e641b#需要使用命令模式的场景\",\"153\":\"v-5e2e641b#模型\",\"154\":\"v-5e2e641b#实现\",\"155\":\"v-5e2e641b#如果用命令模式打开西游记会发生什么-你会欣赏到下面的小短文\",\"156\":\"v-5e2e641b@0\",\"157\":\"v-5e2e641b@1\",\"158\":\"v-528d4ac2\",\"159\":\"v-528d4ac2#单例模式\",\"160\":\"v-528d4ac2#观察者模式\",\"161\":\"v-528d4ac2#发布-订阅模式\",\"162\":\"v-528d4ac2#中介者模式\",\"163\":\"v-528d4ac2#策略模式\",\"164\":\"v-528d4ac2#装饰器模式\",\"165\":\"v-528d4ac2@0\",\"166\":\"v-528d4ac2@1\",\"167\":\"v-0a66aff9\",\"168\":\"v-0a66aff9#theme-channing-cyanhighlight-atom-one-dark\",\"169\":\"v-0a66aff9#🚀-react学习库\",\"170\":\"v-0a66aff9#💎-reactjs-interview-questions\",\"171\":\"v-0a66aff9#💎-react设计\",\"172\":\"v-0a66aff9#💎-react技巧\",\"173\":\"v-0a66aff9#💎-react开发路线图\",\"174\":\"v-0a66aff9#💎-react-typescript备忘录\",\"175\":\"v-0a66aff9#🚀-react工具库\",\"176\":\"v-0a66aff9#💎-beautiful-react-hooks\",\"177\":\"v-0a66aff9#💎-hos\",\"178\":\"v-0a66aff9@0\",\"179\":\"v-0a66aff9@1\",\"180\":\"v-685efc20\",\"181\":\"v-685efc20#🚀-简单易用的-zustand\",\"182\":\"v-685efc20#🚀-简单的对比\",\"183\":\"v-685efc20#🚀-监听变化\",\"184\":\"v-685efc20#🚀-中间件模式\",\"185\":\"v-685efc20#🚀-总结\",\"186\":\"v-685efc20#更多文章\",\"187\":\"v-685efc20@0\",\"188\":\"v-685efc20@1\",\"189\":\"v-595f85f8\",\"190\":\"v-595f85f8#🚀zustand为什么这么好用\",\"191\":\"v-595f85f8#💎-底层原理很简单\",\"192\":\"v-595f85f8#💎-不同环境处理\",\"193\":\"v-595f85f8@0\",\"194\":\"v-595f85f8@1\",\"195\":\"v-138033f5\",\"196\":\"v-138033f5#💡推荐阅读\",\"197\":\"v-138033f5#💎-开门见山\",\"198\":\"v-138033f5#💎-分析\",\"199\":\"v-138033f5#🚗-用法分析\",\"200\":\"v-138033f5#🚗-源码分析\",\"201\":\"v-138033f5#🚆-usememo源码逻辑\",\"202\":\"v-138033f5#🚆-usecallback源码逻辑\",\"203\":\"v-138033f5#💎-总结\",\"204\":\"v-138033f5@0\",\"205\":\"v-138033f5@1\",\"206\":\"v-7c00b1d4\",\"207\":\"v-7c00b1d4#基本原理\",\"208\":\"v-7c00b1d4#概述\",\"209\":\"v-7c00b1d4#react\",\"210\":\"v-7c00b1d4#vue3\",\"211\":\"v-7c00b1d4#svelte\",\"212\":\"v-7c00b1d4#_1-create-fragment函数\",\"213\":\"v-7c00b1d4#_2-instance函数\",\"214\":\"v-7c00b1d4#_3-继承sveltecomponent的组件-并且执行init方法\",\"215\":\"v-7c00b1d4#react性能\",\"216\":\"v-7c00b1d4#双缓存机制\",\"217\":\"v-7c00b1d4#firbe架构\",\"218\":\"v-7c00b1d4#其他的手段\",\"219\":\"v-7c00b1d4@0\",\"220\":\"v-7c00b1d4@1\",\"221\":\"v-b3d73182\",\"222\":\"v-b3d73182#_1-动画实现的基本原理\",\"223\":\"v-b3d73182#_2-和styled-components结合起来\",\"224\":\"v-b3d73182#_3-思路打开\",\"225\":\"v-b3d73182#_3-1-左右交错\",\"226\":\"v-b3d73182#_3-2-上下交错\",\"227\":\"v-b3d73182#_3-3-左右交错的同时载增加从下到上的动画\",\"228\":\"v-b3d73182#_4-思路再打开\",\"229\":\"v-b3d73182@0\",\"230\":\"v-b3d73182@1\",\"231\":\"v-605ceaf7\",\"232\":\"v-605ceaf7#💡推荐阅读\",\"233\":\"v-605ceaf7#💎-对usememo的误解\",\"234\":\"v-605ceaf7#💡相关阅读\",\"235\":\"v-605ceaf7#💎-对usecallback的误解\",\"236\":\"v-605ceaf7#💎-总结\",\"237\":\"v-605ceaf7@0\",\"238\":\"v-605ceaf7@1\",\"239\":\"v-6394ad07\",\"240\":\"v-6394ad07#⚡️-使用-vite\",\"241\":\"v-6394ad07#性能优化过程\",\"242\":\"v-6394ad07#性能比较\",\"243\":\"v-6394ad07#思考\",\"244\":\"v-6394ad07@0\",\"245\":\"v-6394ad07@1\",\"246\":\"v-76e3d114\",\"247\":\"v-76e3d114#usesyncexternalstore\",\"248\":\"v-76e3d114#useid\",\"249\":\"v-76e3d114#uselayouteffect\",\"250\":\"v-76e3d114#usedeferredvalue\",\"251\":\"v-76e3d114#usereducer\",\"252\":\"v-76e3d114#useref\",\"253\":\"v-76e3d114#useimperativehandle\",\"254\":\"v-76e3d114@0\",\"255\":\"v-76e3d114@1\",\"256\":\"v-02d4272e\",\"257\":\"v-02d4272e#💡-相关阅读\",\"258\":\"v-02d4272e#💎-第一座山-fiber相关变量命名\",\"259\":\"v-02d4272e#🚗-fibernode\",\"260\":\"v-02d4272e#🚗-fibernode-1\",\"261\":\"v-02d4272e#🚗-hostrootfiber\",\"262\":\"v-02d4272e#🚗-rootfiber\",\"263\":\"v-02d4272e#🚗-fiberrootnode\",\"264\":\"v-02d4272e#🚗fiberrootnode\",\"265\":\"v-02d4272e#💎-总结\",\"266\":\"v-02d4272e@0\",\"267\":\"v-02d4272e@1\",\"268\":\"v-382311b4\",\"269\":\"v-382311b4#💡相关阅读\",\"270\":\"v-382311b4#💎-第二座大山-链表结构和双缓存机制\",\"271\":\"v-382311b4#🚗-链表结构\",\"272\":\"v-382311b4#🚗-双缓存机制\",\"273\":\"v-382311b4#🚗-总结\",\"274\":\"v-382311b4#🎉-最后\",\"275\":\"v-382311b4@0\",\"276\":\"v-382311b4@1\",\"277\":\"v-2357ea99\",\"278\":\"v-2357ea99#👉useimperativehandle杂技\",\"279\":\"v-2357ea99#👉使用设计模式杂技\",\"280\":\"v-2357ea99@0\",\"281\":\"v-2357ea99@1\",\"282\":\"v-6d9aa73c\",\"283\":\"v-6d9aa73c#console狂魔能有多狂\",\"284\":\"v-6d9aa73c#emo时间的思考\",\"285\":\"v-6d9aa73c#匹配console语句\",\"286\":\"v-6d9aa73c#查询git作者\",\"287\":\"v-6d9aa73c#删除console\",\"288\":\"v-6d9aa73c#测试\",\"289\":\"v-6d9aa73c#🚀-vite插件-rollup-plugin-remove-others-console\",\"290\":\"v-6d9aa73c#🚀-webpack-loader-remove-others-console-loader\",\"291\":\"v-6d9aa73c@0\",\"292\":\"v-6d9aa73c@1\",\"293\":\"v-55b6ce8a\",\"294\":\"v-55b6ce8a#需求背景\",\"295\":\"v-55b6ce8a#调研\",\"296\":\"v-55b6ce8a#实现\",\"297\":\"v-55b6ce8a#最后\",\"298\":\"v-55b6ce8a@0\",\"299\":\"v-55b6ce8a@1\",\"300\":\"v-309e2050\",\"301\":\"v-309e2050#🚀-vite-插件机制\",\"302\":\"v-309e2050#🚗-rollup-插件机制\",\"303\":\"v-309e2050#🚗-vite-的巧妙之处\",\"304\":\"v-309e2050#🚀-实践得真知\",\"305\":\"v-309e2050#🚗-自动切换端口-默认8080\",\"306\":\"v-309e2050#🚗-为文件加上版本号\",\"307\":\"v-309e2050#🎉-总结\",\"308\":\"v-309e2050@0\",\"309\":\"v-309e2050@1\",\"310\":\"v-0279be68\",\"311\":\"v-0279be68#🚀-关键接口介绍\",\"312\":\"v-0279be68#🚀-自定义-loading-组件\",\"313\":\"v-0279be68#🚀-自定义指令\",\"314\":\"v-0279be68#🎉-最后\",\"315\":\"v-0279be68@0\",\"316\":\"v-0279be68@1\",\"317\":\"v-1760c7e4\",\"318\":\"v-1760c7e4#封装媒体查询\",\"319\":\"v-1760c7e4#封装事件监听\",\"320\":\"v-1760c7e4@0\",\"321\":\"v-1760c7e4@1\",\"322\":\"v-108d6568\",\"323\":\"v-108d6568#🚀-立即请求函数\",\"324\":\"v-108d6568#🚀-手动请求函数\",\"325\":\"v-108d6568#🚀-自动请求函数\",\"326\":\"v-108d6568@0\",\"327\":\"v-108d6568@1\",\"328\":\"v-d1c1d7e6\",\"329\":\"v-d1c1d7e6#💡-为什么要这样做\",\"330\":\"v-d1c1d7e6#💎-思路\",\"331\":\"v-d1c1d7e6#💎-实现\",\"332\":\"v-d1c1d7e6#🚗-实现中介者模式\",\"333\":\"v-d1c1d7e6#🚗-重写localstorage\",\"334\":\"v-d1c1d7e6#🚗-实现usestorage-hook\",\"335\":\"v-d1c1d7e6#💎-测试\",\"336\":\"v-d1c1d7e6#🚗-使用localstorage\",\"337\":\"v-d1c1d7e6#🚗-监听localstorage变化\",\"338\":\"v-d1c1d7e6#🚗-结果\",\"339\":\"v-d1c1d7e6@0\",\"340\":\"v-d1c1d7e6@1\",\"341\":\"v-6e35bb36\",\"342\":\"v-6e35bb36#一、父子组件通信\",\"343\":\"v-6e35bb36#_1-props和-emit\",\"344\":\"v-6e35bb36#_2-children或者-refs\",\"345\":\"v-6e35bb36#_1-parent\",\"346\":\"v-6e35bb36#_2-children\",\"347\":\"v-6e35bb36#_3-refs\",\"348\":\"v-6e35bb36#_3-inheritattrs和-attrs\",\"349\":\"v-6e35bb36#_1-inheritattrs\",\"350\":\"v-6e35bb36#_2-attrs\",\"351\":\"v-6e35bb36#二、兄弟组件通信\",\"352\":\"v-6e35bb36#_1-root\",\"353\":\"v-6e35bb36#_1-基本用法\",\"354\":\"v-6e35bb36#_2-一个缺点\",\"355\":\"v-6e35bb36#_3-让它成为响应式\",\"356\":\"v-6e35bb36#_2-eventbus\",\"357\":\"v-6e35bb36#_1创建\",\"358\":\"v-6e35bb36#_2-使用\",\"359\":\"v-6e35bb36#这里需要特别强调的一点是当一个事件在多个组件里监听时-每个组件在销毁时连同事件也要销毁-不然它会在你看不到的地方继续执行而难以被发现-当然不管是不是在多个组件监听-在组件销毁时一起销毁监听事件不失为一种良好的编程习惯\",\"360\":\"v-6e35bb36#_3-缺点\",\"361\":\"v-6e35bb36#_4-替代vuex\",\"362\":\"v-6e35bb36#三、隔代组件通信\",\"363\":\"v-6e35bb36#_1-provide和inject-依赖注入\",\"364\":\"v-6e35bb36#_1-使用\",\"365\":\"v-6e35bb36#_2-不明显的缺点\",\"366\":\"v-6e35bb36@0\",\"367\":\"v-6e35bb36@1\",\"368\":\"v-6fd47aba\",\"369\":\"v-6fd47aba#💎-准备工作\",\"370\":\"v-6fd47aba#🚗-创建项目并运行\",\"371\":\"v-6fd47aba#🚗-开启新功能\",\"372\":\"v-6fd47aba#🚗-下载最新的vue-language-features-volar\",\"373\":\"v-6fd47aba#🚀-体验\",\"374\":\"v-6fd47aba#🚗-defineprops使用引入外部定义的接口\",\"375\":\"v-6fd47aba#🚗-props结构响应式\",\"376\":\"v-6fd47aba#🚗-defineemits\",\"377\":\"v-6fd47aba#🚗-definemodel\",\"378\":\"v-6fd47aba#🚗-一些类型检查增强的功能\",\"379\":\"v-6fd47aba#泛型组件\",\"380\":\"v-6fd47aba#defineslots新增类型检查\",\"381\":\"v-6fd47aba#🎉-总结\",\"382\":\"v-6fd47aba@0\",\"383\":\"v-6fd47aba@1\",\"384\":\"v-27e73d4d\",\"385\":\"v-27e73d4d#一、开始\",\"386\":\"v-27e73d4d#二、实践\",\"387\":\"v-27e73d4d#_1-跟进列表\",\"388\":\"v-27e73d4d#_2-段落列表\",\"389\":\"v-27e73d4d#_3-交错列表\",\"390\":\"v-27e73d4d#_4-更多构想\",\"391\":\"v-27e73d4d#三、思想\",\"392\":\"v-27e73d4d#_1-对思想的理解\",\"393\":\"v-27e73d4d#_2-实践心得\",\"394\":\"v-27e73d4d#_2-1尽量少用过度属性做复杂的动画\",\"395\":\"v-27e73d4d#_2-2多用动画属性\",\"396\":\"v-27e73d4d#_2-3多使用settiemout函数给不同dom依次设置动画延迟\",\"397\":\"v-27e73d4d@0\",\"398\":\"v-27e73d4d@1\",\"399\":\"v-49f365ca\",\"400\":\"v-49f365ca#🚀-你喜欢哪个主题\",\"401\":\"v-49f365ca#默认主题案例\",\"402\":\"v-49f365ca#vuepress-theme-hope-案例\",\"403\":\"v-49f365ca#vuepress-theme-reco-案例\",\"404\":\"v-49f365ca#vuepress-theme-reco-2-0-案例\",\"405\":\"v-49f365ca#vuepress-theme-vdoing-案例\",\"406\":\"v-49f365ca#🚀-搭建项目\",\"407\":\"v-49f365ca#💎-初始化项目\",\"408\":\"v-49f365ca#🚀-首页配置\",\"409\":\"v-49f365ca#🚀-导航栏\",\"410\":\"v-49f365ca#🚀-侧边栏\",\"411\":\"v-49f365ca#💎-全局侧边栏配置\",\"412\":\"v-49f365ca#💎-分离式导航栏\",\"413\":\"v-49f365ca#💎-自动生成目录页面\",\"414\":\"v-49f365ca#🚀-搜索功能\",\"415\":\"v-49f365ca#🚀-自动部署\",\"416\":\"v-49f365ca#🚀-添加评论功能\",\"417\":\"v-49f365ca#🎉-最后\",\"418\":\"v-49f365ca@0\",\"419\":\"v-49f365ca@1\",\"420\":\"v-7d72c4ac\",\"421\":\"v-e1e3da16\",\"422\":\"v-dc3b2a6e\",\"423\":\"v-157350f2\",\"424\":\"v-744e35e2\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,6],\"1\":[1,2],\"2\":[1],\"3\":[1,5],\"4\":[1,28],\"5\":[1,5],\"6\":[3],\"7\":[2,27],\"8\":[2,39],\"9\":[2,3],\"10\":[2,37],\"11\":[2],\"12\":[2,12],\"13\":[2,34],\"14\":[2,7],\"15\":[2,108],\"16\":[2],\"17\":[2,18],\"18\":[2,39],\"19\":[2,7],\"20\":[2,18],\"21\":[2,11],\"22\":[null,null,1],\"23\":[null,null,2],\"24\":[5,15],\"25\":[3],\"26\":[1,58],\"27\":[1,70],\"28\":[1,98],\"29\":[1,60],\"30\":[null,null,1],\"31\":[null,null,2],\"32\":[5,12],\"33\":[2,9],\"34\":[2,3],\"35\":[2,35],\"36\":[2,43],\"37\":[2,20],\"38\":[2,47],\"39\":[4,28],\"40\":[2,33],\"41\":[2,56],\"42\":[2,21],\"43\":[2,12],\"44\":[null,null,1],\"45\":[null,null,2],\"46\":[3,3],\"47\":[2,26],\"48\":[2,21],\"49\":[2,30],\"50\":[5,6],\"51\":[1,7],\"52\":[1,13],\"53\":[1,6],\"54\":[2,14],\"55\":[2,10],\"56\":[null,null,1],\"57\":[null,null,1],\"58\":[2,21],\"59\":[2],\"60\":[2,19],\"61\":[2,9],\"62\":[2,20],\"63\":[2,11],\"64\":[2,17],\"65\":[2,12],\"66\":[2,11],\"67\":[2],\"68\":[1,19],\"69\":[1,25],\"70\":[2,25],\"71\":[2],\"72\":[3,21],\"73\":[3,33],\"74\":[2,15],\"75\":[2],\"76\":[1,17],\"77\":[1,30],\"78\":[1,28],\"79\":[1,37],\"80\":[2,50],\"81\":[2],\"82\":[2,24],\"83\":[2,17],\"84\":[2,9],\"85\":[null,null,1],\"86\":[null,null,2],\"87\":[1,3],\"88\":[5,18],\"89\":[5,22],\"90\":[9,27],\"91\":[6,10],\"92\":[5,53],\"93\":[7,11],\"94\":[null,null,1],\"95\":[null,null,1],\"96\":[5,7],\"97\":[1,11],\"98\":[1,8],\"99\":[3,21],\"100\":[3,20],\"101\":[1,12],\"102\":[1,16],\"103\":[1,1],\"104\":[1,16],\"105\":[2,17],\"106\":[2,12],\"107\":[2,36],\"108\":[1,8],\"109\":[1,30],\"110\":[1,42],\"111\":[1,14],\"112\":[1,64],\"113\":[1,15],\"114\":[null,null,1],\"115\":[null,null,2],\"116\":[1,13],\"117\":[3,17],\"118\":[3,33],\"119\":[3,31],\"120\":[3,17],\"121\":[3,36],\"122\":[null,null,1],\"123\":[null,null,1],\"124\":[2],\"125\":[2,16],\"126\":[2,28],\"127\":[2],\"128\":[1],\"129\":[2,27],\"130\":[3,31],\"131\":[3,23],\"132\":[4,25],\"133\":[2,23],\"134\":[1],\"135\":[3,53],\"136\":[2,20],\"137\":[1],\"138\":[4,48],\"139\":[1,54],\"140\":[1,58],\"141\":[2],\"142\":[1,7],\"143\":[1,106],\"144\":[2,4],\"145\":[null,null,2],\"146\":[null,null,1],\"147\":[1,2],\"148\":[2],\"149\":[1,4],\"150\":[1,4],\"151\":[1,1],\"152\":[1,6],\"153\":[1,19],\"154\":[1,103],\"155\":[2,60],\"156\":[null,null,1],\"157\":[null,null,2],\"158\":[2,4],\"159\":[1,24],\"160\":[1,64],\"161\":[2,96],\"162\":[1,45],\"163\":[1,39],\"164\":[1,32],\"165\":[null,null,1],\"166\":[null,null,2],\"167\":[1],\"168\":[7,6],\"169\":[2],\"170\":[4,15],\"171\":[2,15],\"172\":[2,12],\"173\":[2,18],\"174\":[2,15],\"175\":[2],\"176\":[4,61],\"177\":[2,63],\"178\":[null,null,1],\"179\":[null,null,2],\"180\":[3,5],\"181\":[3],\"182\":[2,119],\"183\":[2,40],\"184\":[2,38],\"185\":[2,14],\"186\":[1,40],\"187\":[null,null,1],\"188\":[null,null,1],\"189\":[2,9],\"190\":[3,5],\"191\":[2,47],\"192\":[2,83],\"193\":[null,null,1],\"194\":[null,null,1],\"195\":[5,8],\"196\":[1,3],\"197\":[2,34],\"198\":[2],\"199\":[2,27],\"200\":[2,4],\"201\":[3,68],\"202\":[3,55],\"203\":[2,9],\"204\":[null,null,1],\"205\":[null,null,2],\"206\":[4,5],\"207\":[1],\"208\":[1,80],\"209\":[1,21],\"210\":[1,39],\"211\":[1,66],\"212\":[5,10],\"213\":[4,5],\"214\":[7,15],\"215\":[1,11],\"216\":[1,19],\"217\":[2,21],\"218\":[1,14],\"219\":[null,null,1],\"220\":[null,null,2],\"221\":[3,13],\"222\":[2,28],\"223\":[3,83],\"224\":[2,3],\"225\":[3,38],\"226\":[3,38],\"227\":[2,40],\"228\":[2,59],\"229\":[null,null,1],\"230\":[null,null,2],\"231\":[2,9],\"232\":[1,8],\"233\":[4,56],\"234\":[1,20],\"235\":[4,77],\"236\":[2,28],\"237\":[null,null,1],\"238\":[null,null,2],\"239\":[3,3],\"240\":[3,60],\"241\":[1,99],\"242\":[1,28],\"243\":[1,32],\"244\":[null,null,1],\"245\":[null,null,2],\"246\":[2,6],\"247\":[1,39],\"248\":[1,18],\"249\":[1,24],\"250\":[1,40],\"251\":[1,35],\"252\":[1,27],\"253\":[1,18],\"254\":[null,null,1],\"255\":[null,null,2],\"256\":[4],\"257\":[2,15],\"258\":[4,10],\"259\":[2,81],\"260\":[2,6],\"261\":[2,17],\"262\":[2,3],\"263\":[2,80],\"264\":[2,4],\"265\":[2,10],\"266\":[null,null,1],\"267\":[null,null,2],\"268\":[4],\"269\":[1,9],\"270\":[3,12],\"271\":[2,103],\"272\":[2,62],\"273\":[2,10],\"274\":[2,31],\"275\":[null,null,1],\"276\":[null,null,2],\"277\":[2,10],\"278\":[3,58],\"279\":[3,60],\"280\":[null,null,1],\"281\":[null,null,2],\"282\":[2,5],\"283\":[1,37],\"284\":[1,49],\"285\":[1,5],\"286\":[1,64],\"287\":[1,29],\"288\":[1,10],\"289\":[7,14],\"290\":[6,15],\"291\":[null,null,1],\"292\":[null,null,2],\"293\":[2,4],\"294\":[1,8],\"295\":[1,31],\"296\":[1,142],\"297\":[1,19],\"298\":[null,null,1],\"299\":[null,null,2],\"300\":[2,11],\"301\":[3,30],\"302\":[3,38],\"303\":[3,75],\"304\":[2,6],\"305\":[4,44],\"306\":[2,36],\"307\":[2,8],\"308\":[null,null,1],\"309\":[null,null,2],\"310\":[1,3],\"311\":[2,97],\"312\":[4,83],\"313\":[2,101],\"314\":[2,117],\"315\":[null,null,1],\"316\":[null,null,2],\"317\":[2,6],\"318\":[1,50],\"319\":[1,85],\"320\":[null,null,1],\"321\":[null,null,2],\"322\":[2,6],\"323\":[2,113],\"324\":[2,94],\"325\":[2,113],\"326\":[null,null,1],\"327\":[null,null,2],\"328\":[1,16],\"329\":[3,5],\"330\":[2,12],\"331\":[2],\"332\":[3,31],\"333\":[3,41],\"334\":[4,21],\"335\":[2],\"336\":[3,17],\"337\":[4,34],\"338\":[2,13],\"339\":[null,null,1],\"340\":[null,null,2],\"341\":[1,8],\"342\":[2],\"343\":[2,62],\"344\":[11],\"345\":[2,20],\"346\":[2,25],\"347\":[2,53],\"348\":[2],\"349\":[2,48],\"350\":[2,54],\"351\":[2],\"352\":[2,1],\"353\":[2,43],\"354\":[2,47],\"355\":[2,45],\"356\":[2,7],\"357\":[1,19],\"358\":[2,35],\"359\":[5],\"360\":[2,10],\"361\":[2,3],\"362\":[2],\"363\":[4,3],\"364\":[2,29],\"365\":[2,34],\"366\":[null,null,1],\"367\":[null,null,1],\"368\":[2,11],\"369\":[2],\"370\":[2,18],\"371\":[2,24],\"372\":[6,6],\"373\":[2],\"374\":[3,47],\"375\":[3,23],\"376\":[2,37],\"377\":[2,37],\"378\":[2],\"379\":[1,25],\"380\":[2,13],\"381\":[2,13],\"382\":[null,null,1],\"383\":[null,null,2],\"384\":[3,5],\"385\":[2,15],\"386\":[2,3],\"387\":[2,22],\"388\":[2,19],\"389\":[2,47],\"390\":[2,11],\"391\":[2],\"392\":[2,13],\"393\":[2],\"394\":[2,7],\"395\":[2,2],\"396\":[2,11],\"397\":[null,null,1],\"398\":[null,null,2],\"399\":[8,24],\"400\":[2,29],\"401\":[1,4],\"402\":[4,7],\"403\":[5,9],\"404\":[7,8],\"405\":[5,30],\"406\":[2],\"407\":[2,65],\"408\":[2,102],\"409\":[2,91],\"410\":[2,8],\"411\":[2,36],\"412\":[2,20],\"413\":[2,12],\"414\":[2,29],\"415\":[2,71],\"416\":[2,77],\"417\":[2,13],\"418\":[null,null,1],\"419\":[null,null,1],\"420\":[1],\"421\":[1],\"422\":[1],\"423\":[1],\"424\":[1]},\"averageFieldLength\":[2.1813759652341873,28.56691979145503,0.5651659773458781],\"storedFields\":{\"0\":{\"h\":\"首页\",\"t\":[\"mmdctjj.jpg\",\"大家好，我是萌萌哒草头将军，欢迎关注我。\"]},\"1\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"2\":{\"h\":\"幻灯片页\"},\"3\":{\"h\":\"🎉SolidJS响应式原理和简易实现🎉\",\"t\":[\"文章首发公众号：萌萌哒草头将军\",\"最近有🎁，感兴趣的小伙伴快去关注我了解详情吧\",\"完整源码公众号回复solid获得\"]},\"4\":{\"h\":\"💡相关阅读\",\"t\":[\"学不完的框架，🐔啄不完的米，SolidJS，你到底爱谁？😘\",\"演练场地址：https://playground.solidjs.com/\",\"上篇文章中主要介绍了Solid JS的基本语法，分阶段粗略地介绍了一些原理（响应式原理、编译原理和运行时原理）。\",\"接下来的几篇文章里我会详细介绍每个阶段的详细实现原理，希望可以给你的学习带来帮助。\",\"写这篇文章的时候有很大的犹豫，担心Solid JS受众太小，文章的反响连”平平“都算不上，所以先写一篇试试水，如果真的反响平平，我会暂时放弃这个写作计划，还请见谅！\"]},\"5\":{\"h\":\"响应式原理\",\"t\":[\"作为Solid JS响应式的基石，我们先看看createSignal的用法和原理。接着我们手动实现一个简易版的createSignal,\"]},\"6\":{\"h\":\"💎 万恶之源 createSignal\"},\"7\":{\"h\":\"🚗 用法\",\"t\":[\"function createSignal<T>( initialValue: T, options?: { equals?: false | ((prev: T, next: T) => boolean) } ): [get: () => T, set: (v: T) => T]; \",\"Solid JS的厉害之处是，你可以定义变量是否为响应式，甚至可以定义响应式的时机。\",\"🍎 仅提供initialValue时，（默认）是响应式的。\",\"🍎 在options设置equals为false时不管何时都是响应式。\",\"🍎 equals设置为函数，根据新值和旧值的关系来设置何时为响应式。\"]},\"8\":{\"h\":\"🚗 例子\",\"t\":[\"下面这个例子仅仅在新的值大于旧的值（新增）时，才是响应式的。\",\"import { render } from \\\"solid-js/web\\\"; import { createSignal } from \\\"solid-js\\\"; function Counter() { const [count, setCount] = createSignal(1, { equals: (n, o) => n > o }); const increment = () => setCount(count() + 1); const reduce = () => setCount(count() - 1); return ( <> <button type=\\\"button\\\" onClick={increment}> + </button> <button type=\\\"button\\\">{count()}</button> <button type=\\\"button\\\" onClick={reduce}> - </button> </> ); } render(() => <Counter />, document.getElementById(\\\"app\\\")!); \"]},\"9\":{\"h\":\"🚗 原理\",\"t\":[\"createSignal简化后的逻辑如下：\",\"image.png\"]},\"10\":{\"h\":\"🚗 实现\",\"t\":[\"const signalOptions = { equals: false }; function createSignal(value, options) { // 初始化options options = options ? Object.assign({}, signalOptions, options) : signalOptions; // 创建内部signal const s = { value, comparator: options.equals || undefined }; // 定义setter const setter = value => { if (typeof value === \\\"function\\\") { value = value(s.value); } return writeSignal(s, value); }; // 返回[getter, setter] return [readSignal.bind(s), setter]; } // 返回当前内部signal的value function readSignal() { return this.value; } // 更新内部的value，然后返回value function writeSignal(node, value) { if (!node.comparator) { node.value = value; } return value; } \",\"现在我们已经实现了createSignal基本功能了，接下来我们通过实现createEffect来让它具有响应式的能力。\"]},\"11\":{\"h\":\"💎 createEffect\"},\"12\":{\"h\":\"🚗 用法\",\"t\":[\"createEffect接受一个副作用函数，每当它依赖的状态发生改变时，这个副作用都被执行一次。\",\"function createEffect<T>(fn: (v: T) => T, value?: T): void; \"]},\"13\":{\"h\":\"🚗 例子\",\"t\":[\"这是个很常见的例子。\",\"import { render } from \\\"solid-js/web\\\"; import { createSignal, createEffect } from \\\"solid-js\\\"; function Counter() { const [count, setCount] = createSignal(1); const increment = () => setCount(count() + 1); createEffect(() => console.log('count : ', count())) return ( <button type=\\\"button\\\" onClick={increment}> {count()} </button> ); } render(() => <Counter />, document.getElementById(\\\"app\\\")!); \"]},\"14\":{\"h\":\"🚗 原理\",\"t\":[\"我们已经知道，当createEffect依赖项发生改变时，副作用会也会发生改变，这是因为createSignal是基于发布订阅模式的响应式。一个较为完整的关系如下：\",\"image.png\"]},\"15\":{\"h\":\"🚗 实现\",\"t\":[\"const signalOptions = { equals: false }; const observers = [] function createEffect (effect) { const execute = () => { // 保存在observers中 observers.push(execute); try { effect(); } finally { // 释放 observers.pop(); } }; // 副作用函数立即执行 execute(); }; function createSignal(value, options) { // 初始化options options = options ? Object.assign({}, signalOptions, options) : signalOptions; // 创建内部signal const s = { value, // 保存订阅者 subscribers: new Set(), comparator: options.equals || undefined }; // 定义setter const setter = value => { if (typeof value === \\\"function\\\") { value = value(s.value); } return writeSignal(s, value); }; // 返回[getter, setter] return [readSignal.bind(s), setter]; } // 返回当前内部signal的value function readSignal() { const curr = observers[observers.length - 1] curr && this.subscribers.add(curr) return this.value; } // 更新内部的value，然后返回value function writeSignal(node, value) { if (!node.comparator) { node.value = value; } // 每次写入时执行对应的订阅者 node.subscribers.forEach((subscriber) => subscriber()); return value; } \",\"现在我们准备下面的html文件\",\"<!DOCTYPE html> <html lang=\\\"en\\\"> <head> <meta charset=\\\"UTF-8\\\"> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=edge\\\"> <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1.0\\\"> <title>SolidJS</title> </head> <body> <h1>打开控制台查看结果</h1> <script src=\\\"./solid.js\\\"></script> <script> const [count, setCount] = createSignal(1); const increment = () => setCount(count() + 1); createEffect(() => console.log('count : ', count())) window.increment = increment </script> </body> </html> \",\"使用window.increment模拟点击事件，打印如下。\",\"下面我们实现createMemo\"]},\"16\":{\"h\":\"💎 createMemo\"},\"17\":{\"h\":\"🚗 用法\",\"t\":[\"createMemo通常用来做派生变量保存基于某个状态中间值。完整用法如下：\",\"function createMemo<T>( fn: (v: T) => T, value?: T, options?: { equals?: false | ((prev: T, next: T) => boolean) } ): () => T; \",\"本篇只讨论最原始的memo。\"]},\"18\":{\"h\":\"🚗 例子\",\"t\":[\"一个例子如下，每当count变化时，sum自动加2\",\"import { render } from \\\"solid-js/web\\\"; import { createSignal, createEffect, createMemo } from \\\"solid-js\\\"; function Counter() { const [count, setCount] = createSignal(1); const increment = () => setCount(count() + 1); const sum = createMemo(() => count() + 2) createEffect(() => console.log('sum : ', sum())) createEffect(() => console.log('count : ', count())) return ( <button type=\\\"button\\\" onClick={increment}> {count()} </button> ); } render(() => <Counter />, document.getElementById(\\\"app\\\")!); \"]},\"19\":{\"h\":\"🚗 原理\",\"t\":[\"它的内部是使用createSignal实现的，所以流程上来说和createEffect一样。\",\"真实的源码里，是基于createComputation实现的，但是它的内部是createSignal\",\"image.png\"]},\"20\":{\"h\":\"🚗 实现\",\"t\":[\"const createMemo = (memo) => { const [value, setValue] = createSignal(); createEffect(() => setValue(memo())); return value; }; \",\"接下来在测试例子里添加如下两行\",\"const sum = createMemo(() => count() + 2) createEffect(() => console.log('sum : ', sum())) \",\"然后在控制台操作\"]},\"21\":{\"h\":\"🎉 最后\",\"t\":[\"今天的分享就到这了，如果发现错误，请及时指正。\",\"觉得还不错，可以关注我的公众号，最近有🎁，感兴趣的小伙伴快点来吧！\",\"本系列未来的计划：\",\"SolidJS响应式原理和简易实现\",\"SolidJS模板编译过程\",\"SolidJS源码学习过程总结\"]},\"22\":{\"c\":[\"前端\"]},\"23\":{\"c\":[\"JavaScript\",\"SolidJS\"]},\"24\":{\"h\":\"学不完的框架，🐔啄不完的米，SolidJS，你到底爱谁？😘\",\"t\":[\"最近刚刚整明白点Svelte感觉整个世界都清净了，但是昨天，有人给我介绍了SolidJS，\",\"上篇：Svelte原理和进阶看这篇就够了\",\"当时我心想：这又是啥玩意啊！\",\"经过一番深入交流才知道，居然又是个前端框架。\",\"“还有完没完了，一个接一个的框架啥时候是个头啊！”\",\"不过本着给大家踩坑避雷的精神，我又秉烛夜读，通宵达旦研究了一番。\"]},\"25\":{\"h\":\"🚀模仿？超越？\"},\"26\":{\"h\":\"💎写法\",\"t\":[\"先上代码\",\"import { render } from \\\"solid-js/web\\\"; import { createSignal, createMemo, createEffect } from \\\"solid-js\\\"; function Counter() { // 定义变量 const [count, setCount] = createSignal(0); // 缓存中间值 const fib = createMemo(() => { console.log('Calculating Fibonacci'); return (count() * 2 + 10); }); // 执行副作用 createEffect(() => { console.log(\\\"The count is now\\\", count()); }); return ( <div onClick={() => setCount(() => count() + 1)}> Count: {count()} fib Count: {fib()} </div> ); } render(() => <Counter />, document.getElementById('app')); \",\"是不是很熟悉，这不就是React吗？\",\"难道这是React被抄袭的最惨的一次吗？\",\"是的，官网明确告诉你，它会让你感觉既熟悉又现代。\",\"和React类似的hook写法，一样的Jsx模板语法，熟悉吧？\",\"不过，当你揭开它神秘的面纱，你会发现里面居然是你曾经的神——Vue！\"]},\"27\":{\"h\":\"💎响应式原理\",\"t\":[\"因为它的响应式官方称为primitive，是基于Proxy的发布订阅模式的API，\",\"primitive的响应式主要包括Signal、Memo 和 Effect，对应的接口如下\",\" // 定义变量 const [count, setCount] = createSignal(0); // 缓存中间值 const fib = createMemo(() => (count() * 2 + 10)); // 执行副作用 createEffect(() => { console.log(\\\"The count is now\\\", count()); }); \",\"来看看createSignal的大致逻辑\",\"function createSignal(value) { const subscribers = new Set(); const read = () => { const listener = getCurrentListener(); if (listener) subscribers.add(listener); return value; }; const write = nextValue => { value = nextValue; for (const sub of subscribers) sub.run(); }; return [read, write]; } \",\"在每次read()的地方收集listener，做为订阅者，每次write()的时候作为发布者，通知每个listener更新数据。\",\"SolidJS的发布订阅模式也是基于Proxy的。下篇文章会做详细的对比。\",\"和React不同的是，reead是个方法，这也是前面模板使用count()，而不是count的原因。\",\"createMemo和createEffect会自动收集依赖项，每次触发依赖项listener的更新时，都会重新执行。\",\"到这，是不是觉得，这太简单了吧，这不就是React和Vue的结合体嘛！\",\"欢欣之后，你又想和它谈心，可当你走近它的心，又发现了你最近心心念念的Svelte的影子！\"]},\"28\":{\"h\":\"💎模板编译原理\",\"t\":[\"上述例子的编译结果如下: （编译结果可以在官网的演练场Output查看）\",\"import { template as _$template } from \\\"solid-js/web\\\"; import { delegateEvents as _$delegateEvents } from \\\"solid-js/web\\\"; import { createComponent as _$createComponent } from \\\"solid-js/web\\\"; import { insert as _$insert } from \\\"solid-js/web\\\"; const _tmpl$ = /*#__PURE__*/_$template(`<div>Count: <!>fib Count: </div>`, 3); import { render } from \\\"solid-js/web\\\"; import { createSignal, createMemo, createEffect } from \\\"solid-js\\\"; function Counter() { // 定义变量 const [count, setCount] = createSignal(0); // 缓存中间值 const fib = createMemo(() => { console.log('Calculating Fibonacci'); return count() * 2 + 10; }); // 执行副作用 createEffect(() => { console.log(\\\"The count is now\\\", count()); }); return (() => { const _el$ = _tmpl$.cloneNode(true), _el$2 = _el$.firstChild, _el$4 = _el$2.nextSibling, _el$3 = _el$4.nextSibling; _el$.$$click = () => setCount(() => count() + 1); _$insert(_el$, count, _el$4); _$insert(_el$, fib, null); return _el$; })(); } render(() => _$createComponent(Counter, {}), document.getElementById('app')); _$delegateEvents([\\\"click\\\"]); \",\"简单分析之后可以得出结论如下：\",\"🚗首先，使用_$template 创建纯静态的jsx模板，\",\"🚗接着，通过cloneNode方法，以及firstChild等属性获取动态元素，\",\"🚗紧接着，为每个元素绑定对应的方法\",\"🚗再接着，将动态的片段使用_$insert方法插入模板中，注意到count和fib都是未执行的函数。\",\"🚗接着使用$createComponent包裹组件。\",\"🚗最后组装render方法，将组件包装成函数，和根节点一起作为render方法的参数。\",\"这和Svelte的编译结果有两个十分类似的地方：\",\"💎将每动态片段的更新范围，精确到了原子级别。\",\"💎它们的返回值都没有虚拟DOM\",\"_$insert(_el$, count, _el$4); _$insert(_el$, fib, null); \",\"// Svelte编译之后create_fragment返回的p方法，也就是update方法 p(ctx, [dirty]) { if (dirty & /*count*/ 1) set_data(t1, /*count*/ ctx[0]); }, \"]},\"29\":{\"h\":\"💎运行时原理\",\"t\":[\"在运行时阶段，会执行render方法，render方法如下\",\"function render(code, element, init, options = {}) { let disposer; createRoot(dispose => { disposer = dispose; element === document ? code() : insert( element, code(), element.firstChild ? null : undefined, init ); }, options.owner); return () => { disposer(); element.textContent = \\\"\\\"; }; } \",\"代码都会将编译的() => _$createComponent(Counter, {})执行，并挂载到document.getElementById('app')\",\"由于在编译阶段还没有建立变量的响应式机制，执行render方法后，才会通过发布订阅模式创建响应式变量，每次调用write()、或者触发事件时，导致变量更新，以及对应的元素节点使用_$insert更新DOM。\",\"看着SolidJS朴素的运行时原理，\",\"你才回过神来，发现你曾经邂逅过的一切，它早已拥有，\",\"你爱慕着的，也为你准备完毕，\",\"最后你不禁感叹，SolidJS才是你那个：\",\"『众里寻他千百度，慕然回首，那人却在，灯火阑珊处』\",\"的框架啊！\",\"你刚想抓住它，它却早已隐入了那灯影里！！！\",\"好了好了，不做梦了，今天的分享就这些了，\",\"下篇文章会介绍下SolidJS别的用法以及响应式原理。\",\"敬请期待！欢迎关注我\"]},\"30\":{\"c\":[\"前端\"]},\"31\":{\"c\":[\"JavaScript\",\"SolidJS\"]},\"32\":{\"h\":\"学不完的框架，🐕舔不完的面，Qwik，你到底想嘎哈？\",\"t\":[\"文章首发在公众号：萌萌哒草头将军，最近关注有抽五本书送给大家，关注后回复：活动\",\"最近我又又双学习了一个新框架，Qwik\",\"真的没完没了了，\",\"不过作为\\\"前端娱乐圈战地记者\\\"，我继续帮大家踩雷。\"]},\"33\":{\"h\":\"💡 同系列阅读\",\"t\":[\"学不完的框架，🐔啄不完的米，SolidJS，你到底爱谁？😘\",\"🔥超级简单的Svelte，学不会你来打我\",\"真心希望不会有烧不断地锁这篇文章！！！\"]},\"34\":{\"h\":\"💎 初识qwik\",\"t\":[\"废话不多说，我们先上代码。一个简单的计数器功能\"]},\"35\":{\"h\":\"🚀 useSignal\",\"t\":[\"const App = component$(() => { const count = useSignal(0); return ( <> <button onClick$={() => count.value++}>+</button> <div>{count.value}</div> </> ); }); \",\"让我们给这个计数器加上监听事件（后面会详细讲）\",\" useVisibleTask$(({ track }) => { track(() => console.log(count.value)) }) \",\"sigal.gif\",\"useSignal，虽然让我想起来了熟悉地SolidJS，但是看写法，这不就是vue3的ref吗？是的，看起来很像，那有没有类似reactive呢？\"]},\"36\":{\"h\":\"🚀 useStore\",\"t\":[\"当然有啊，useSignal是针对基本变量的。对于非基本类型可以使用useStore。\",\"const App = component$(() => { const data = useStore({count: 0}) return ( <> <button onClick$={() => data.count++}>+</button> <p>{data.count}</p> </> ); }); \",\"sigal.gif\",\"useStore可以听提供方法，不过比较复杂：\",\"import { $, type QRL } from \\\"@builder.io/qwik\\\"; type Store = { count: number add: QRL<(this: Store) => void> } const App = component$(() => { const data = useStore<Store>({ count: 0, add: $(function(this) { this.count++; }) }) return ( <> <button onClick$={() => data.add()}>+</button> <p>{data.count}</p> </> ); } \",\"sigal.gif\"]},\"37\":{\"h\":\"🚀 useComputed$\",\"t\":[\"reactive有了，computed是不是也应该有啊，来了，它就是useComputed$\",\" const capitalizedName = useComputed$(() => { return count.value + 'mmdctjj'; }); useVisibleTask$(({ track }) => { track(() => console.log(capitalizedName.value)) }) \",\"computer.gif\"]},\"38\":{\"h\":\"🚀 useContext\",\"t\":[\"那依赖注入有没有啊？抱歉，没有，因为Qwik是基于jsx的框架，所以只有拿useContext来将就了\",\" type Store = { count: number add: QRL<(this: Store) => void> } // 🚗 创建全局的上下文 const context = createContextId<Store>('uuid') const App = component$(() => { const data = useStore<Store>({ count: 0, add: $(function(this) this.count++; }) }) // 🚗 provider数据 useContextProvider(context, data); return ( <> <button onClick$={() => data.add()}>+</button> <p>{data.count}</p> </> ); } const Child = component$(() => { // 🚗 消费上下文 const data = useContext(context) return ( <> <Child /> </> ); } \",\"好吧，接下来我们说些不一样的\"]},\"39\":{\"h\":\"🚀 useTask$ or useVisibleTask$\",\"t\":[\"上面的例子中，我们所有的监听事件都是通过useVisibleTask$实现的。虽然它看起来和useEffect类似，但是却有着很大的区别。\",\"这得从qwik的架构说起，首先Qwik是个服务端渲染的框架，相当于Next.js（基于React服务端渲染框架）、 Nuxt.js(基于Vue地服务端渲染框架)，换句话说，它天生支持服务端渲染的前端框架。所以一个组件的生命周期是从服务器开始的。\",\" useTask$ -------> RENDER ---> useVisibleTask$ || --- SERVER or BROWSER --- | ----- BROWSER ----- || pause|resume \",\"它们都是用来注册任务的钩子函数，这个任务在服务端仅仅执行一次，在客户端可能多次渲染。\",\"下面是具体的区别\"]},\"40\":{\"h\":\"👉 useTask$\",\"t\":[\"useTask$首先在服务端执行一次，如果客户端使用track订阅依赖了，那么当客户端渲染之后触发更新时，任务会在客户端再次执行。如果没有track，那么仅仅在客户端执行一次。\",\"const App = component$(() => { const count = useSignal(0); useTask$(({ track }) => { track(() => console.log(count.value)) }) return ( <> <button onClick$={() => count.value++}>+</button> <div>{count.value}</div> </> ); }); \",\"task.gif\",\"页面刷新后服务端也执行了一次任务\"]},\"41\":{\"h\":\"👉 useVisibleTask$\",\"t\":[\"useVisibleTask$：仅仅在浏览器执行，渲染之后立马执行，当订阅的参数发生改变时，任务会被再次执行。\",\"const App = component$(() => { const count = useSignal(0); useVisibleTask$(({ track }) => { track(() => console.log(count.value)) }) return ( <> <button onClick$={() => count.value++}>+</button> <div>{count.value}</div> </> ); }); \",\"taskvis.gif\",\"它们还有一个特别重要的参数cleanup，每次新的任务被触发时，都会执行上次任务的cleanup。另外组件被移除时也会被执行。\",\" useVisibleTask$(({ track, cleanup }) => { // console.log('I am excuted!') track(() => console.log(count.value)) cleanup(() => console.log('last')) }) \",\"cleanup.gif\",\"我们可以看到，每次任务触发都是先打印last，然后才是最新的count.value\",\"另外，还有一个重要的配置项：{ strategy: 'document-ready' }，此时，会在页面加载完毕立马执行。\",\" useVisibleTask$(() => { // 渲染完毕之后执行 console.log(2222) }) useVisibleTask$(() => { // document-ready立马执行 console.log(1111) }, { strategy: 'document-ready' }) \",\"此时console的打印结果是先1111，然后是2222。\"]},\"42\":{\"h\":\"👉 帮它模拟完整的生命周期\",\"t\":[\"综上，我们可以模拟出一个完整的生命周期\",\" useVisibleTask$(() => { console.log('before mounted!') }, { strategy: 'document-ready' }) useVisibleTask$(({ cleanup }) => { console.log('mounted!') cleanup(() => console.log('unmount')) }) useVisibleTask$(({ track, cleanup }) => { track(() => console.log('updated!', count.value)) cleanup(() => console.log('before update')) }) \",\"唯一的瑕疵是before update会在组件销毁时和unmount一起执行一次。\",\"mounted.gif\"]},\"43\":{\"h\":\"💎 总结\",\"t\":[\"qwik上线一年不到已经17.9k地star了，足见它地优秀了！\",\"今天的分享就这些，如果大家喜欢我一定会再出一篇介绍其它几个有意思的Api的和编译相关的文章。\",\"如果文中有纰漏的地方欢迎指正\",\"我的文章首发在公众号：萌萌哒草头将军，如果你想联系我，可以加我SunBoy_mmdctjj，我们一起成长\"]},\"44\":{\"c\":[\"前端\"]},\"45\":{\"c\":[\"JavaScript\",\"Vite\"]},\"46\":{\"h\":\"运行时💎？还是编译时🚀？前端框架的角斗场\",\"t\":[\"文章首发公众号：萌萌哒草头将军，最近关注有🎁\"]},\"47\":{\"h\":\"💎 只有运行时的JavaScript\",\"t\":[\"JavaScript从诞生至今，都是运行在浏览器环境或者V8环境的编程语言，由于它边解释边执行的特性，导致只有运行时，没有编译时。\",\"这个表述是有争论的，可以理解为JavaScript的运行时和编译时是交织在一起的，这就是边解释边执行的含义。\",\"大多数的编程语言，需要将代码转为二进制字节码文件，然后才能被系统识别并运行，转码的过程就是编译时。所以很多编程语言都需要提供转码模块。比如Java使用虚拟机编辑成目标机器字节码，Python有Brython等多种编译器编译代码为字节码\",\"早期，JavaScript从诞生的很长一段时间里，仅仅被用来和服务器通信的工具，随着ajax的出现，用户可以在不刷新页面的情况下和服务端交互。再后来，Jquery兴起，使我们可以快速进行JavaScript和dom的交互。此时，JavaScript一直都是只有运行时的状态。\"]},\"48\":{\"h\":\"💎 只有编译时的TypeScript\",\"t\":[\"只有运行时的语言，最大的缺点就是代码里的错误只能在运行时抛出异常。这也就是为什么会出现TypeScript，因为所有的ts文件先被编译成js文件，然后才会被运行在模板机器中，此时代码里的错误在编译阶段就可以抛出异常了。\",\"不过TypeScript仅仅拥有编译时，因为编译成js文件后就是JavaScript的势力圈了。\",\"随着前端的框架的出现，引入了模板语法和Jsx的概念，才让JavaScript拥有了编译时，不过，这么说不严谨，因为这种编译时，是将基于前端框架的编译时：将框架模板或者Jsx编译成JavaScript代码的过程。\",\"这里的模板是指基于JavaScript的解析的模板，Jsp、Thinkphp、Thymeleaf等模板是基于后端语言的模板。\"]},\"49\":{\"h\":\"💎 编译时也有饭圈\",\"t\":[\"编译时的概念被分为即时编译（JIT）和预编译（AOT）：\",\"即时编译（JIT）：Just In Time，在宿主环境中边编译边执行\",\"预编译（AOT）：Ahead Of Time，编译完成之后在宿主环境中执行\",\"Angular的编译器同时提供了两种编译方案，不过现在已经凉透了，再次上香！！！\",\"第一次上香是在这篇文章里：🔥超级简单的Svelte，学不会你来打我\",\"AOT的好处是可以拥有更短的运行时间， 大多数框架都采用了AOT编译技术，因为预编译（AOT）的特点，采用AOT编译技术的框架，可以对开发者的代码做充分的分析，从而有更大的优化空间。\",\"总体来看，目前前端框架的AOT方案有两种：\",\"Jsx\",\"模板语法\"]},\"50\":{\"h\":\"💎 运行时 VS 编译时，前端框架的选择\",\"t\":[\"前端框架都是在编译时，完成代码的转换，在运行时完成编译结果的渲染。但是由于每个框架的策略不同，导致花在运行时和编译时的时间有所不同。\"]},\"51\":{\"h\":\"重运行时的React\",\"t\":[\"React采用Jsx方案编译，由于Jsx语法过于灵活，导致在编译时，React可以做的优化有限，所以，React将很多工作放在了运行时阶段。\"]},\"52\":{\"h\":\"重编译时的SolidJS和Svelte\",\"t\":[\"SolidJS也采用了Jsx做AOT编译，不过，为了可以直接编译出可执行的JavaScript代码片段，选择对Jsx的灵活的语法做了限制。比如提供Show标签代替if语法，使用For标签代替for语法等。从而让它可以在编译时完成大量的工作。\",\"Svelte和Vue都采用了模板语法方案做AOT编译，不过Vue的模板语法是基于HTML的，而Svelte的模板语法是基于JavaScript的，这就导致了Svete可以直接编译出JavaScript代码片段，从而减少运行时的时间。\"]},\"53\":{\"h\":\"平衡大师Vue\",\"t\":[\"而Vue编译之后的结果是不可运行的Vnode，在运行时，需要像React一样，解析编译结果为JavaScript代码，然后再目标环境运行代码。\"]},\"54\":{\"h\":\"🎉 总结\",\"t\":[\"我根据SolidJS官网给的排名，绘制了编译时到运行时，代码成为可执行JavaScript的示意图图如下：\",\"image.png\",\"所以你觉得是运行时的框架好还是编译时的框架好了？\",\"最后，希望大家理性看待这个问题，框架之间”卷“起来，对我们开发者来说是好事，\",\"附上犹大的推特照片：\",\"尤雨溪和Dan合影\"]},\"55\":{\"h\":\"💡 精彩文章回顾\",\"t\":[\"🔥超级简单的Svelte，学不会你来打我\",\"🚀Svelte原理和进阶看这篇就够了🚀\",\"学不完的框架，🐔啄不完的米，SolidJS，你到底爱谁？😘\",\"🎉尤雨溪为什么要推出Vapor Mode🎉\"]},\"56\":{\"c\":[\"前端\"]},\"57\":{\"c\":[\"JavaScript\"]},\"58\":{\"h\":\"🔥超级简单的Svelte，学不会你来打我\",\"t\":[\"Svelte作为后起之秀，近些年的热度已经盖过Angular了（上香！）\",\"声明式API：Svelte的API是基于声明式编程风格的，这使得代码更易于理解和维护。\",\"组件化：Svelte支持组件化开发，使得代码可以更容易地重用和管理。\",\"响应式：Svelte具有内置的响应式功能，使得数据的变化可以自动更新视图。\",\"轻量级：由于Svelte不需要运行时库，因此生成的应用程序文件大小更小，加载速度更快。\",\"Svelte框架的使用在近年来逐渐流行起来，被越来越多的开发者和公司所采用，如大型企业Netflix、IBM等。\"]},\"59\":{\"h\":\"一、模版语法\"},\"60\":{\"h\":\"1.模版命名\",\"t\":[\"Svelte的语法是基于HTML、CSS和JavaScript的，文件后缀名为.svelte\",\"<!-- example.svelte --> <script> let count = 0; </script> <button> Clicked {count} </button> <style> </style> \"]},\"61\":{\"h\":\"2.插值表达式\",\"t\":[\"使用双花括号 {} 来进行插值表达式，将表达式的值插入到模板中。例如：\",\"<h1>Hello, {name}!</h1> \"]},\"62\":{\"h\":\"3.条件语句\",\"t\":[\"使用 if 和 else 关键字来实现条件语句。例如：\",\"{#if loggedIn} <h1>Welcome back, {user}!</h1> {:else} <button on:click={login}>Log in</button> {/if} \"]},\"63\":{\"h\":\"4.循环语句\",\"t\":[\"使用 each 关键字来实现循环语句。例如：\",\"{#each items as item} <li>{item}</li> {/each} \"]},\"64\":{\"h\":\"5.组件引用\",\"t\":[\"使用组件名来引用一个组件，然后像 HTML 标签一样使用它。例如：\",\"<script> import MyComponent from '/path/example.svelte' </script> <MyComponent /> \"]},\"65\":{\"h\":\"6.事件处理\",\"t\":[\"使用 on: 前缀来绑定事件处理函数。例如：\",\"<button on:click={handleClick}>Click me!</button> \"]},\"66\":{\"h\":\"7.双向绑定\",\"t\":[\"使用 bind: 前缀来实现双向绑定。例如：\",\"<input type=\\\"text\\\" bind:value={name} /> \"]},\"67\":{\"h\":\"8.插槽语法\"},\"68\":{\"h\":\"默认插槽\",\"t\":[\"<!-- MyComponent.svelte --> <div> <h2>{title}</h2> <slot></slot> </div> <!-- App.svelte --> <MyComponent title=\\\"Hello\\\"> <p>World!</p> </MyComponent> \"]},\"69\":{\"h\":\"具名插槽\",\"t\":[\"<!-- MyComponent.svelte --> <div> <h2>{title}</h2> <slot name=\\\"content\\\"></slot> </div> <!-- App.svelte --> <MyComponent title=\\\"Hello\\\"> <p slot=\\\"content\\\">World!</p> </MyComponent> \",\"看完模版语法，可以说和vue时一脉相承\"]},\"70\":{\"h\":\"二、声明变量\",\"t\":[\"不用任何修饰，直接定义就可以被捕获，对于开发者来说，依赖收集是无感的\",\"<script> let count = 0; function handleClick() { count += 1; } </script> <button on:click={handleClick}> Clicked {count} {count === 1 ? 'time' : 'times'} </button> \"]},\"71\":{\"h\":\"三、监听变量的变化\"},\"72\":{\"h\":\"1. $ 方式\",\"t\":[\"<script> let name = 'Alice'; let age = 30; $: { console.log(`name 变为 ${name}`); console.log(`age 变为 ${age}`); } </script> <h1>{name}</h1> <p>{age}</p> \"]},\"73\":{\"h\":\"2. watch() 接口\",\"t\":[\"<script> import { watch } from 'svelte'; let name = 'Alice'; let age = 30; watch( [$name, $age], (currentValues, previousValues) => { console.log(`name 从 ${previousValues[0]} 变为 ${currentValues[0]}`); console.log(`age 从 ${previousValues[1]} 变为 ${currentValues[1]}`); } ); </script> <h1>{name}</h1> <p>{age}</p> \"]},\"74\":{\"h\":\"三、组件化\",\"t\":[\"<!-- Parent.svelte --> <script> import Child from './Child.svelte'; </script> <button>父组件内容</button> <Child /> <!-- Child.svelte --> <script> </script> <p>子组件内容</p> \"]},\"75\":{\"h\":\"1.组件之间通信\"},\"76\":{\"h\":\"props\",\"t\":[\"<!-- Parent.svelte --> <script> let name = 'Svelte'; </script> <Child name={name} /> <!-- Child.svelte --> <script> export let name; </script> <h1>Hello {name}!</h1> \"]},\"77\":{\"h\":\"context\",\"t\":[\"<!-- App.svelte --> <script> import { createContext } from 'svelte'; export const theme = createContext('light'); </script> <svelte:options context=\\\"theme\\\" /> <main> <h1>App</h1> <!-- ... --> </main> <!-- Header.svelte --> <script> import { getContext } from 'svelte'; import { theme } from './App.svelte'; const currentTheme = getContext(theme); </script> <header class={currentTheme}> <h2>Header</h2> <!-- ... --> </header> \"]},\"78\":{\"h\":\"store\",\"t\":[\"<!-- Counter.svelte --> <script> import { writable } from 'svelte/store'; export const count = writable(0); </script> <h1>Count: {$count}</h1> <button on:click={() => $count += 1}>Increment</button> <!-- DisplayCount.svelte --> <script> import { count } from './Counter.svelte'; </script> <h1>Count: {$count}</h1> \"]},\"79\":{\"h\":\"EventBus\",\"t\":[\"<!-- Sender.svelte --> <script> import { createEventDispatcher } from 'svelte'; const dispatch = createEventDispatcher(); function handleClick() { dispatch('my-event', { message: 'Hello, world!' }); } </script> <button on:click={handleClick}>Click me!</button> <!-- Receiver.svelte --> <script> import { onMount } from 'svelte'; function handleEvent(event) { console.log(event.detail.message); } onMount(() => { window.addEventListener('my-event', handleEvent); return () => { window.removeEventListener('my-event', handleEvent); }; }); </script> \"]},\"80\":{\"h\":\"2.生命周期钩子\",\"t\":[\"onMount: 在组件挂载到 DOM 中后执行，类似于 Vue 中的 mounted 钩子。\",\"beforeUpdate: 在组件的数据更新前执行，类似于 Vue 中的 beforeUpdate 钩子。\",\"afterUpdate: 在组件的数据更新后执行，类似于 Vue 中的 updated 钩子。\",\"onDestroy: 在组件销毁后执行，类似于 Vue 中的 destroyed 钩子。\",\"<!-- App --> <script> import Father from \\\"./Father.svelte\\\" let show = true; </script> <button on:click={() => show = !show}> show </button> {#if show} <Father /> {/if} <!-- Father.svelte --> <script> import { onMount, onDestroy, beforeUpdate, afterUpdate } from 'svelte'; import Child from \\\"./Children.svelte\\\" onMount(() => console.log('father onMoute')) onDestroy(() => console.log('father onDestroy')) beforeUpdate(() => console.log('father beforeUpdate')) afterUpdate(() => console.log('father afterUpdate')) </script> <h1>Hello!</h1> <Child /> <!-- Children.svelte --> <script> import { onMount, onDestroy, beforeUpdate, afterUpdate } from 'svelte'; onMount(() => console.log('child onMoute')) onDestroy(() => console.log('child onDestroy')) beforeUpdate(() => console.log('child beforeUpdate')) afterUpdate(() => console.log('child afterUpdate')) </script> <h1>World!</h1> \",\"执行顺序如下\",\"father beforeUpdate child beforeUpdate child onMoute child afterUpdate father onMoute father afterUpdate father onDestroy child onDestroy \"]},\"81\":{\"h\":\"五、指令\"},\"82\":{\"h\":\"1.内置指令\",\"t\":[\"bind:：用于双向绑定表单元素的值。例如，可以使用 bind:value 指令来双向绑定输入框的值，使得输入框中的值能够与组件中的变量同步。\",\"on:：用于监听 DOM 元素的事件。例如，可以使用 on:click 指令来监听按钮的点击事件，并在事件触发时执行相应的逻辑。\",\"class: 和 style:：用于设置 DOM 元素的 class 和 style 属性。例如，可以使用 class:active 指令来根据条件动态添加或删除 active class，从而改变元素的样式。\"]},\"83\":{\"h\":\"2.自定义指令\",\"t\":[\"<script> function selectOnFocus(node, options) { node.addEventListener('focus', () => { node.select(); }); } </script> <input type=\\\"text\\\" use:selectOnFocus /> \"]},\"84\":{\"h\":\"六、总结\",\"t\":[\"Svelte被设计成编译时框架，可以将代码打包成高效的JavaScript代码，从而提高应用程序的性能和响应速度。相比其他前端框架，Svelte的体积更小、性能更好，同时也具有很好的可维护性和可扩展性。这些特点使得Svelte在国外得到了广泛的关注和应用。\"]},\"85\":{\"c\":[\"前端\"]},\"86\":{\"c\":[\"JavaScript\",\"Svelte\"]},\"87\":{\"h\":\"HTML实用小技巧🚀🚀\",\"t\":[\"文章同步在公众号：萌萌哒草头将军，欢迎关注\"]},\"88\":{\"h\":\"💡Tip 1：告别 display: none\",\"t\":[\"当你需要隐藏一个元素时，首先想到的可能是display: none，或者visibility: hidden,\",\"现在有一个更简便的方式：直接在HTML元素使用hidden属性，它的值还可以是hidden=\\\"hidden\\\"或者hidden=\\\"invalid value\\\"\",\"<section hidden> <div>萌萌哒草头将军</div> </section> \"]},\"89\":{\"h\":\"💡Tip 2: 修改 ol 标签的排序\",\"t\":[\"通过 start 属性控制排序的起始位置\",\"<ol start=\\\"10\\\"> <li>First Item</li> <li>Second Item</li> <li>Third Item</li> <li>Fourth Item</li> <li>Fifth Item</li> </ol> \",\"使用 reversed 反转排序\",\"<ol reversed> <li>First Item</li> <li>Second Item</li> <li>Third Item</li> <li>Fourth Item</li> <li>Fifth Item</li> </ol> \",\"image.png\"]},\"90\":{\"h\":\"💡Tip 3: 使用 inputmode=\\\"numeric\\\" 代替 type=\\\"number\\\"\",\"t\":[\"当使用 type=\\\"number\\\" 输入的数字时，如果输入的内容是非法的，那么实际得到的值为空字符串\",\"但是如果使用 inputmode=\\\"numeric\\\" 当输入的值为非法的内容时，会自动触发警告\",\"<style> input:invalid { border-color: red; } </style> <input type=\\\"text\\\" inputmode=\\\"numeric\\\" pattern=\\\"[0-9]*\\\" /> \",\"image.png\",\"image.png\"]},\"91\":{\"h\":\"💡Tip 4: 使用 contenteditable=\\\"true\\\" 开启富文本编辑器\",\"t\":[\"在任意的HTML元素中使用contenteditable=\\\"true\\\"即可以开启富文本编辑器。\",\"<div contenteditable=\\\"true\\\">萌萌哒草头将军!</div> \",\"rich.gif\"]},\"92\":{\"h\":\"💡Tip 5: 使用 <datalist> 提高用户体验\",\"t\":[\"<datalist> 标签，它是 HTML5 中的一个表单元素，用于创建输入字段的预定义选项列表。它通常与input 标签的 list 属性一起使用，以提供给用户一组可供选择的选项\",\"<label> todo: <input type=\\\"text\\\" list=\\\"datalist\\\" /> <datalist id=\\\"datalist\\\"> <option value=\\\"test1\\\" /> <option value=\\\"test2\\\" /> <option value=\\\"test3\\\" /> </datalist> </label> <label> Scale: <input type=\\\"range\\\" min=\\\"1\\\" max=\\\"5\\\" step=\\\"1\\\" list=\\\"scales\\\" /> <datalist id=\\\"scales\\\"> <option value=\\\"1\\\"></option> <option value=\\\"2\\\"></option> <option value=\\\"3\\\"></option> <option value=\\\"4\\\"></option> <option value=\\\"5\\\"></option> </datalist> </label> <label> Primary Color: <input type=\\\"color\\\" list=\\\"colors\\\" /> <datalist id=\\\"colors\\\"> <option value=\\\"#4d32bf\\\"></option> <option value=\\\"#ac45fa\\\"></option> <option value=\\\"#f9427c\\\"></option> <option value=\\\"#fac642\\\"></option> <option value=\\\"#4fd6be\\\"></option> </datalist> </label> \",\"image.png\",\"image.png\"]},\"93\":{\"h\":\"💡Tip 6: 使用 loading=\\\"lazy\\\" 懒加载资源，提高加载速度\",\"t\":[\"<img loading=\\\"lazy\\\" /> <iframe src=\\\"http://www.baidu.com\\\" loading=\\\"lazy\\\" /> \"]},\"94\":{\"c\":[\"前端\"]},\"95\":{\"c\":[\"HTML\"]},\"96\":{\"h\":\"【数据结构】超级简单的图算法，图文并茂，学不会你来打我\",\"t\":[\"未经允许禁止转载, 微信公众号：「萌萌哒草头将军」 超级简单的图算法，图文并茂，学不会，你来打我\"]},\"97\":{\"h\":\"认识图\",\"t\":[\"图是由节点集合和边（路径）集合组成的图形\",\"如果图是有方向的，那就称为有序图，否则称为无序图\",\"image.png\",\"如果每条路径有成本或者权重，那么图就是有权图\",\"无权图可以认为是权重相同的有权图\"]},\"98\":{\"h\":\"最小生成树\",\"t\":[\"在描述图时，我们通常根据边的权重将图转为最小生成树，因为最小生成树可以包含所有节点信息和最少的边，可以使计算量缩减到最小\",\"例如上图的最小生成树如下\",\"image.png\",\"有两种方法将图转为最小生成树\"]},\"99\":{\"h\":\"kruskal（克鲁斯卡尔）算法\",\"t\":[\"思路：根据权重，将边排序，每次从边中选择权重最小的边，如果使图连通(形成环)了，那就放弃这条边\",\"上图中加入边的顺序以此为：（2->5, 1）、（5->6, 2）、（6->3, 3）、（4->1, 3）、（5->4, 5）\"]},\"100\":{\"h\":\"prim（普里姆）\",\"t\":[\"思路：从一个节点出发，在所有连接的可选值只保留代价最小的边，例如上图，从节点1开始经过该算法后最小生成树是这样的\",\"节点1：可选边为（1->2, 6）、（1->4, 3），只能选：（1->4, 3）\",\"节点1、4：可选边为（1->2, 6）、（4->5, 5）只能选：（4->5, 5）\",\"节点1、4、5：可选边为（5->2, 1）、（1->2, 6）、（5->6, 2）只能选（5->2, 1）\",\"节点1、4、5、2：可选边为（5->6, 2）、（1->2, 6）、（2->3, 4）只能选（5->6, 2）\",\"节点1、4、5、2、6：可选边为（1->2, 6）、（2->3, 4）、（6->3, 3）只能选（6->3, 3）\",\"好了现在可以按照树的形式表示图了\"]},\"101\":{\"h\":\"描述节点\",\"t\":[\"描述每个节点需要唯一标识，这样方便后续对每个节点的操作，所以我们先定义下面的类来描述节点\",\"class Vertex { constructor (uuid) { this.uuid = uuid // ...你可以在这里添加others props } } \"]},\"102\":{\"h\":\"定义边\",\"t\":[\"描述边成熟的做法是使用邻接表或者邻接数组\",\"邻接表是一个描述每个节点相关边的对象，它以每个节点的ID为key，与之相连的边数组集合作为value，例如上图中的每个节点的邻接表如下所示：\",\"image.png\",\"邻接数组是用二维数组的方式描述\",\"你可能习惯性的想在节点上标记每个节点相关边的信息，这样的是可以的， 但是对于后续的查询和变更，会消耗很大的性能，\",\"同样，你如果想单独定义一个边的类描述边信息，也是一样的损耗性能。\"]},\"103\":{\"h\":\"实现图\",\"t\":[\"现在就让我们开始实现基本的属性和功能吧\"]},\"104\":{\"h\":\"属性\",\"t\":[\"首先是定义Graph类，需要vertexs数组存放所有的节点，需要edges对象存放邻接表\",\"class Graph { constructor(vertexNumber) { this.vertexs = [] // 存放节点 this.edges = {} // 存放邻接表 this.marked = {} // 记录标记 } } \"]},\"105\":{\"h\":\"addNodes 方法\",\"t\":[\"增加节点，除了初始化节点之外，需要初始化新节点的邻接表和标记状态\",\"class Graph { // 增加节点 addNodes (uuid) { this.vertexs.push(new Vertex(uuid)) this.edges[uuid] = [] this.marked[uuid] = false } } \"]},\"106\":{\"h\":\"addEdges 方法\",\"t\":[\"增加边的本质就是增加邻接表信息\",\"class Graph { // 增加边 addEdges (source, target) { // 分别给对方的邻接表添加边 this.edges[source].push(target) this.edges[target].push(source) } } \"]},\"107\":{\"h\":\"showGraoh 方法\",\"t\":[\"展示图时，我们是通过展示邻接表来展示图的，所以邻接表就是图的精髓所在，后面的方法主要是操作邻接表\",\"class Graph { // 展示图 showGraoh () { this.vertexs.forEach(vertex => console.log( vertex.uuid, '->', this.edges[vertex.uuid].toString() )) } } \",\"添加测试数据\",\"const graph = new Graph() [1, 2, 3, 4, 5, 6].forEach((n) => graph.addNodes(n)) graph.addEdges(1, 2) graph.addEdges(1, 3) graph.addEdges(1, 4) graph.addEdges(3, 4) graph.addEdges(2, 5) graph.addEdges(5, 6) graph.showGraoh() // 1 '->' '2,3,4' // 2 '->' '1,5' // 3 '->' '1,4' // 4 '->' '1,3' // 5 '->' '2,6' // 6 '->' '5' \",\"此时的树为下图所示\",\"image.png\"]},\"108\":{\"h\":\"深度优先和广度优先\",\"t\":[\"遍历图中每个节点，根据不同的策略，节点的遍历顺序也不相同，最常见的是深度优先(dfs)、广度优先(bfs)\"]},\"109\":{\"h\":\"深度优先\",\"t\":[\"深度优先(dfs)是指每次优先遍历子节点，没有子节点时再回到兄弟节点，以此类推\",\"image.png\",\"这里为了避免标记混乱，使用了单独的变量visited标记深度优先，它和marked一样\",\"// 深度优先搜索 dfs (uuid) { this.visited[uuid] = true // 深度优先单独标记，以免影响广度优先算法和最短路径算法 console.log('dfs', uuid) // 循环邻接表中子节点 this.edges[uuid].forEach(edge => { // 如果没有标记，就继续下钻 if (!this.visited[edge]) this.dfs(edge) // 递归 }) } \"]},\"110\":{\"h\":\"广度优先\",\"t\":[\"广度优先(bfs)是指每次兄弟节点优先遍历，没有兄弟节点时，在遍历子节点的兄弟节点，以此类推\",\"image.png\",\"它是通过队列实现的：\",\"先初始化一个空队列\",\"将起始节点放入队列\",\"弹出队列第一个节点，并且访问它子节点\",\"如果没有被标记，那就标记它，并放入队列\",\"开始循环第三步，直到队列为空\",\" // 广度优先搜索 bfs (uuid) { // 1.先初始化一个空队列 const queue = [] this.marked[uuid] = true // 2.将起始节点放入队列 queue.push(uuid) console.log('bfs', uuid) while (queue.length) { // 3.弹出队列第一个节点，并且访问它子节点 const uuid_ = queue.shift() this.edges[uuid_].forEach(edge => { // 4.如果没有被标记，那就标记它，并放入队列 if (!this.marked[edge]) { this.marked[edge] = true console.log('bfs', edge) queue.push(edge) } }) } } \"]},\"111\":{\"h\":\"测试\",\"t\":[\"graph.dfs(1) console.log(`<=========>`) graph.bfs(1) // dfs 1 // dfs 2 // dfs 5 // dfs 6 // dfs 3 // dfs 4 // <=========> // bfs 1 // bfs 2 // bfs 3 // bfs 4 // bfs 5 // bfs 6 \"]},\"112\":{\"h\":\"最短路径\",\"t\":[\"图经常被用到的地方其实查询从某个节点到另一个节点的最短距离，比如，从你的住处到公司，在四通八达的北京，道路可能不止一条，但是总有一条是最短的\",\"求最短路径的算法有多种，今天介绍bfs最短距离，顾名思义，就是借助广度优先算法实现的\",\"在广度优先算法中，我们遍历节点的每个子节点时，总会遇到一个没有被标记的节点，此时，我们需要记录这个没有被标记的节点的父节点，并将这些信息记录在edgeTo属性中。\",\"完成广度优先算法后，我们就可以知道每个子节点对应的父节点了，接着我们只需要从目标节点，往上逆推，找到它的父节点，然后在往上推，知道源节点或者根节点，下面是以跟节点为例的实现\",\"// 记得添加这个属性 this.edgeTo = {} // 对广度优先搜索改造 bfs (uuid) { const queue = [] this.marked[uuid] = true queue.push(uuid) console.log('bfs', uuid) while (queue.length) { const uuid_ = queue.shift() this.edges[uuid_].forEach(edge => { if (!this.marked[edge]) { this.edgeTo[edge] = uuid_ // 记录每个节点的父节点 this.marked[edge] = true console.log('bfs', edge) queue.push(edge) } }) } console.log(this.edgeTo) // 打印每个节点对应父节点的信息 } // 找出目标节点到根节点的路径 pathTo (uuid) { const source = this.vertexs[0].uuid const path = [] if (this.marked[uuid]) { for(let i = uuid; i !== source; i = this.edgeTo[i]) { path.push(i) } } path.push(source) return path } // 格式化展示 printMinPathTo (uuid) { const path = this.pathTo(uuid).join('->') console.log(path) } \"]},\"113\":{\"h\":\"测试\",\"t\":[\"graph.printMinPathTo(6) // 依次打印 // { // 2: 1, // 3: 1, // 4: 1, // 5: 2, // 6: 5 // } // 6->5->2->1 \",\"好了，分享就到这了，欢迎指正出现的问题\"]},\"114\":{\"c\":[\"前端\"]},\"115\":{\"c\":[\"JavaScript\",\"数据结构和算法\"]},\"116\":{\"h\":\"🎉前端开发书籍推荐🎉\",\"t\":[\"文章首发公众号：萌萌哒草头将军\",\"公众号回复：活动，有惊喜🎉，最近会送五本书\",\"🎉SolidJS响应式原理和简易实现🎉\",\"做为多年学习JavaScript的开发者，一路走来，几多坎坷，回头再看来时的路，特别感谢下面几本书带我入行前端。\"]},\"117\":{\"h\":\"💎《JavaScript高级程序设计》\",\"t\":[\"推荐指数：⭐⭐⭐⭐⭐\",\"推荐理由：内容扎实，且不深奥。\",\"这本书在我大学的时候就已经买了，当时经济实力有限，买的是影印版，不过也被我研读了多遍，并且做了详细的记录。这本书见证了我的前端之路，一直被我珍藏至今。\",\"现在已经出了第四版了。前端入门进阶宝典，所以也被广大开发者称为《红宝书》。\"]},\"118\":{\"h\":\"💎《Javascript权威指南》\",\"t\":[\"推荐指数：⭐⭐⭐⭐⭐\",\"推荐理由：内容全面，讲解详细，配合红宝书效果更佳。\",\"该书被称为《犀牛书》，书如其名，真的是权威指南，即使你买了红宝书，我也推荐你买一本，因为这两本对相同的知识讲解，侧重点不同。\",\"比如对于闭包，红宝书很详细，从作用域，到作用域链，再到活动对象，讲解由浅到深，十分详细，而《犀牛书》中仅仅是给出闭包的概念，然后举例说明差异。\",\"但是《犀牛书》对于类型转换toString、valueof讲解则十分详细，《红宝书》则浅浅的带过。\",\"《犀牛书》更像是一本字典，有不懂的问题，可以及时查漏补缺。\"]},\"119\":{\"h\":\"💎《图解HTTP》\",\"t\":[\"推荐指数：⭐⭐⭐⭐\",\"推荐理由：图文并茂，简洁明了\",\"这本书作为第三本推荐，绝不是空穴来风，大量的图来解释枯燥的概念，形象生动，老少皆宜。\",\"前端开发一大部分的时间都是在和后端的接口打交道，而Http无疑是沟通的桥梁。\",\"读完这本书，你将会了解到网络分层模型、Http协议和TCP/IP的关系、后端的数据怎么从服务端到达浏览器的、常用Http状态码的含义、请求头的各种含义、你输入url浏览器发生了什么等热门面试题的答案。\",\"我买的是三件套《图解Http》《图解TCP/IP》《图解网络硬件》，《图解网络硬件》一点也不推荐，不懂的硬件直接百度吧，还是彩色图片。如果你是做运维相关的前端开发，《图解TCP/IP》同样值得一看。\"]},\"120\":{\"h\":\"💎《数据结构与算法JavaScript描述》\",\"t\":[\"推荐指数：⭐⭐⭐⭐\",\"推荐理由：进阶利器，闭眼入就对了。\",\"大多数同学选择前端，主要还是因为数据结构和算法方面比较薄弱，但是这本书却使用了简洁的方法实现了各种数据结构和算法。\",\"对于难懂的数据结构，有详细的结构图解释，是我读过最容易理解的版本了，不过这本书目前还是ES5语法版本实现，我在前面的文章中使用ES6语法实现过，并做了部分笔记。\",\"👉【数据结构】我的学习笔记\"]},\"121\":{\"h\":\"💎《JavaScript设计模式》\",\"t\":[\"推荐指数：⭐⭐⭐\",\"推荐理由：常见的设计模式都有，讲解的比较简单易懂，但是实现比较简陋。\",\"这本书是你入门中级后继续提升的有利法宝，不管什么框架，底层都逃不出两三个设计模式的，所以十分推荐你进阶的时候去读它。\",\"目前有两本名为《JavaScript设计模式》的书，我买的是徐涛翻译版本影印版（和红宝书一起买的），但是最近查阅发现流行的是张容铭著作的版本，这里请自行斟酌买哪个版本。\",\"我买的这个版本将设计模式分为创建型、行为型和结构型三种，前面部分分别讲解了十三种设计模式，后半部分讲解了老牌框架JQuery设计的各种设计模式，虽然从现在的情况看JQuery已经凉了，但是它的设计智慧，真的令人敬佩。\",\"这本书的缺点也是语法版本较旧，不过我也写了最新语法的部分笔记。\",\"👉超级简单的设计模式，看不懂你来打我\",\"今天的内容就这些了，如果你有更好的书籍，可以告诉我！\",\"现在，关注我的公众号会有送书福利，具体请在公众号回复：活动，即可查看详情\"]},\"122\":{\"c\":[\"前端\"]},\"123\":{\"c\":[\"JavaScript\"]},\"124\":{\"h\":\"怎么匹配加分项：至少熟悉或了解一门后端语言\"},\"125\":{\"h\":\"一、说明\",\"t\":[\"声明：本文为原创文章，未经许可禁止转载\",\"虽然有点标题党，但本文旨在帮助读者增加薪酬谈判的底气和筹码。\",\"众所周知，现在前端的招聘加分项要求里多半会有一条：至少熟悉或了解一门后端语言（java/python/golang）。本文主要以Java为例。\",\"另外注意，简历上只需写自己最熟悉的一门后端语言就行，同时也从下面选择一个自己容易理解的语言。\"]},\"126\":{\"h\":\"二、怎么问你\",\"t\":[\"作为前端，虽然经常和后端打交道，但是很难有机会系统学习某个后端语言，所幸，前端面试的时候一般会将JavaScript和Java两门语言的比较作为面试题目。比如：说说JavaScript和Java的异同点、JavaScript和Java相比有啥优点或缺点。\",\"所以我们在面试前多做这类问题的准备。\",\"下面就是你需要提前准备并且熟悉的知识点，\",\"我将知识点分为了青铜、黄金、铂金，分别代表基础语法、语言特性、语言设计，面试的时候分别说出一两个点（十分推荐带星号标记的），这样粗中有细，有深有浅，面试官就会觉得你是真的了解而不是滥竽充数。如果被问道这个问题，你再假装思索一下（睁大眼睛，眼球向右上微微瞅一两秒）然后娓娓道来，效果更佳哦。\"]},\"127\":{\"h\":\"三、这么回答\"},\"128\":{\"h\":\"青铜\"},\"129\":{\"h\":\"1.语言类型\",\"t\":[\"JavaScript是弱类型语言，边解释边执行，一个非const声明的变量可以保存多种类型的值。\",\"// js let num = 2022 let str = num.toString() console.log(str) \",\"而Java是强类型语言，先编译后执行，在编译前所有变量类型都是确定的，Java中如果一个变量接受另外类型的值，需要强制类型转换。另外，Java中使用final关键字定义不可变的常量\",\"// java // 声明前需要指定变量类型 Integer num = 2022; String str = num.toString(); System.out.Println(str); \"]},\"130\":{\"h\":\"2.包装类*\",\"t\":[\"JavaScript基本类型和包装类是一样的，基本类型可以调用类方法。\",\"// js let a = 2022 a.toString() \",\"而Java基本类型无法调类方法，必须自动装箱成为包装类才能调用类型方法。\",\"// java int num = 2022 num.toString() // error \",\"下面演示下Java的自动装箱和拆箱\",\"// 没有自动装箱，声明一个包装类是这样的 Integer num1 = new Integer(2022); // 有自动装箱，声明一个包装类是这样的 Integer num2 = 2022; // 反过来就是自动拆箱 int num3 = num1; // num1、num2是可以调用Integer类型方法的，比如toString，因为它们是包装类。 // num3是没法调用任何方法的，因为是基本类型。 \",\"image.png\"]},\"131\":{\"h\":\"3.number类型的差异*\",\"t\":[\"JavaScript中数字类型只有number类型一种，而Java中数据类型字节数从小到大分为byte、short、int、long、double类型。所以JavaScript数字的转换是自动的，而Java中，小字节转换为大字节是自动转换，但是大字节转换为小字节，需要强制转换。\",\"// java byte a = 1; // 由小到大 short b = a; int c = 100; // 由大到小需要手动指定 byte d = (byte)c; \"]},\"132\":{\"h\":\"4. == 的区别*\",\"t\":[\"JavaScript的==会进行隐式类型转换，然后按值比较。如果都是引用类型，只比较引用地址，如果是不同的类型，则会都会转换为同类型比较；\",\"// js 0 == false // true '1' == 1 // true 'hello' == 'he' + new String('llo') // true \",\"而Java中==是严格按地址比较，地址相同时才相等，Java中的equals是严格按值比较的；同时Java中没有===；\",\"// java 0 == false // false '1' === 1 // false \\\"hello\\\" == \\\"he\\\" + new String(\\\"llo\\\") // false \"]},\"133\":{\"h\":\"5.数组的异同\",\"t\":[\"JavaScript的数组是任意长度的，并且可以存放各种类型。\",\"// js const arr = [] arr.push(...[1, '2', false, {}]) \",\"Java中的数组是固定长度的固定类型的，如果要像JavaScript使用数组，需要使用Java集合框架里的ArrayList或者LinkedList。\",\"// java int[] arr = new int[5]; arr[0] = 1; arr[1] = 2; List<Object> list = new ArrayList<Object>(); list.add(1); list.add(\\\"2\\\"); \"]},\"134\":{\"h\":\"黄金\"},\"135\":{\"h\":\"6.面向对象*\",\"t\":[\"JavaScript虽然可以面向对象编程，但是它不符合面向对象编程的编程方式，class语法仅仅是prototype的语法糖，而Java是标准的面向对象的编程语言，天生具有面向对象特性：封装、继承、多态（多态的表现：重载、重写），JavaScript中没有封装和多态，所以没有重载，JavaScript的“重写”仅仅是prototype“短路”假象（因为子类有这个方法就不会沿着prototype属性向上查询）\",\"// java class Animal { String name; int age; } class Cat extends Animal { int fish; public Cat (String name, int age, int fish) { this.name = name; this.age = age; this.fish = fish; } public void call () { System.out.println(\\\"I am \\\"+ this.name +\\\", I have \\\" + this.fish + \\\"小鱼干\\\"); } } class Dog extends Animal { int bone; public void Cat (String name, int age, int bone) { this.name = name; this.age = age; this.bone = bone; } public void call () { System.out.println(\\\"I am \\\"+ this.name +\\\", I have \\\" + this.bone + \\\"小鱼干\\\"); } } public static void main (String []args) { Cat cat = new Cat(\\\"cat\\\", 1, 2); cat.call(); Dog dog = new Dog(\\\"dog\\\", 2, 3); dog.call(); } \"]},\"136\":{\"h\":\"7. 私有属性和公有属性\",\"t\":[\"JavaScript使用对象的defineProperty或者proxy方法可以限制对象属性私有还是公有。\",\"// js Object.defineProperty(window, 'pi', { writable:false, value: 3.14 }) \",\"Java中使用修饰符private或者public控制。\",\"// java // 公有 public float pi = 3.14 // 私有 符private float pi = 3.14 \"]},\"137\":{\"h\":\"铂金\"},\"138\":{\"h\":\"8. 垃圾回收（GC）*\",\"t\":[\"不管什么语言，垃圾回收的整体策略都是一样的：先判断这块内存是否可回收，然后对可回收的内存使用回收器进行回收。\",\"引用计数\",\"怎么确定内存是否可回收的，业界的第一种做法是引用计数：如果一个对象被引用，就给这个对象的引用计数+1，如果不再使用这个对象，那就给这个对象的引用计数-1，每次触发GC流程时清除引用计数为零的对象。\",\"标记-清除\",\"引用计数基本是任何编程语言GC标配了，但是引用计数容易因为互相引用导致内存泄露，所以又出现了标记-清除：所有变量在进入内存前没有标记，如果对象被使用就将其标记，每次触发为GC流程时，清除没有被标记变量的内存。从上述可以发现，该策略分为两步：首先标记，然后清除。\",\"标记-清除也存在很大的缺陷：\",\"每次运行GC时是扫描所有的变量，而有些变量是常驻变量。\",\"清理掉的内存会成为内存碎片，导致内存成为不连续的片段。\",\"所以很多编程语言在具体设计GC时，基于上述策略做了很多类似的优化。比如使用分代回收，避免每次扫描常驻对象，从而提升GC效率；将清理后的内存空间重写分配整理，避免形成内存碎片而浪费内存空间。\",\"另外，所有的清除阶段，代码都是STW（Stop The World）状态。所以怎么缩短STW的时间也是各语言努力优化的目标。\",\"image.png\"]},\"139\":{\"h\":\"v8引擎\",\"t\":[\"不管是JavaScript还是Nodejs，都是运行在V8引擎（Chrome内核浏览器）上的，v8引擎为JavaScript的GC做了分代回收、并行回收的优化，同时升级了标记-清除方案。\",\"分代回收\",\" 首先将内存分为新生代区域和老生代区域，新生代里存放存活周期短的对象，老生代里存放存活周期长的常驻对象，这么做的好处就是，不用对一些常驻的对象频繁的做回收扫描，其次，又将新生代区域一分为二，一半作为使用区，一半作为空闲区。\",\"新声明的变量会存入使用区，当使用区的剩余容量不足一存放新对象时，就会出发GC，大致的过程是将还在使用中（可达性分析确定的）对象复制到在空闲区然后清理，不使用的对象直接清理掉，然后将现在的空闲区标记为使用区，清理之后的使用区标记为空闲区。\",\"并行回收\",\"对于上述的新生代采用并行回收的方式。并行回收就是使用多个线程和主线程执行GC流程，并行回收的好处是可以缩短GC时间（不是成倍缩短，因为线程的通信也会消耗时间）。\",\"image.png\",\"标记清除和三色标记法\",\"对于上述中的老生代采用标记清除的方法，它仍然是STW的，所以为了缩短STW时间，又将标记阶段切分为多个小段，每执行一小段就继续执行JavaScript代码，然后又执行小段的GC，反反复复......，v8将此称为增量标记。 起初的标记清理，只是非黑即白的标记方式，如果在增量标记的场景下，当一小段增量标记完，下一小段增量标记开始时无法得知标记状态，所以V8采用了三色标记清除：未被标记时为白色、自身被标记但是成员未被标记时为灰色、自身和成员都被标记时是黑色。这样每段的增量标记都可以接着上段的标记继续工作了。\",\"image.png\"]},\"140\":{\"h\":\"Java\",\"t\":[\"Java使用引用计数和可达性分析作为GC策略，使用标记清除、标记整理、复制等GC方式\",\"可达性分析\",\"可达性分析是从GC Roots作为起始对象，依次寻找依赖的子对象，直至找不到依赖对象，如果此时对象没有和GC Root相连通，就会被判别为可回收对象（严格来说是准可回收，之后还有严格的验证措施）。\",\"image.png\",\"标记整理\",\"将使用中的对象移到内存的另一端，将未使用的对象标记为可清除。\",\"image.png\",\"复制\",\"将内存一分为二，一半作为使用区，一半作为空闲区，当使用区内存不足时，触发GC，将使用中的对象复制到空闲区，使用区的内存清空作为空闲区，前面的空闲区作为使用区，是不是很熟悉啊，没错V8新生代确实是借鉴了这里。\",\"image.png\",\"分代清理\",\"Java的分代清理和JavaScript一样也是将内存分为新生代和老生代（永生代已经被移除了），不同的是，Java的新生代又被分为了三块，依次是：较大的Eden、较小的fron（s0）和to（s1）区，默认比例8 : 1 : 1 。对象优先在Eden区和from区，当Eden区没有足够空间进行分配时，虚拟机将发起一次Minor GC（新生代特有的GC算法），此时Eden区存活下来的变量将会被分配到to区，from区存活下来的变量年龄阈值，就会进入老年代，否则进入to区。此时清空Eden区和from区，然后将to区和from区调换身份。等待下一轮Minor GC。\",\" 新生代使用的是Minor GC，老年代使用的是Full GC。\"]},\"141\":{\"h\":\"10.异步编程\"},\"142\":{\"h\":\"JavaScript\",\"t\":[\"JavaScript当时仅仅用来和服务端交互，所以被设计成单线程语言（语言本身，浏览器是多进程多线程的），异步编程时只能采用回调函数或者Promise等方式，也没有并发。\"]},\"143\":{\"h\":\"Java\",\"t\":[\"Java是多进程多线程语言，多线程就已经可以满足日常的并发需求了。不过多线程都会涉及线程状态和消息同步的问题。\",\"Java的线程状态\",\"一个线程被创建后成为初始（新建）状态，当调用start()之后进入就绪状态，表示可以被系统调用分配系统资源，当线程拿到系统分配的资源会调用run()方法，进入运行中状态，当线程失去系统分配的资源，比如执行了sleep(睡眠)、suspend(挂起)就进入了阻塞状态。一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到终止状态。\",\"image.png\",\"消息同步\",\"线程同步消息的方式是：基于Java内存模型(JMM)的内存共享和使用wait()和notify()的消息传递。内存共享时，多个线程对同一个全局变量进行写操作时，是可能造成冲突的（线程安全问题），解决的方案就是增加安全机制：当一个线程对一个变量进行写操作时，其余想要对这个变量进行写操作的线程必须等待该线程写操作结束，Java中实现这个功能，有两种方法：synchronized(Volatile是轻量级的同步，只能修饰变量)、ThreadLock。\",\"synchronized既可以修饰方法成为同步方法也可以包裹需要同步的代码块成为同步代码块。\",\"//java // 同步代码块 public void setCount () { synchronized (lock) { this.cout ++; } } // 同步方法 public synchronized void setCount () { synchronized (lock) { this.cout ++; } } \",\"如果同步代码里又包了别的同步代码，就会形成死锁.\",\"以Java为例创建线程，需要实现Runable接口，或者继承Thread类（本质也是实现了Runable接口）。\",\"// java class ThreadTest extends Thread { // 保存当前线程 private Thread t; // 线程名 private String threadName; // 锁 private Object lock; // 操作对象 int count = 0; ThreadTest ( String name) { threadName = name; System.out.println(\\\"创建了线程：\\\" + threadName ); } public void run() { System.out.println(\\\"线程\\\" + threadName + \\\"运行中\\\"); try { while(true) { System.out.println(\\\"线程: \\\" + threadName); // 做点啥吧 setCount() } }catch (InterruptedException e) { System.out.println(\\\"线程 \\\" + threadName + \\\" interrupted.\\\"); } System.out.println(\\\"线程 \\\" + threadName + \\\" 结束了\\\"); } public void start () { System.out.println(\\\"开始线程：\\\" + threadName ); if (t == null) { t = new Thread (this, threadName); t.start(); } } // 同步代码块 public void setCount () { synchronized (lock) { this.cout ++; } } // 同步方法 public synchronized void setCount () { synchronized (lock) { this.cout ++; } } } \",\"但是使用多进程的最大的缺点是进程之间消息通信、Cpu上下文切换消耗很大，所以使用过多的线程并发编程，效率反而降低了。\"]},\"144\":{\"h\":\"四、结束\",\"t\":[\"本文到此就结束了，感兴趣的话可以关注我的微信公众号：萌萌哒草头将军\",\"祝大家都能拿到满意的offer\"]},\"145\":{\"c\":[\"后端\",\"简历\"]},\"146\":{\"c\":[\"简历\"]},\"147\":{\"h\":\"如果用命令模式打开西游记会发生什么\",\"t\":[\"在打开西游记之前，我先介绍下命令模式\"]},\"148\":{\"h\":\"命令模式 介绍\"},\"149\":{\"h\":\"思想\",\"t\":[\"命令模式的功能是将一个请求或者操作包装在一个对象中，并将参数传递给调用对象，从而使方法和调用者的职责分离。\"]},\"150\":{\"h\":\"优点\",\"t\":[\"这么做的好处一方面使系统变得松藕，另一方面可以根据不通过的请求对客户进行参数化调用，从而使整个系统具有更高的灵活性。\"]},\"151\":{\"h\":\"缺点\",\"t\":[\"因为事务的复杂度可能会出现很多的类\"]},\"152\":{\"h\":\"需要使用命令模式的场景\",\"t\":[\"命令模式的使用场景有\",\"需要根据参数确定执行哪个方法时\",\"需要随时追踪、撤销或者重做某些操作时（即事务场景）\"]},\"153\":{\"h\":\"模型\",\"t\":[\" 命令模式需要的角色分别是：Client（客户端）、Invoker（调用者）、Commond（命令接口）、concreteCommand（具体的命令）、Receiver（接受者）\",\"Client（客户端）：具体的使用者，一般通过调用者执行客户端想要做的事情\",\"Invoker（调用者）：接收命令，并且执行这些命令\",\"Commond（命令接口）：规定具体的命令需要实现的接口\",\"concreteCommand（具体的命令）：具体的命令，需要实现命令接口\",\"Receiver（接受者）：正在执行命令的类\"]},\"154\":{\"h\":\"实现\",\"t\":[\"源码点这里\",\"class Receiver { constructor (name, specialSkill) { this.name = name this.specialSkill = specialSkill } useSpecialSkill () { console.log( this.name, '双手合十，口念：“阿弥陀佛”，随后使出了他的看家本领', this.specialSkill ) } } class Invoker { constructor () { this.commmandList = [] } addCommand (command) { console.log('如来说：亲，你点的', command.receiver.name, '给你安排了') this.commmandList.push(command) } excuteCommand () { console.log('如来捏了个兰花指，然后打了个响指空空、戒戒、沙沙分别走了上来') this.commmandList.map(command => command.excute()) } } class Command { constructor (receiver) { console.log('\\\"给我来一个', receiver.name, '\\\"') this.receiver = receiver } excute () { this.receiver.useSpecialSkill() } } // client 客户端 console.log('夕阳西下，唐唐拖着长长的背影，走进了灵山白金翰佛堂。') console.log('几个苦行僧打扮的服务员迎了上来，双手合十，鞠躬道：“阿弥陀佛，施主想来些啥？”') console.log('唐唐嚣张的骂道：“啥档次，跟我一样说阿弥陀佛，把你们老板叫出来！”') console.log('如来听到唐唐的声音，边穿衣服边对身边的白骨精说道：“你稍等片刻，我去去就来”。随后夺门而出。') console.log('如来迎了上啦，拉住唐唐的手道：') console.log('老弟好久没来了啊，有失远迎，还请见谅啊！！！') console.log('“我佛慈悲，出家人怎会计较这些，弟子马上要出发了，来这里买几个徒弟，路上消遣，岂不美哉”') console.log('如来从身后拿出了ipad，递给唐唐，“你选吧”') console.log('唐唐接过平板，看着每页的图片，边点边念叨到：') const kongkong = new Receiver('空空', '连续72个后空翻') const jiejie = new Receiver('戒戒', '36种不同姿势钢管舞') const shasha = new Receiver('沙沙', '萨克斯') // 给我来一个空空，我看看他的看家本领怎么样 const command1 = new Command(kongkong) // 再给我来一个戒戒，我想看看他的看家本领怎么样 const command2 = new Command(jiejie) // 最后再给我来一个沙沙，我想看看他的看家本领怎么样 const command3 = new Command(shasha) // 如来 const invoker = new Invoker() // 如来说：亲，你要一个空空、沙沙、戒戒，分别看看他的看家本领，好的，给你安排了 invoker.addCommand(command1) invoker.addCommand(command2) invoker.addCommand(command3) console.log('唐唐：”好的，这些我先看看他们的本领怎么样“') // 如来翘起了兰花指，然后打了个响指，空空、戒戒、沙沙分别走了上来 invoker.excuteCommand() console.log('唐唐满意的点了点头：”好的，爷不差钱，这些个挺不错的，俺都要了!!!“') console.log('如来说：“如果觉得好用，回头记得一键三连哦～”') \"]},\"155\":{\"h\":\"如果用命令模式打开西游记会发生什么，你会欣赏到下面的小短文\",\"t\":[\"夕阳西下，唐唐拖着长长的背影，走进了灵山白金翰佛堂。\",\"几个苦行僧打扮的服务员迎了上来，双手合十，鞠躬道：“阿弥陀佛，施主想来些啥？”\",\"唐唐嚣张的骂道：“啥档次，跟我一样说阿弥陀佛，把你们老板叫出来！”\",\"如来听到唐唐的声音，边穿衣服边对身边的白骨精说道：“你稍等片刻，我去去就来”。随后夺门而出。\",\"如来迎了上来，拉住唐唐的手道：\",\"\\\"老弟好久没来了啊，有失远迎，还请见谅啊！！！\\\"\",\"“我佛慈悲，出家人怎会计较这些，弟子马上要出发了，来这里买几个徒弟，路上消遣，岂不美哉”\",\"如来从身后拿出了ipad，递给唐唐，“你选吧”\",\"唐唐接过平板，翻着精美的图片，边点边念叨到：\",\"\\\"给我来一个 空空 \\\"\",\"\\\"给我来一个 戒戒 \\\"\",\"\\\"给我来一个 沙沙 \\\"\",\"如来说：亲，你点的 空空 给你安排了\",\"如来说：亲，你点的 戒戒 给你安排了\",\"如来说：亲，你点的 沙沙 给你安排了\",\"唐唐：”好的，这些我先看看他们的本领怎么样“\",\"如来捏了个兰花指，然后打了个响指空空、戒戒、沙沙分别走了上来\",\"空空 双手合十，口念：“阿弥陀佛”，随后使出了他的看家本领 连续72个后空翻\",\"戒戒 双手合十，口念：“阿弥陀佛”，随后使出了他的看家本领 36种不同姿势钢管舞\",\"沙沙 双手合十，口念：“阿弥陀佛”，随后使出了他的看家本领 萨克斯\",\"唐唐满意的点了点头：”好的，爷不差钱，这些个挺不错的，俺都要了!!!“\",\"如来说：“如果觉得好用，回头记得一键三连哦～”\"]},\"156\":{\"c\":[\"前端\"]},\"157\":{\"c\":[\"JavaScript\",\"设计模式\"]},\"158\":{\"h\":\"超级简单的设计模式，看不懂你来打我\",\"t\":[\"未经允许禁止转载\",\"今天介绍几个经常被提到的设计模式，通俗易懂，包教包会源码点击这里\"]},\"159\":{\"h\":\"单例模式\",\"t\":[\"单例模式的精髓就是不管一个构造函数被实例化多少次，全局只有一个实例\",\"const Singleton = (function () { let instance; function init () { return new Object(); } return function () { if (!instance) { instance = init(); } return instance; } })() let mySingleton1 = new Singltron(); let mySingleton2 = new Singltron(); console.log(mySing1 === mySing2) // true \",\"单例模式的本质就是共享同一个作用域链，很明显这是JavaScript的闭包机制实现的\"]},\"160\":{\"h\":\"观察者模式\",\"t\":[\"观察者模式主要是通过一个目标（Suject）维护一系列的观察者（Observer），当目标发生变化时，通过广播事件，将目标具体的变化通知所有的观察者\",\"观察者模式主要由四个角色组成：目标（Suject）、 观察者（Observer）、具体目标、具体观察者\",\"下面的例子中，当data对象的name或者age属性发生变化时，都会对应的观察者会接受到变化\",\"class Observer { constructor (code) { this.code = code; } update () { console.log('我是：', this.code, '我知道我该更新了') } } class Suject { constructor () { this.observerList = []; } addObserver (observer) { this.observerList.push(observer) } notify () { this.observerList.map((observer) => observer.update()) } } // 具体的观察者 const concreteObservver1 = new Observer('concreteObservver1'); const concreteObservver2 = new Observer('concreteObservver2'); const concreteObservver3 = new Observer('concreteObservver3'); const concreteObservver4 = new Observer('concreteObservver4'); // 具体的目标 const concreteSuject1 = new Suject(); const concreteSuject2 = new Suject(); // 具体的对应关系 concreteSuject1.addObserver(concreteObservver1); concreteSuject1.addObserver(concreteObservver2); // 具体的对应关系 concreteSuject2.addObserver(concreteObservver3); concreteSuject2.addObserver(concreteObservver4); const data = {name: '萌萌哒草头将军', age: 18} // 当data的name属性变化，对应的观察者concreteObservver1、 // concreteObservver2就会被广播事件通知，从而更新 Object.defineProperty(data, 'name', { get: () => this.name, set: (newValue) => { concreteSuject1.notify(); this.name = newValue; } }) // 当data的age属性变化，对应的观察者concreteObservver3、 // concreteObservver4就会被广播事件通知，从而更新 Object.defineProperty(data, 'age', { get: () => this.age, set: (newValue) => { concreteSuject2.notify(); this.age = newValue; } }) data.name = 'mmdctjj' // 我是： concreteObservver1 我知道我该更新了 // 我是： concreteObservver2 我知道我该更新了 data.age = 18 // 我是： concreteObservver3 我知道我该更新了 // 我是： concreteObservver4 我知道我该更新了 \",\"如果Observer的update方法里是跟新对应的dom，那恭喜你，这和vue的基思路理是一样的了\"]},\"161\":{\"h\":\"发布/订阅模式\",\"t\":[\"虽然观察者模式可以轻松实现发布订阅模式的功能，但是观察者模式使得concreteSuject和concreteObservver耦合在了一起，对于复杂的系统，解耦才能算得上是优秀的系统。\",\"发布/订阅者模式（Public/Subscribe），可以很好的解决观察者模式耦合问题，那么它是怎么解耦的呢？\",\"发布/订阅模式提供了主题/事件通道(Topic/event Channer)，，订阅者通过Subscribe功能和topic绑定，当发布者发生变化时，将所有的变更通过event广播给所有订阅该topic的订阅者们。这样就将发布者和订阅者完全隔离开了\",\"还是上面的例子，我们用发布/订阅模式实现\",\"class PubSub { constructor() { this.topics = {} this.uuid = 0 // 每个订阅者的唯一标识，可以随时取消订阅 } // 发布器 publish(topic, value) { if (this.topics[topic]) { this.topics[topic].map(({ event }) => event(value)) } } // 订阅器 subscribe(topic, event) { const uuid = this.uuid++ this.topics[topic] = this.topics[topic] ? [...this.topics[topic], { event, uuid }] : [{ event, uuid }] return uuid } } const MyPubSub = (function () { let instance; function init() { return new PubSub(); } return function () { if (!instance) { instance = init(); } return instance; } })() const myPubSub = new MyPubSub() const data = { name: '萌萌哒草头将军', age: 18 } myPubSub.subscribe('data.name', (value) => console.log( '我知道', 'name发生变化了:', value )) myPubSub.subscribe('data.name', (value) => console.log( '我也知道', 'name发生变化了:', value )) myPubSub.subscribe('data.age', (value) => console.log('我知道', 'age发生变化了:', value)) Object.defineProperty(data, 'name', { get: () => this.name, set: (newValue) => { myPubSub.publish('data.name', newValue) this.name = newValue; } }) Object.defineProperty(data, 'age', { get: () => this.age, set: (newValue) => { myPubSub.publish('data.age', newValue) this.age = newValue; } }) data.name = 'mmdctjj' // 我知道 name发生变化了: mmdctjj // 我也知道 name发生变化了: mmdctjj data.age = 18 // 我知道 age发生变化了: 18 \",\"jauery的实现了标准的发布订阅模式\",\"$.trigger('login', {userName: 'MMDCTJJ', password: '*******'}) $.on('login', (userInfo) => console.log(userInfo)) \",\"vue中，可以使用$emit方法和$on\",\"<button @click=\\\"$emit('increaseBy', 1)\\\"> Increase by 1 </button> <MyButton @increase-by=\\\"(n) => count += n\\\" /> \"]},\"162\":{\"h\":\"中介者模式\",\"t\":[\"中介者模式也和观察者类似，中介者模式由中介者和订阅者组成 所有的订阅者们不能互相沟通，必须通过中介者同步信息。\",\"const mediator = (function () { let topics = [], uuid = 0; function subscribe (topic, callback) { uuid ++ topics[topic] = topics[topic] ? [...topics[topic], { callback, uuid }] : [{ callback, uuid }] } function publish (topic, value) { if (topics[topic]) { topics[topic].map(item => item.callback(value)) } } return { install: function (obj) { obj.uuid = uuid obj.publish = publish obj.subscribe = subscribe return obj } } })() const subscribe1 = mediator.install({}) const subscribe2 = mediator.install({}) const subscribe3 = mediator.install({}) subscribe1.subscribe('data.name', (value) => console.log('我是subscribe1', value)) subscribe2.subscribe('data.name', (value) => console.log('我是subscribe3', value)) const data = { name: '萌萌哒草头将军', age: 18 } Object.defineProperty(data, 'name', { get: () => this.name, set: (newValue) => { subscribe3.publish('data.name', newValue) this.name = newValue; } }) data.name = 'mmdctjj' // 我是subscribe1 mmdctjj // 我是subscribe3 mmdctjj \"]},\"163\":{\"h\":\"策略模式\",\"t\":[\"策略模式可以在不同的时机，采用不同的策略解决开发中的问题\",\"相信你经常遇到同事这样的代码\",\"// bad let arr = [1, 2, 3] arr.map(a => { if (a === 1) { console.log('11') } else if (a === 2) { console.log('22') } else if (a === 3) { console.log('33') } }) \",\"这种如果需要优化，可以使用策略模式\",\"class Strategy { constructor() { this.strategy = {} // JavaScript的策略模式可以通过对象来巧妙实现 } addStrategy(name, callback) { this.strategy[name] = callback } execute(name, args) { this.strategy[name]?.(args) } } // good let arr = [1, 2, 3] const strategy = new Strategy() strategy.addStrategy(1, () => console.log(11)) strategy.addStrategy(2, () => console.log(22)) strategy.addStrategy(3, () => console.log(33)) arr.map(a => strategy.execute(a, 'your args')) \"]},\"164\":{\"h\":\"装饰器模式\",\"t\":[\"装饰器模式(Decorater)，主要通过扩展已有的类增加新功能，它不会修改底层代码，是一种对象子类继承的替代方案\",\"class YourClass { constructor () { this.number = 0 } count () { this.number ++ return this.number } } class Decorater { constructor (other) { this.number = other.number + 66 } count () { this.number = this.number + 100 return this.number } } const yourClass = new YourClass() const decorater = new Decorater(yourClass) console.log(yourClass.count(), 'yourClass') // 1 console.log(decorater.count(), 'decorater') // 166 console.log(yourClass.count(), 'yourClass') // 2 console.log(decorater.count(), 'decorater') // 266 \",\"好了，今天先分享到这里了，欢迎指正\"]},\"165\":{\"c\":[\"前端\"]},\"166\":{\"c\":[\"JavaScript\",\"设计模式\"]},\"167\":{\"h\":\"分享几个上千✨的React开源库助你玩转React\"},\"168\":{\"h\":\"theme: channing-cyan highlight: atom-one-dark\",\"t\":[\"文章同步在公众号：萌萌哒草头将军，欢迎关注。\",\"今天分享几个上千⭐的库，助你玩转React学习和开发。\"]},\"169\":{\"h\":\"🚀 React学习库\"},\"170\":{\"h\":\"💎 reactjs-interview-questions\",\"t\":[\"git地址：https://github.com/sudheerj/reactjs-interview-questions\",\"内容介绍：这个仓库介绍了300+个常见的面试问题，十分详细，目前7.4k的⭐\",\"image.png\"]},\"171\":{\"h\":\"💎 React设计\",\"t\":[\"git地址：https://github.com/SangKa/react-in-patterns-cn\",\"内容介绍：一本完全免费的介绍React设计的电子书，目前1.2k的⭐\",\"image.png\"]},\"172\":{\"h\":\"💎 React技巧\",\"t\":[\"git地址：https://github.com/hateonion/react-bits-CN\",\"内容介绍：讲解React使用技巧的开源电子书，英文原版15.5k的⭐\"]},\"173\":{\"h\":\"💎 React开发路线图\",\"t\":[\"git地址：https://github.com/adam-golab/react-developer-roadmap/blob/master/roadmap-cn.png\",\"这个仓库罗列了一系列React开发需要学习的技能点，对于刚刚准备转码的小伙伴来说，还是十分推荐的。目前17k的⭐\",\"image.png\"]},\"174\":{\"h\":\"💎 React+TypeScript备忘录\",\"t\":[\"git地址：https://github.com/typescript-cheatsheets/react\",\"内容介绍：如果你使用TypeScript开发React，那么这个仓库是值得一看的，它首先介绍了基础的ts开发介绍，另外还提供了高等进阶的一些方法，很实用，目前已经41.4k的⭐\"]},\"175\":{\"h\":\"🚀 React工具库\"},\"176\":{\"h\":\"💎 beautiful-react-hooks\",\"t\":[\"git地址：https://github.com/antonioru/beautiful-react-hooks\",\"内容介绍：对React语法大刀阔斧改良的工具库，目前6.9k的⭐，语法上的改进使用起来十分舒适，其中一个状态钩子如下，如果你了解Svelte，那它的语法你肯定不会觉得陌生，和我上篇的分享不谋而合了。这仅仅是冰山一角，更多使用的工具函数可以去仓库中浏览下。\",\"🤮是时候放弃useState了，🚀这么写React更丝滑🚀\",\"import { Typography, Space, Button, Tag } from 'antd'; import useMutableState from 'beautiful-react-hooks/useMutableState'; const TestComponent = () => { const counter = useMutableState({ value: 0 }); return ( <DisplayDemo title=\\\"useMutableState\\\"> <Typography.Paragraph> Counter: <Tag color=\\\"green\\\">{counter.value}</Tag> </Typography.Paragraph> <Space> <Button type=\\\"primary\\\" onClick={() => counter.value += 1}>increase</Button> <Button type=\\\"primary\\\" onClick={() => counter.value -= 1}>decrease</Button> </Space> </DisplayDemo> ); }; \"]},\"177\":{\"h\":\"💎 hos\",\"t\":[\"git地址：https://github.com/deepsweet/hocs\",\"内容介绍：这是一个在recompose库（React成员开发的工具库）基础上利用React高阶组件功能开发的功能库，目前已经1.9k⭐了。\",\"不过这个工具库仅仅是维护阶段，不会再开发新功能了。下面是一个有趣的例子，你一定看的懂这个功能。\",\"import React from 'react'; import { compose, withState } from 'recompose'; import withLifecycle from '@hocs/with-lifecycle'; const Demo = ({ isLoading }) => ( <h1>{ isLoading ? 'Loading' : 'Done' }</h1> ); export default compose( withState('isLoading', 'setLoading', true), withLifecycle({ onDidMount({ setLoading }) { setLoading(true, () => { setTimeout(() => setLoading(false), 3000); }) }, onReceiveProps(props, nextProps) { console.log(`isLoading: ${props.isLoading} → ${nextProps.isLoading}`); } }) )(Demo); \",\"类似react-use、ahooks的工具库还有很多，这里只列举了两个特别的，希望可以帮你拓宽视野。\",\"今天的分享就到这了，感谢各位的观看，如果你也有值得分享的库，评论区告诉我。\"]},\"178\":{\"c\":[\"前端\"]},\"179\":{\"c\":[\"JavaScript\",\"Vue\"]},\"180\":{\"h\":\"React状态管理库—— zustand 为啥这么简单易用🚀\",\"t\":[\"文章同步在公众号：萌萌哒草头将军，欢迎关注\",\"GitHub 地址点这里\"]},\"181\":{\"h\":\"🚀 简单易用的 zustand\"},\"182\":{\"h\":\"🚀 简单的对比\",\"t\":[\"说到中大型 React 项目状态管理库，最先想到就是 Redux。而 Redux 是基于 Flux 架构模式的状态管理库。\",\"image.png\",\"Redux 继承了 Flux\\\"单向流动\\\"的特点，\",\"用户与 View 进行交互，触发相应的 Actions。\",\"Actions 通过 Dispatcher 进行派发。\",\"Stores 接收派发的 Actions，并根据需要更新状态。\",\"Stores 更新后触发事件，通知 Views 进行界面更新。\",\"Views 使用 Stores 中的最新状态重新渲染界面。\",\"然而随着 Hook 的流行，Flux 模式显得日益笨重。在很长时间里，通常会采用 react 自带的 createContext 代替 Redux 的需求。一个简单的例子如下。\",\"import React, { createContext, useContext, useState } from 'react'; // 创建一个上下文对象类型 interface CountContextProps { count: number; setCount: (count: number) => void; } // 创建上下文 const CountContext = createContext<CountContextProps | undefined>(undefined); // 提供器组件 const CountProvider: React.FC = ({ children }) => { const [count, setCount] = useState(0); const contextValue: CountContextProps = { count, setCount, }; return ( <CountContext.Provider value={contextValue}> {children} </CountContext.Provider> ); }; // 消费者组件 const Counter: React.FC = () => { const { count, setCount } = useContext(CountContext)!; const increment = () => { setCount(count + 1); }; const decrement = () => { setCount(count - 1); }; return ( <div> <p>Count: {count}</p> <button onClick={increment}>Increment</button> <button onClick={decrement}>Decrement</button> </div> ); }; // 应用程序组件 const App: React.FC = () => { return ( <CountProvider> <Counter /> </CountProvider> ); }; export default App; \",\"虽然是个简单的例子，但是实际开发中，步骤 i 依然繁琐。\",\"那么有没有更简便的方案？答案是肯定的！\",\"那就是 zustand 。同样功能的例子实现如下：\",\"import create from \\\"zustand\\\"; // 创建状态存储 interface CountState { count: number; increment: () => void; decrement: () => void; } const useCountStore = create < CountState > ((set) => ({ count: 0, increment: () => set((state) => ({ count: state.count + 1 })), decrement: () => set((state) => ({ count: state.count - 1 })), })); // 消费者组件 const Counter: React.FC = () => { const { count, increment, decrement } = useCountStore(); return ( <div> <p>Count: {count}</p> <button onClick={increment}>Increment</button> <button onClick={decrement}>Decrement</button> </div> ); }; // 应用程序组件 const App: React.FC = () => { return <Counter />; }; export default App; \",\"简单的对比，就可以发现 zustand 没有特定的概念，简单易用。\"]},\"183\":{\"h\":\"🚀 监听变化\",\"t\":[\"通常，当 store 变化时，可以使用 useEffect 监听状态变化\",\"// 消费者组件 const Counter: React.FC = () => { const { count, increment, decrement } = useCountStore(); useEffect(() => console.log(count), [count]); return ( <div> <p>Count: {count}</p> <button onClick={increment}>Increment</button> <button onClick={decrement}>Decrement</button> </div> ); }; \",\"但是如果当状态的变化不想引起组件的渲染时，可以使用如下方式：\",\"// 消费者组件 const Counter: React.FC = () => { const { count, increment, decrement } = useCountStore(); // useEffect(() => console.log(count), [count]) // 注意，useCountStore.subscribe的返回值时取消订阅函数 // 所以当组件卸载时，会自动取消订阅 useEffect( () => useCountStore.subscribe((state) => console.log(state.count)), [] ); return ( <div> <p>Count: {count}</p> <button onClick={increment}>Increment</button> <button onClick={decrement}>Decrement</button> </div> ); }; \"]},\"184\":{\"h\":\"🚀 中间件模式\",\"t\":[\"zustand 还在状态管理的功能上提供了中间件功能。例如，当对应的值发生变化时，自动更新localStroge\",\"const log = (config) => (set, get, api) => localStroge( (...args) => { // 这里args为set({ count })的参数就{ count } localStroge.setItem(\\\"count\\\", args.count); set(...args); }, get, api ); const useCountStore = create( localStroge((set) => ({ count: 0, setCount: (count) => set({ count }), })) ); \",\"当然，zustand提供了内置的一些中间件，如下：\",\"export * from \\\"./middleware/redux.ts\\\"; export * from \\\"./middleware/devtools.ts\\\"; export * from \\\"./middleware/subscribeWithSelector.ts\\\"; export * from \\\"./middleware/combine.ts\\\"; export * from \\\"./middleware/persist.ts\\\"; \",\"文档可以参看这里\",\"社区中间件也十分丰富，详细请看这里\"]},\"185\":{\"h\":\"🚀 总结\",\"t\":[\"zustand 凭借小巧的体积（2kb）和简单易用的特性，迅速获得 GitHub 34.3k 的 star，足以说明它的好用。\",\"好了今天的文章分享到这了，下篇文章我们从源码的角度进一步的认识 zustand ！\"]},\"186\":{\"h\":\"更多文章\",\"t\":[\"🤮 是时候放弃 useState 了，🚀 这么写 React 更丝滑 🚀\",\"🎉 干货满满，React 设计原理(三)：藏在源码里的排位赛，Lane 模型 🎉\",\"🎉 干货满满，React 设计原理(二)：藏在源码里的两个圈 🎉\",\"🎉 干货满满，React 设计原理(一)：藏在源码里的紧箍咒，几个容易混淆的变量 🎉\",\"🤔useMemo 还可以这样用？useCallback：糟了，我成替身了！\",\"🔔 叮~，你有几个系统级交互的 React hooks 待查收\",\"🎉React 几个不常用，但是可以四两拨千斤的 hooks🎉\",\"优美的 Reactl 列表动画：Styled-Components 动画实践\"]},\"187\":{\"c\":[\"前端\"]},\"188\":{\"c\":[\"React\"]},\"189\":{\"h\":\"Zustand 底层原理🚀🚀🚀\",\"t\":[\"接着上篇文章：React 状态管理库—— zustand 为啥这么简单易用 🚀\",\"今天探究 Zustand 底层原理\"]},\"190\":{\"h\":\"🚀 zustand 为什么这么好用\",\"t\":[\"第一次使用 zustand 被惊艳到了。只需要调用create函数创建store就可以直接在任何组件使用了。\"]},\"191\":{\"h\":\"💎 底层原理很简单\",\"t\":[\"好奇的翻开代码，才发现 zustand 基于发布订阅模式实现的响应式。下面是核心代码实现。\",\"function createStoreImpl(initialState) { let state = initialState; const listeners = new Set(); function setState(newState) { state = newState; listeners.forEach((listener) => listener(state)); } function subscribe(listener) { listeners.add(listener); return () => { listeners.delete(listener); }; } function destroy() { listeners.clear(); } return { getState: () => state, setState, subscribe, destroy, }; } \",\"使用方法如下：\",\"// 创建 const store = createStoreImpl({ count: 0 }); // 更新 store.setState({ count: 1 }); // 订阅 const unsubscribe = store.subscribe((state) => { console.log(\\\"State changed:\\\", state); }); store.setState({ count: 2 }); // 触发订阅的回调函数 unsubscribe(); // 取消订阅 store.setState({ count: 3 }); // 不会触发订阅的回调函数 store.destroy(); // 销毁这个store \"]},\"192\":{\"h\":\"💎 不同环境处理\",\"t\":[\"事实上，zustand 提供了两个版本的包，即 react 版本和非 react 的 vanilla 版本。\",\"包的 export 信息如下，可以看出默认为 react 版本，\",\"export * from \\\"./vanilla.ts\\\"; export * from \\\"./react.ts\\\"; export { default } from \\\"./react.ts\\\"; \",\"非 react 的环境使用如下\",\"import { createStore } from 'zustand/vanilla' const store = createStore(() => ({ ... })) const { getState, setState, subscribe } = store export default store \",\"在 react 模式下，和 vanilla 版本相同的是他们都是使用 createStore 创建的，使用 create 创建 store\",\"和 vanilla 版本不同的是，createImpl 的返回值是使用 useStore 包装了一层的返回值（实际是 useSyncExternalStore api）。\",\"const createImpl = (createState) => { const api = typeof createState === \\\"function\\\" ? createStore(createState) : createState; const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn); Object.assign(useBoundStore, api); return useBoundStore; }; export const create = (createState) => createState ? createImpl(createState) : createImpl; \",\"useStore 又通过内置的包 use-sync-external-store/shim/with-selector处理。\",\"use-sync-external-store可以在 Zustand 中使用外部状态管理库的状态，例如 Redux。\",\"import useSyncExternalStoreExports from 'use-sync-external-store/shim/with-selector' export function useStore<TState, StateSlice>( api: WithReact<StoreApi<TState>>, selector: (state: TState) => StateSlice = api.getState as any, equalityFn?: (a: StateSlice, b: StateSlice) => boolean ) { const slice = useSyncExternalStoreWithSelector( api.subscribe, api.getState, api.getServerState || api.getState, selector, equalityFn ) useDebugValue(slice) return slice } \"]},\"193\":{\"c\":[\"前端\"]},\"194\":{\"c\":[\"React\"]},\"195\":{\"h\":\"🤔useMemo还可以这样用？useCallback：糟了，我成替身了！\",\"t\":[\"文章首发公众号：萌萌哒草头将军，最近关注有🎁，欢迎关注！\",\"最近在研究React的源码，然后，我就悟了！\"]},\"196\":{\"h\":\"💡推荐阅读\",\"t\":[\"🎉干货满满，React设计原理，藏在源码里的五指山🎉\"]},\"197\":{\"h\":\"💎 开门见山\",\"t\":[\"请看👇的代码：你觉得可以按预期运行吗？\",\"import { useMemo, useState } from 'react' function App() { const [count, setCount] = useState(0) const onClick = useMemo(() => { return () => setCount((count) => count + 1) }, []) useMemo(() => console.log(count), [count]) return ( <div className=\\\"App\\\"> <button onClick={onClick}> count is {count} </button> </div> ); } export default App; \",\"答案是完全可以！\"]},\"198\":{\"h\":\"💎 分析\"},\"199\":{\"h\":\"🚗 用法分析\",\"t\":[\"他们都接收两个参数，useXxx(callback, [...deps])\",\"👉第一个参数callback是回调函数\",\"👉第二个参数deps是依赖项\",\"不同的是当依赖项发生改变时\",\"🚆useCallback会重新创建回调函数，以保证每次调用都是最新值。并缓存这个函数\",\"🚆useEffect回调函数会重新执行\",\"🚆useMemo回调函数会重新执行，并缓存返回值。\",\"根据useMemo返回值的不同，可以模拟出不同的效果：\",\"👉当返回值是个函数时，它useCallback和是完全等效的。\",\"👉当没有返回值或者不管返回值时，它useEffect和部分功能是等效的\",\"这是因为，它不会像useEffect一样，对返回值做处理。也就是说，它无法模拟unMounted生命周期函数。\",\"就是这么简单的原因，上面的代码会执行成功。\"]},\"200\":{\"h\":\"🚗 源码分析\",\"t\":[\"这部分是选读，如果你对源码感兴趣，可以阅读这块。\"]},\"201\":{\"h\":\"🚆 useMemo 源码逻辑\",\"t\":[\"👉注册hook状态\",\"👉此时是mounted阶段，调用mountMemo，\",\"👉将注册的callback和deps拿出来\",\"👉执行callback，并将执行结果和deps缓存在当前hook的状态上\",\"👉deps发生改变，进入update阶段，调用updateMemo\",\"👉取出当前的hook状态，拿到callback和deps，再从当前hook拿到上次的deps\",\"👉比较前后两次的deps，如果一致，直接返回当前的状态值\",\"👉否则重新执行callback，保持返回值，并将该值最为最新的状态值和deps一起保存起来\",\"function mountMemo<T>( nextCreate: () => T, deps: Array<mixed> | void | null, ): T { // 拿到当前的hook状态 const hook = mountWorkInProgressHook(); // 拿到当前的hook依赖项 const nextDeps = deps === undefined ? null : deps; if (shouldDoubleInvokeUserFnsInHooksDEV) { nextCreate(); } // 执行回调函数 const nextValue = nextCreate(); // 缓存回调函数返回值和依赖 hook.memoizedState = [nextValue, nextDeps]; // 返回返回值 return nextValue; } function updateMemo<T>( nextCreate: () => T, deps: Array<mixed> | void | null, ): T { const hook = updateWorkInProgressHook(); const nextDeps = deps === undefined ? null : deps; const prevState = hook.memoizedState; // Assume these are defined. If they're not, areHookInputsEqual will warn. if (nextDeps !== null) { const prevDeps: Array<mixed> | null = prevState[1]; if (areHookInputsEqual(nextDeps, prevDeps)) { // 如果前后依赖相同时，直接返回当前值 return prevState[0]; } } if (shouldDoubleInvokeUserFnsInHooksDEV) { nextCreate(); } // 否则重新计算赋值，并返回最新值 const nextValue = nextCreate(); hook.memoizedState = [nextValue, nextDeps]; return nextValue; } \"]},\"202\":{\"h\":\"🚆 useCallback 源码逻辑\",\"t\":[\"👉注册hook状态\",\"👉此时是mounted阶段，调用mountCallback，\",\"👉将注册的callback和deps拿出来\",\"👉将callback和deps缓存在当前hook的状态上\",\"👉deps发生改变，进入update阶段，调用updateCallback\",\"👉取出当前的hook状态，拿到callback和deps，再从当前hook拿到上次的deps\",\"👉比较前后两次的deps，如果一致，直接返回当前的状态值\",\"👉否则重新将callback做为最新的状态值和deps一起保存起来\",\"function mountCallback<T>( callback: T, deps: Array<mixed> | void | null ): T { // 获取当前hook状态 const hook = mountWorkInProgressHook(); // 获取当前hook依赖项 const nextDeps = deps === undefined ? null : deps; // 缓存回调函数和依赖 hook.memoizedState = [callback, nextDeps]; // 返回回调函数 return callback; } function updateCallback<T>( callback: T, deps: Array<mixed> | void | null ): T { const hook = updateWorkInProgressHook(); const nextDeps = deps === undefined ? null : deps; const prevState = hook.memoizedState; if (nextDeps !== null) { const prevDeps: Array<mixed> | null = prevState[1]; if (areHookInputsEqual(nextDeps, prevDeps)) { // 如果依赖项相同时，直接返回当前值 return prevState[0]; } } // 否则重新赋值，并返回最新值 hook.memoizedState = [callback, nextDeps]; return callback; } \",\"从源码上看，useCallback和useMemo的实现十分类似，唯一的不同之处是：useMemo在依赖项发生变化时会缓存回调函数的返回值。\"]},\"203\":{\"h\":\"💎 总结\",\"t\":[\"useCallback和useMemo都是缓存中间状态，\",\"不同的是useMemo可以缓存任何类型的值，useCallback仅仅缓存函数。所以开头的例子可以按预期运行。\",\"好了，今天的分享比较简单，但是希望可以帮你理解地更深一点。\",\"下篇我们继续聊hook。\"]},\"204\":{\"c\":[\"前端\"]},\"205\":{\"c\":[\"JavaScript\",\"React\"]},\"206\":{\"h\":\"《React设计原理》读书分享–前端框架概述\",\"t\":[\"很早就阅读了电子版的《React技术揭秘》，后来听说出了实体书，果断就下单了\",\"所以今天分享下最近的阅读心得\"]},\"207\":{\"h\":\"基本原理\"},\"208\":{\"h\":\"概述\",\"t\":[\"前端框架主要的作用是将数据的变化映射为UI的变化：\",\"UI=fn(state)\",\"fn就是计算数据的变动导致UI是如何变化的，不同的框架中，fn的描述方式不同\",\"主流的描述方式分为：\",\"jsx：使UI和逻辑更紧密，它是ES语法糖.（从逻辑出发，扩展逻辑，描述UI）\",\"模板语法：使用HTML描述UI，它是HTML语法扩展。（从UI出发，扩展UI，描述逻辑）\",\"jsx是动态的，即使代码没有边，每次更新，都会重新编译，\",\"模板语法是静态的，可以用来分析，哪些节点是动态的，哪些节点是静态的。有很大的优化空间。\",\"不管是jsx还是模板语法，它们都是组织逻辑和UI的关系\",\"// react const [count, setCount] = useState(0) <div onClick={() => setCount(conut++)}>{count}</div> \",\"// Vue const count = ref(0) <div @click={count.value++}>{count.value}</div> \",\"// Svelte const let = 0 <div on:click={() => conut++}>{count}</div> \",\"上面三块代码功能都是一样的：当count发生变化时，UI跟着变化\",\"根据UI变化方式（更新细粒度）不同，将框架可以分为三类：\",\"应用级：数据变化时，重新渲染整个应用，React\",\"组件级：数据变化时，重新渲染数据有变化的组件Vue\",\"元素级：数据变化时，只渲染数据变化的DOM节点，Svelte\",\"按下性能问题暂且不表，先想想，为啥会有这种差别呢？\",\"这是因为不同的框架，架构不同导致的。\",\"我们的代码并不是立即执行的，而是先进行编译（语法转换、将ts转为js、压缩、polyfill等），将我们的代码转为宿主环境可以识别的代码。\"]},\"209\":{\"h\":\"React\",\"t\":[\"React经过编译之后返回的是createElement函数，所以每次数据变化，React都会从应用根节点重新加载整个应用。因此React无需知道是哪个变量发生变化导致的更新。\",\"export const App = () => { const [count, setCount] = useState(0); return /*#__PURE__*/React.createElement(\\\"div\\\", { onClick: () => setCount(conut++) }, count); }; \",\"所以这种框被架称为应用级框架\"]},\"210\":{\"h\":\"Vue3\",\"t\":[\"Vue3经过编译之后返回的是组件的render函数\",\"function render(_ctx, _cache, $props, $setup, $data, $options) { return (_openBlock(), _createElementBlock(\\\"h1\\\", { onClick: _cache[0] || (_cache[0] = $event => (_ctx.count++)) }, _toDisplayString(_ctx.count), 1 /* TEXT */)) } \",\"Vue3会为每个组件建立watchEffect事件，这个大致如下：\",\"// patch是对比前后VNode变化的方法 watchEffect(() => patch(render(props), preVDOM), [conut]) \",\"在页面首次进入或者watchEffect的依赖项发生变化时，都会调用组件的render函数。\",\"render函数的返回值是本次更新的VNode，Vue会根据本次更新的VNode与上次更新做比较（patch），找到最优的更新路径，并且进行更新。\",\"所以这种框架被称为组件级框架\"]},\"211\":{\"h\":\"Svelte\",\"t\":[\"Svelte经过编译之后的返回值如下：（先别晕，可以跳过代码往下看）\",\"import { SvelteComponent, append, detach, element, init, insert, listen, noop, safe_not_equal, set_data, text } from \\\"svelte/internal\\\"; function create_fragment(ctx) { let div; let t; let mounted; return { c() { div = element(\\\"div\\\"); t = text(/*count*/ ctx[0]); }, m(target, anchor) { insert(target, div, anchor); append(div, t); if (!mounted) { dispose = listen(div, \\\"click\\\", /*click_handler*/ ctx[1]); mounted = true; } }, p(ctx, [dirty]) { if (dirty & /*count*/ 1) set_data(t, /*count*/ ctx[0]); }, d(detaching) { if (detaching) detach(div); mounted = false; dispose(); } }; } function instance($$self, $$props, $$invalidate) { let count = 0; const click_handler = () => $$invalidate(0, count++, count); return [count, click_handler]; } class App extends SvelteComponent { constructor(options) { super(); init(this, options, instance, create_fragment, safe_not_equal, {}); } } export default App; \",\"Svelte返回的值主要包括三块：\"]},\"212\":{\"h\":\"1. create_fragment 函数：\",\"t\":[\"c方法：create元素div的操作。\",\"m方法：mounted时执行将创建的div插入，并且监听div的click事件.\",\"d方法：delete元素div的操作。\",\"p方法：updata数据的操作。\"]},\"213\":{\"h\":\"2. instance 函数：\",\"t\":[\"声明在模板使用的变量，以及变量变化时的回调函数，并且返回它们（其实就是ctx上下文）。\"]},\"214\":{\"h\":\"3.继承 SvelteComponent 的组件，并且执行 init 方法\",\"t\":[\"init方法的大致逻辑是：当数据变化，触发mounted阶段监听事件的回调函数，这个回调函数就是instance函数返回值里的click_handler，即ctx[1]\",\"如果仅仅声明了但是没有在模板中使用，那么就会作为第四块，单独声明，但这里就不做赘述了。\",\"从前面的代码可以看出：Svelte在编译阶段，就已经找到元素和变量之间的对应关系了。\",\"所以这种框被架称为元素级框架\"]},\"215\":{\"h\":\"React性能\",\"t\":[\"你肯定会问，我就改了个count的值，像React这样大动干戈，重新渲染整个应用，是不是很低效啊。\",\"其实，React在运行时阶段，做了一部分关键的优化。\",\"不管是Vue还是React，在编译之后返回的都是VNode。\"]},\"216\":{\"h\":\"双缓存机制\",\"t\":[\"一方面，React在拿到编译之后的VNode，首先会在内存中和上次更新的VNode进行对比，找到具体更新的VNode并且在内存中更新，上次没有更新时(mount)，在内存中全部更新。\",\"image.png\",\"然后将VNode渲染在真实Dom里，使用current属性连接，同时保留内存中的VNode，使用altername属性使每个真实Dom对应，以方便下次更新时对比。\",\"这个机制叫做双缓存机制\",\"另一方面，React被重新设计为可以中断的更新UI，这么做的好处是可以避免因为高复杂度的更新因为耗时长使用户感知到页面的卡顿。\"]},\"217\":{\"h\":\"Firbe 架构\",\"t\":[\"这种可中断的更新架构就是Firbe架构。\",\"可以中断的更新原理是：如果浏览器计算和渲染的时间超过人眼可以感知卡顿的最短时间16.67ms，那就中断它，把时间让给下一个更新任务。等时间充裕的时候再重新更新。\",\"显示器如果每秒刷新次数小于60帧（刷新率），就会被感知到卡顿，所以每帧最多时间是1s/60次，即16.67ms\",\"与Firbe架构对应的是老版本的Stack架构，它因为组件渲染的时候不可中断的特点，被React团队抛弃了。因为组件层次过深，在不可中断的情况下，计算和渲染的时候超过16.67ms会造成页面卡顿。\"]},\"218\":{\"h\":\"其他的手段\",\"t\":[\"React还将一些优化的任务交给了开发者，比如，前面说过，jsx是动态的，如果你的组件全是不会变化的，那么你可以使用React.meno()包裹你的组件，明确这是个静态的，依次来较少无用的更新。还有useState\\n、useMemo、useCallback等。\"]},\"219\":{\"c\":[\"前端\"]},\"220\":{\"c\":[\"JavaScript\",\"React\"]},\"221\":{\"h\":\"优美的Reactl列表动画：Styled-Components动画实践\",\"t\":[\"原创文章，未经允许，禁止转载\",\"先看效果图(录制软件限制，只有30祯，真实效果可以运行源码)，源码点这里，欢迎star\",\"基础动画如下：\",\"组合动画如下：\",\"带缩放的动画如下：\"]},\"222\":{\"h\":\"1 动画实现的基本原理\",\"t\":[\"所谓万变不离其宗，我们的动画底层还是依靠css提供的animation动画\",\"animation: name duration timing-function delay iteration-count direction fill-mode play-state; @keyframes name { 0% {} 100% {} } \",\"fill-mode规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式\",\"默认为none：在动画执行之前和之后不会应用任何样式到目标元素，即采用初始样式\",\"forwards：将动画结束之后的样式应用在元素上，即不采用初始样式\"]},\"223\":{\"h\":\"2 和styled-components结合起来\",\"t\":[\"主要采用styled-components(CSS in JS方案)提供的styled方法定义CSS animation动画参数，配合提供的keyframes方法定义各种类型动画实现,\",\"例如，定义一个从底往上进入的动画\",\"import styled, { keyframes } from \\\"styled-components\\\"; const bottomToTop = keyframes` 0% { transform: translateY(50%); } 100% { transform: translateY(0); } ` export const BottomToTop = styled.div` transform: translateY(50%); animation: ${bottomToTop} 300ms; animation-iteration-count: 1; animation-fill-mode: forwards; animation-delay: 150ms; ` \",\"为了让每个列表项的动画开错落有序，还需要将动画的延时时间做下处理\",\"animation-delay: ${props => (props.index ?? 0) * 150}ms \",\"为了更灵活的使用，将延时参数、动画时长参数，设置为动态的变量\",\"animation: ${bottomToTop} ${props => props.duration ?? 300}ms; animation-delay: ${props => (props.index ?? 0) * (props.delay ?? 150)}ms \",\"即完整的动画定义为下面这样\",\"import styled, { keyframes } from \\\"styled-components\\\"; export interface AnimationProps { index?: number duration?: number delay?: number } const bottomToTop = keyframes` 0% { transform: translateY(50%); } 100% { transform: translateY(0); opacity: 1 } ` export const BottomToTop = styled.div<AnimationProps>` transform: translateY(50%); opacity: 0; animation: ${bottomToTop} ${props => props.duration ?? 300}ms; animation-iteration-count: 1; animation-fill-mode: forwards; animation-delay: ${props => (props.index ?? 0) * (props.delay ?? 150)}ms ` \",\"接着在列表渲染的地方使用BottomToTop组件\",\" const App: () => { return <> // ... { new Array(5).fill(null).map((_, idx) => <BottomToTop key={idx} index={idx}> <YourComponents /> </BottomToTop>) } </> } \",\"此时动画样式虽然很舒服了，但是还不够优雅\",\" 我们给动画加个回弹动画\",\"const bottomToTop = keyframes` 0% { transform: translateY(50%); } 80% { transform: translateY(-10%); } 100% { transform: translateY(0); } ` \",\"这样动画就更加有灵性了\",\" 实现其余基础动画的方式与此类似，具体可以参考源码\",\"下面展示下组合动画的\"]},\"224\":{\"h\":\"3 思路打开\",\"t\":[\"除了逐个有序的渲染列表，我们还可以考虑按照一定规律给不同的元素使用不同的话，\"]},\"225\":{\"h\":\"3.1 左右交错\",\"t\":[\"例如，如果是奇数项，元素就从右边进入，如果是偶数项，就从左边进入\",\"right_and_left.gif\",\" const App: () => { return <> // ... { new Array(5).fill(null).map((_, idx) => idx % 2 === 0 ? <RightToLeft key={idx} index={idx} duration={300} delay={50}> <YourComponents /> </RightToLeft> : <LeftToRight key={idx} index={idx} duration={300} delay={50}> <YourComponents /> </LeftToRight>) } </> } \"]},\"226\":{\"h\":\"3.2 上下交错\",\"t\":[\"例如，如果是奇数项，元素就从上边进入，如果是偶数项，就从下边进入\",\"top_and_bottom.gif\",\" const App: () => { return <> // ... { new Array(5).fill(null).map((_, idx) => idx % 2 === 0 ? <TopToBottom key={idx} index={idx} duration={300} delay={50}> <YourComponents /> </TopToBottom> : <BottomToTop key={idx} index={idx} duration={300} delay={50}> <YourComponents /> </BottomToTop>) } </> } \"]},\"227\":{\"h\":\"3.3 左右交错的同时载增加从下到上的动画\",\"t\":[\"甚至，你还可以给交错的列表增加点别的动画，例如左右交错的同时载增加从下到上的动画\",\"left_and_right_and_top_toBottom.gif\",\" const App: () => { return <> // ... { new Array(5).fill(null).map((_, idx) => idx % 2 === 0 ? <BottomToTop key={idx} index={idx} duration={300} delay={50}> <RightToLeft index={idx} duration={300} delay={50}> <YourComponents /> </RightToLeft> </BottomToTop> : <BottomToTop key={idx} index={idx} duration={300} delay={50}> <LeftToRight index={idx} duration={300} delay={50}> <YourComponents /> </LeftToRight> </BottomToTop> ) } </> } \"]},\"228\":{\"h\":\"4 思路再打开\",\"t\":[\"我们不要局限于仅有的translateX、translateY、translate属性，还可以尝试下其余的动画属性，例如，我使用scale属性增加了缩放动画，组合我们列表动画，效果如下\",\"scale_and_right_to_left.gif\",\"const scale = keyframes` 0% { transform: scale(0.8); } 70% { transform: scale(1.2); } 100% { transform: scale(1); opacity: 1 } ` export const Scale = styled.div<AnimationProps>` transform: scale(1); opacity: 0; animation: ${scale} ${props => props.duration ?? 300}ms; animation-iteration-count: 1; animation-fill-mode: forwards; animation-delay: ${props => (props.index ?? 0) * (props.delay ?? 150)}ms ` \",\"从上面你或许可以看到，我的组合动画似乎比较繁琐，例如，从左到右同时从下到上，我使用了translateX、translateY组合，而不是直接定义translate，其实我考虑到基础动画，组合起来使用场景更广，所以就这样使用了，当然，如果需要，你也可以单独加上这样的基础动画。\",\"如果你有更好的思路，欢迎交流\"]},\"229\":{\"c\":[\"前端\"]},\"230\":{\"c\":[\"React\",\"用户体验\"]},\"231\":{\"h\":\"💡我居然用错了useMemo和useCallback这么久？\",\"t\":[\"文章首发公众号：萌萌哒草头将军，最近关注有🎁，欢迎关注！\",\"我们知道，useMemo和useCallback主要作用是缓存中间状态，减少无意义的的render从而提高性能。但是最近我发现我对它们的使用一直有误解！\"]},\"232\":{\"h\":\"💡推荐阅读\",\"t\":[\"🎉干货满满，React设计原理(一)：藏在源码里的紧箍咒，几个容易混淆的变量🎉\",\"🎉干货满满，React设计原理(二)：藏在源码里的两个圈，关键的链表结构和双缓存技术🎉\"]},\"233\":{\"h\":\"💎 对 useMemo 的误解\",\"t\":[\"请看下面的代码，即使用了useMemo，在isZero的没有变的情况下，第二个子组件还是重新渲染了！\",\"import { useCallback, useMemo, useState } from \\\"react\\\"; const Child = ({ value, onClick }) => { return ( <div style={{ height: 100, background: `#${(~~(Math.random() * (1 << 24))).toString(16)}` }} > my value is {value.toString()} </div> ); }; export default function App() { const [count, setCount] = useState(0); const isZero = useMemo(() => !!(count % 3), [count]); const onClick = useCallback(() => setCount(count + 1), [count]); return ( <div className=\\\"App\\\"> <button onClick={onClick}>click me</button> <Child value={count} /> <Child value={isZero} /> </div> ); } \"]},\"234\":{\"h\":\"💡相关阅读\",\"t\":[\"🎉尤雨溪为什么要推出Vapor Mode🎉\",\"其实原因在之前的文章中也提到过：\",\"React每次当组件状态发生改变时，都会从当前组件开始一直到所有叶子节点组件重新渲染。\",\"文中同时也提到了这个问题的解决方案：子组件使用memo函数包裹，组件就可以按预期渲染了。\",\"但是，此时我们去掉useMemo，子组件依然是按期望渲染的。因为每次当count变化，useMemo都会被重新计算。\",\"memo和useMemo类似，都是基于Object.is的浅比较，仅仅对非引用类型有效。\",\"所以上面的示例中，使用useMemo是没有意义的。\"]},\"235\":{\"h\":\"💎 对 useCallback 的误解\",\"t\":[\"然而，上面的示例中，即使onClick函数不使用useCallback，组件也会按预期渲染。这是因为不管onClick的回调函数的缓存是否发生改变，App组件注定都会被渲染。\",\"所以，现在我们得到了一个合理的代码，如下：\",\"import { memo, useCallback, useMemo, useState } from \\\"react\\\"; const Child = memo(({ value, onClick }) => { return ( <div style={{ height: 100, background: `#${(~~(Math.random() * (1 << 24))).toString(16)}` }} > my value is {value.toString()} </div> ); }); export default function App() { const [count, setCount] = useState(0); // const isZero = useMemo(() => !!(count % 3), [count]); const isZero = !!(count % 3); // const onClick = useCallback(() => setCount(count + 1), [count]); const onClick = () => setCount(count + 1); return ( <div className=\\\"App\\\"> <button onClick={onClick}>click me</button> <Child value={count} /> <Child value={isZero} /> </div> ); } \",\"那到底应该何时使用useCallback呢？\",\"请看下面的例子。在上面的代码基础上添加如下代码：\",\" const onClickMethod = () => console.log(\\\"lll\\\"); return ( <div className=\\\"App\\\"> <button onClick={onClick}>click me</button> <Child value={count} onClick={onClickMethod} /> <Child value={isZero} onClick={onClickMethod} /> </div> ); \",\"此时，发现组件无法按预期渲染了，不管isZero是否发生变化，第二个Child组件都会被重新渲染。\",\"这是因为此时的onClickMethod方法被做为Child组件的onClick属性了。\",\"如果现在将onClickMethod方法使用useCallback包裹起来，就又正常了。\",\"const onClickMethod = useCallback(() => console.log(\\\"lll\\\"), []); \",\"这才是useCallback的正确用法！\"]},\"236\":{\"h\":\"💎 总结\",\"t\":[\"我们在写组件时，应该遵循下面的规律，可以有效提高页面性能：\",\"👉尽量多用memo方法包裹组件（减少渲染次数）\",\"更正：如果组件的props变化不频繁，可以使用memo包裹组件（尽可能的减少渲染次数），props变化频繁，memo依然会频繁渲染组件，反而造成了额外的性能消耗。感谢大佬oncc指正\",\"👉当组件的渲染代价比较大时，可以使用memo包裹组件（减少性能消耗）\",\"👉当子组件的属性为非引用类型的中间状态时请用useMemo（减少渲染次数）\",\"更正：当变量依赖一个可能会变的值，并且需要复杂的计算时，可以使用useMemo缓存计算结果（减少计算消耗）感谢吃山鬼的神仙大佬指正\",\"👉当子组件的属性为函数时请用useCallback（减少渲染次数）\",\"👉仅作用在当前组件范围内的属性，尽量不要使用useMemo和useCallback（减少调用）\",\"好了今天的分享到这了，希望你也不要跟我一样再用错useMemo和useCallback了！\"]},\"237\":{\"c\":[\"前端\"]},\"238\":{\"c\":[\"JavaScript\",\"React\"]},\"239\":{\"h\":\"简单几步，将React项目脚手架Webpack换成Vite⚡⚡，附带性能比较和思考\",\"t\":[\"文章同步在公众号：萌萌哒草头将军，欢迎关注\"]},\"240\":{\"h\":\"⚡️ 使用 Vite\",\"t\":[\"前段时间，将练习了时长两年半的 react 项目脚手架换成 vite 了，过程如下\",\"首先使用 vite 创建基础项目框架\",\"npm create vite@latest my-vue-app --template react-ts \",\"将 src 工作目录直接拷贝过来\",\"接着配置常用的路径解析 alias\",\"// vite-config,ts alias: [ ...( Object.entries({ '@': path.resolve('src'), }).map(([key, val]) => ({ find: key, replacement: val })) ), ], extensions: [\\\".js\\\", \\\".ts\\\", \\\".tsx\\\", \\\".jsx\\\", \\\".d.ts\\\"], \",\"此时页面可以访问了，但是还是会有 ts 相关报错，\",\"只需要在 tsconfig.json 里添加如下配置：\",\"\\\"paths\\\": { \\\"@/*\\\": [\\\"./src/*\\\"] }, \",\"为了使 ci/cd 可以正常进行，还需要将项目默认打包默认目录从 dist 换成 build\",\"// vite-config,ts export default defineConfig({ build: { outDir: \\\"./build\\\", }, }); \",\"整个过程很快，\"]},\"241\":{\"h\":\"性能优化过程\",\"t\":[\"接下来我执行了打包命令，部署在服务器上看看\",\"image.png\",\"image.png\",\"在没有任何优化情况下，包体积为 6.7M，比 webpack 版包体积小了 0.4M\",\"image.png\",\"部署之后，vite 版 lighthouse 的性能得分 59 分\",\"image.png\",\"通过分析，发现是因为没有压缩，大文件太多，加载过慢导致的，所以接下来，我们进行压缩文件。\",\"image.png\",\"压缩配置\",\"import viteCompression from \\\"vite-plugin-compression\\\"; // https://vitejs.dev/config/ export default defineConfig({ build: { outDir: \\\"./build\\\", rollupOptions: { plugins: viteCompression({ verbose: true, // 是否在控制台中输出压缩结果 disable: false, threshold: 10240, // 阈值，单位为b algorithm: \\\"gzip\\\", // 压缩算法，可选['gzip'，' brotliccompress '，'deflate '，'deflateRaw'] ext: \\\".gz\\\", // 格式 deleteOriginFile: false, // 是否清除源文件，简易这里保留 }), }, }, // ... }); \",\"并不是所有的 nginx 都带有 gzip 模块，所以最好保留源文件，以备不时之需\",\"打包之后\",\"image.png\",\"同时需要，nginx 需要开启压缩识别，否则无效。\",\"server { # 其他配置 gzip on; gzip_comp_level 5; gzip_min_length 256; gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript; # 其他配置 } \",\"通过压缩文件优化后，性能有了明显提升。\",\"我的项目没有图片，所以没有使用压缩图片的插件，如果需要可以使用vite-plugin-imagemin\"]},\"242\":{\"h\":\"性能比较\",\"t\":[\"image.png\",\"而 webpack 版的 lighthouse 的性能得分 73 分\",\"image.png\",\"webpack 版已经完成了代码压缩、代码分割、路由懒加载。\",\"对比两个版本，webpack 的 FCP 指标十分优秀，Vite 的 TBT 指标很健康。\",\"虽然，目前来看两者差距不大。但是 vite 的优势很明显，\",\"使用默认配置加上代码压缩，可以比 webpack 优化配置之后更好一点。\"]},\"243\":{\"h\":\"思考\",\"t\":[\"此时影响的因素主要请求链的长度过长\",\"image.png\",\"翻译：下面的关键请求链显示了哪些资源是以高优先级加载的。考虑减少链的长度，减少资源的下载大小，或者推迟不必要资源的下载以提高页面负载。\",\"我们可以看到上面的请求链接，好几个都是只有几 kb 的小文件。 而这些小文件是外层 index 文件的依赖文件，所以会造成阻塞，小文件小文件众多阻塞的时间就越久。\",\"vite 将文件根据路由切割成多个子模块，每个模块的文件来自于不同的依赖包的子集。并且通过 import 的方式，引入到主文件中。\",\"如果我们在小文件引入前，将小文件进行合并，就可以有效缩短链长度，从而更进一步的提高性能。目前还没有类似的插件。\",\"今天的分享就到这里了，感谢你的阅读！\"]},\"244\":{\"c\":[\"前端\"]},\"245\":{\"c\":[\"React\",\"Vite\"]},\"246\":{\"h\":\"🎉React几个不常用，但是可以四两拨千斤的hooks🎉\",\"t\":[\"大家好，我是「萌萌哒草头将军」，也可以关注我的公众号「萌萌哒草头将军」\",\"今天介绍几个React几个不常用，但是可以四两拨千斤的hooks\"]},\"247\":{\"h\":\"useSyncExternalStore\",\"t\":[\"监听外部数据变化\",\"外部数据源需要提供订阅函数，并且这个函数需要返回取消订阅的方法\",\"import React from 'react'; import { store } from './store.js' export const App () { const data = useSyncExternalStore(store.subscribe, store.getData) return <> <button onClick={store.add}>add+</button> {data} </> } \",\"// store.js let conut = 0; let listeners = []; export const store = { add () { count ++; }, subscribe(listener) { listeners = [...listeners, listener]; return () => { listeners = listeners.filter(l => l !== listener); }; }, geetDate () { return count; } } \"]},\"248\":{\"h\":\"useId\",\"t\":[\"生成全局唯一ID，快放弃Math.random()吧\",\"import { useId } from 'react'; function App() { const uuid = useId(); return ( <>{uuid}</> ); } \"]},\"249\":{\"h\":\"useLayoutEffect\",\"t\":[\"布局更新前触发\",\"import { useState, useRef, useLayoutEffect } from 'react'; function Tooltip() { const ref = useRef(null); const [tooltipHeight, setTooltipHeight] = useState(0); useLayoutEffect(() => { const { height } = ref.current.getBoundingClientRect(); setTooltipHeight(height); }, []); return <></> } \"]},\"250\":{\"h\":\"useDeferredValue\",\"t\":[\"UI延时更新，不用手写防抖函数了\",\"import SearchResults from './SearchResults.js'; export default function App() { const [query, setQuery] = useState(''); const deferredQuery = useDeferredValue(query); return ( <> <label> Search albums: <input value={query} onChange={e => setQuery(e.target.value)} /> </label> <Suspense fallback={<h2>Loading...</h2>}> <SearchResults query={deferredQuery} /> </Suspense> </> ); } \"]},\"251\":{\"h\":\"useReducer\",\"t\":[\"自定义一个轻量级的redux\",\"const initialState = {count: 0}; function reducer(state, action) { switch (action.type) { case 'increment': return {count: state.count + 1}; case 'decrement': return {count: state.count - 1}; default: throw new Error(); } } function Counter() { const [state, dispatch] = useReducer(reducer, initialState); return ( <> Count: {state.count} <button onClick={() => dispatch({type: 'decrement'})}>-</button> <button onClick={() => dispatch({type: 'increment'})}>+</button> </> ); } \"]},\"252\":{\"h\":\"useRef\",\"t\":[\"定义一个值的引用\",\"function TextInputWithFocusButton() { const inputEl = useRef(null); const onButtonClick = () => { inputEl.current.focus(); }; return ( <> <input ref={inputEl} type=\\\"text\\\" /> <button onClick={onButtonClick}>Focus the input</button> </> ); } \"]},\"253\":{\"h\":\"useImperativeHandle\",\"t\":[\"自定义由ref暴露出来的句柄。\",\"function FancyInput(props, ref) { const inputRef = useRef(); useImperativeHandle(ref, () => ({ focus: () => { inputRef.current.focus(); } })); return <input ref={inputRef} {..props} />; } \"]},\"254\":{\"c\":[\"前端\"]},\"255\":{\"c\":[\"JavaScript\",\"React\"]},\"256\":{\"h\":\"🎉干货满满，React设计原理(一)：藏在源码里的紧箍咒🎉\"},\"257\":{\"h\":\"💡 相关阅读\",\"t\":[\"🎉干货满满，React设计原理(二)：藏在源码里的两个圈，关键的链表结构和双缓存技术🎉\",\"文章首发公众号： 萌萌哒草头将军，最近关注有🎁，欢迎关注\",\"最近在努力研究React源码，发现它并没有我之前想象的那么难理解。\",\"虽然源码里面有一些概念就像一座五指山困住了桀骜不驯的孙悟空。\",\"但如果你理解了下面的几个概念，读懂react源码就不是难事了。\"]},\"258\":{\"h\":\"💎 第一座山： Fiber 相关变量命名\",\"t\":[\"我们已经知道从v16.8开始，React进入了fiber架构时代，将不可中断的递归改进为可中断的递归。\",\"fiber架构主要的工作是创建fiber tree，然后在合适的时机将这棵树渲染在屏幕上.\",\"所以围绕着fiber，源码里出现了一堆带着fiber的变量。\"]},\"259\":{\"h\":\"🚗 FiberNode\",\"t\":[\"首先，在源码中，FiberNode是个构造函数，它包含了许多属性。\",\"function FiberNode( this: $FlowFixMe, tag: WorkTag, pendingProps: mixed, key: null | string, mode: TypeOfMode, ) { // Instance this.tag = tag; this.key = key; this.elementType = null; this.type = null; this.stateNode = null; // Fiber this.return = null; this.child = null; this.sibling = null; this.index = 0; this.ref = null; this.refCleanup = null; this.pendingProps = pendingProps; this.memoizedProps = null; this.updateQueue = null; this.memoizedState = null; this.dependencies = null; this.mode = mode; // Effects this.flags = NoFlags; this.subtreeFlags = NoFlags; this.deletions = null; this.lanes = NoLanes; this.childLanes = NoLanes; this.alternate = null; } \",\"这些属性可以根据FiberNode的不同身份进行划分。\",\"FiberNode在React中通常有三种不同的身份：\",\"👉 作为架构的一环\",\"作为架构的一环，多个FiberNode作为基本节点构成fiber tree。\",\"此时，它的相关属性如下：\",\"// Fiber // 指向父节点 this.return = null; // 指向第一个子节点 this.child = null; // 指向右边兄弟节点 this.sibling = null; this.index = 0; \",\"👉 作为数据的一环\",\"作为数据的一环，它保存了基本的React元素信息。\",\"// Instance // 对应组件的类型，可以是class、function等 this.tag = tag; // 组件的key this.key = key; // 和type类似的属性 this.elementType = null; // 根据tag的不同，可以是calss、function、tagName（div、input等原始的标签） this.type = null; // FiberNode对应的元素 this.stateNode = null; \",\"这里说明一下React元素:\",\"React元素可以是<div>Hello!</div>基本HTML元素，也可以是<App />这样的组件，App是个类组件或者函数组件等。\",\"👉 作为调度的一环\",\"作为调度的一环，它提供了调度时的一些依据。\",\"// render相关 this.flags = NoFlags; this.subtreeFlags = NoFlags; this.deletions = null; // 优先级相关 this.lanes = NoLanes; this.childLanes = NoLanes; // 缓存相关 this.alternate = null; \"]},\"260\":{\"h\":\"🚗 fiberNode\",\"t\":[\"前面说过，FiberNode是fiber tree最小单元。而React元素被编译之后的VNode都成为FiberNode构造函数的实例，源码中实例都用fiber或者workInProgress表示。\"]},\"261\":{\"h\":\"🚗 HostRootFiber\",\"t\":[\"HostRootFiber是源码里使用createHostRootFiber创建的Fiber根节点，它包含整棵组件树的信息。对应的是如下代码：\",\"<body> <div id=\\\"app\\\"></div> <div id=\\\"app2\\\"></div> <div id=\\\"app3\\\"></div> </body> \",\"React允许你创建最多个HostRootFiber，也就是说，你可以有多个上述的挂载节点。\"]},\"262\":{\"h\":\"🚗 rootFiber\",\"t\":[\"源码里通过createHostRootFiber的实例在作为参数时，偶尔也会使用rootFiber表示。\"]},\"263\":{\"h\":\"🚗 FiberRootNode\",\"t\":[\"FiberRootNode表示应用根节点。它保存着应用的状态信息和组件信息。它的数据结构如下：\",\"function FiberRootNode( this: $FlowFixMe, containerInfo: any, // $FlowFixMe[missing-local-annot] tag, hydrate: any, identifierPrefix: any, onRecoverableError: any, ) { this.tag = tag; // 表示应用程序的容器元素，即组件树的根节点 // 它一般是一个 DOM 元素，用来承载整个组件树的渲染结果。 this.containerInfo = containerInfo; // 表示当前应用程序中待处理的子树列表 this.pendingChildren = null; // 表示当前渲染的 Fiber 树的根节点，指向 HootRootFiber this.current = null; // 网络请求优化用的属性 this.pingCache = null; // 表示最近一次渲染完成的 Fiber 树的根节点 // React 在进行组件更新时，会创建一个新的 Fiber 树 // 并将它与旧的 Fiber 树进行比较，找出需要更新的部分 // 然后进行更新。当更新完成后，最近一次渲染的结果 // 会存储在 `finishedWork` 属性中 this.finishedWork = null; // 表示当前应用程序的上下文 this.context = null; // 表示当前应用程序的挂起上下文 // 在 React 中，当组件的上下文发生变化时， // React 会将新的上下文信息存储在 `pendingContext` 中 // 待下一次更新时再进行处理。 this.pendingContext = null; // 当组件完成更新后的回调函数 this.callbackNode = null; // 表示下一次更新的过期时间 this.expirationTimes = createLaneMap(NoTimestamp); // 优先级相关的属性 this.pendingLanes = NoLanes; this.suspendedLanes = NoLanes; this.pingedLanes = NoLanes; this.expiredLanes = NoLanes; this.mutableReadLanes = NoLanes; this.finishedLanes = NoLanes; //.... } \",\"通常状况下，FiberRootNode和HootRootFiber是一一对应的关系。\",\"FiberRootNode是单例对象，每个应用程序只会有一个实例，如果一个页面有多个React应用，那么会有多个实例。\"]},\"264\":{\"h\":\"🚗 fiberRootNode\",\"t\":[\"fiberRootNode是createFiberRoot的返回值类型。即FiberRootNode实例。源码里用fiberRoot表示。\"]},\"265\":{\"h\":\"💎 总结\",\"t\":[\"在Fiber架构中，FiberNode实例fiber既是fiber tree的基本数据结构单元，记录元素节点的信息，也是组件根节点的数据单元，记录整个组件树的信息，同时也会为调度相关的工作提供依据；\",\"FiberRootNode的实例fiberRoot是应用根节点的数据单元，包含整个应用的状态信息和租价信息。它和HootRootFiber实例rootFiber是一一对应关系\"]},\"266\":{\"c\":[\"前端\"]},\"267\":{\"c\":[\"JavaScript\",\"React\"]},\"268\":{\"h\":\"🎉干货满满，React设计原理(二)：藏在源码里的两个圈🎉\"},\"269\":{\"h\":\"💡相关阅读\",\"t\":[\"🎉干货满满，React设计原理(一)：藏在源码里的紧箍咒，几个容易混淆的变量🎉\",\"文章首发公众号：萌萌哒草头将军，最近关注有🎁，欢迎关注\"]},\"270\":{\"h\":\"💎 第二座大山：链表结构和双缓存机制\",\"t\":[\"上篇文章中讲述了几个容易给源码阅读造成困扰的几个fiber相关的变量名称，这篇我将介绍下Fiber架构的链表结构和双缓存机制。\",\"上文提到，FiberNode扮演多种角色时，保存着不同的数据，所以FiberNode保存的数据比较复杂。\",\"本文重点，讲解作为Fiber架构的一环时，保存的链状数据结构（同时也会捎带的讲解其他的一些属性），以及双缓存机制，\"]},\"271\":{\"h\":\"🚗 链表结构\",\"t\":[\"Fiber tree由多个FiberNode节点组成的树状链表结构的数据。每个FiberNode 的节点都有以下几个和Fiber架构相关的重要属性：\",\"// 指向父节点 this.return = null; // 指向第一个子节点 this.child = null; // 指向右边兄弟节点 this.sibling = null; \",\"虽然根据不同的节点类型（比如函数组件、类组件、普通元素等）数据结构会有所不同，但是它们都会使用这三个属性描述它与它们相邻节点的关系。\",\"比如，有如下的代码：\",\"function App() { const [name, setName] = useState(\\\"mmdctjj\\\"); const [count, setCount] = useState(0); return ( <> <button onClick={() => { setName(name => name + 'l') setCount(count => count + 1) }} > {count}--{name} </button> </> ); } const root = ReactDOM.createRoot(document.getElementById('root')); root.render(<App />); \",\"它们的Fiber tree示意图如下：\",\"实际的Fiber树状链表结构如下：\",\"此时对应的是mounted阶段的初始状态，如果我们点击一次按钮，新的树状链状结构(对应updated阶段)如下：\",\"对比两次的Fiber数据结构，从中我们可以得出结论：\",\"🔥 在函数组件对应的链表结构中，React每次将更新的内容渲染在页面之后，会将组件里的每个useState返回的状态记录在memoizedState下的baseState属性上，返回的dispatch方法有queue属性上，同时使用next属性指向下一个状态。直到最后一个状态时，next为null。这是我们发现的第二条链状结构。\",\"🔥 另外我们还发现，button所在的fiber结构中，memoizedProps、pendingProps属性上存在children、onClick属性\",\"🔥 我们还发现，更新之后，每个fiber结构的alternate都指向了上次的自己。这其实是双缓存机制的实现，下面我们还会讲到。\",\"如果我们将上面的函数组件替换为具有同样功能的类组件时（代码如下）\",\"class App extends React.Component { constructor() { super(); this.state = { count: 0, name: \\\"mmdctjj\\\", }; } render() { return ( <> <button onClick={() => this.setState({ count: this.state.count + 1, name: this.state.name + \\\"l\\\", }) } > {this.state.count}--{this.state.name} </button> </> ); } } \",\"它的树状链表结构如下：\",\"这里我们发现类组件和函数组件不一样的地方：\",\"🔥 类组件的fiber结构的memoizedState属性仅仅对应this.state的值，没有了想函数组件的第二条链表。\",\"🔥 类组件的fiber结构的updateQueue属性承载了组件的更新信息。这里的更新我们以后会详细讲到的。\",\"总结下，React会为不同类型的Fiber tree节点创建不同的数据结构（略微不同的FiberNode类型），不同的数据结构更新方式也不一样。\",\"除了上面说到的类组件和函数组件，还有Fargement、Suspense内置组件类型和一些别的情况下的特殊组件。\"]},\"272\":{\"h\":\"🚗 双缓存机制\",\"t\":[\"上面提到，更新之后每个fiber节点的alternate属性都会指向上次的自己。其实这是React的一种优化策略。\",\"React在运行时解析vnode，更新之后标记出更新前后变动的dom，然后渲染在页面中。如果每次都重新生成新的dom显然十分浪费资源。\",\"所以React一方面会为每个dom绑定上次的状态，当发生变更时，快速比对，找出变动的地方。\",\"另一方面，React还在内存中维护了一棵Fiber tree，变量名为workInProgress，用于快速切换。\",\"源码中，所有带着workInProgressXxx的变量，都是指运行在内存中的对象。比如workInProgressHook\",\"上篇文章中提到过，每个应用都会有唯一的FiberRootNode实例用来维护整个应用的状态和组件信息。它有个current属性用于指向渲染在页面中的fiber tree，而每个fiber节点alternate指向另一棵树中的自己。\",\"接下来我们从组件开始加载到更新，看看双缓存机制的作用过程。\",\"首先是应用被建立。App组件还未还未加载，此时是FiberRootNode的current属性为null：\",\"在App组件解析成vMNode后，还在内存workInProgress中时：\",\"当将vNode渲染在浏览器时，FiberRootNode的current属性指向workInProgress，workInProgress置空操作：\",\"此时，我们点击button的点击事件，触发更新，内存中又多了个一棵树：\",\"通过alternate属性比对，发现是App组件状态发生改变了，所以从App组件开始替换子树，然后将FiberRootNode的current属性指向workInProgress成为新的curent属性，旧的current替换之后成为workInProgress，并置为空，等待下次的更新：\",\"这里我小小地剧透下，上述整个过程主要是render阶段地内容。具体而言，render阶段又可以分为三个小阶段：\",\"beginWork阶段：顺着child属性向下遍历，找到变化地地方，打上标记\",\"complateWork阶段：顺着return属性向上回归，将有标记的地方更新，此时就是更新workInProgress对应地Fiber tree\",\"commitRoot阶段：将workInProgress对应的Fiber tree渲染到页面，同时完成上述指针的切换工作。\"]},\"273\":{\"h\":\"🚗 总结\",\"t\":[\"React为不同的节点类型构建了不同的fiber结构和更新机制，但总的来说，它们具有同样的链表结构。\",\"本文重点介绍了类组件和函数组件的一些字段区别。另外通过alternate引出并介绍了双缓存机制：current和workInProgress的循环往替更新。\",\"就是这两个重要的”圈“，给React套上了神秘的面纱。\"]},\"274\":{\"h\":\"🎉 最后\",\"t\":[\"如果你发现本文一些错误的地方，请不吝指正，肥肠感谢🙏\",\"这是本系列的第二篇了，真的干货满满，全文近六千五字符。\",\"这个系列的目的通过分析一些理论知识，降低阅读源码的难度，即使不读源码也会对React的设计思想有总体上的理解。\",\"🎉干货满满，React设计原理(一)：藏在源码里的紧箍咒，几个容易混淆的变量🎉\",\"🎉干货满满，React设计原理(二)：藏在源码里的两个圈，关键的链表结构和双缓存技术🎉\",\"🎉干货满满，React设计原理(三)：藏在源码里的排位赛，Lanu模型和Batched Updates🎉\",\"🎉干货满满，React设计原理(四)：藏在源码里的传呼机，Dispatch机制和事件系统🎉\",\"🎉干货满满，React设计原理(五)：藏在源码里的xx，待定🎉\",\"所以对你有帮助话请给我点下赞，这对我很重要！\",\"image.png\"]},\"275\":{\"c\":[\"前端\"]},\"276\":{\"c\":[\"JavaScript\",\"React\"]},\"277\":{\"h\":\"👉被玩坏的React hook组件通信👈\",\"t\":[\"大家好，我是「萌萌哒草头将军」，感兴趣的小伙伴可以关注我公众号「萌萌哒草头将军」，近期有抽奖哦～\",\"今天给大家表演个杂技，有赞的捧个赞场，没赞的捧个人场，可怜可怜我吧！！！\"]},\"278\":{\"h\":\"👉 useImperativeHandle 杂技\",\"t\":[\"语法：useImperativeHandle(ref, createHandle, dependencies?)\",\"用法：\",\"🎉 向父组件暴露一个自定义的 ref 句柄\",\"🎉 暴露你自己的命令式方法\",\"我们采用自定义命令方法的方式进行表演，如下\",\"🎁 父组件改变子组件的值\",\"import { useRef } from 'react'; import Child from './Child.js'; export default function Form() { const ref = useRef(null); function handleClick() { ref.current.buy('apple'); } return ( <form> <Child label=\\\"Enter your name:\\\" ref={ref} /> <button type=\\\"button\\\" onClick={handleClick}> Edit </button> </form> ); } \",\"import { forwardRef, useImperativeHandle, useState } from 'react'; const Child = forwardRef(function MyInput(props, ref) { const [goods, setGoods] = useState(null) useImperativeHandle(ref, () => { return { buy (goods) { setGoods(goods) }, }; }, []); return <div>{goods}</div>; }); export default Child; \"]},\"279\":{\"h\":\"👉使用 设计模式 杂技\",\"t\":[\"在线Demo看这里\",\"这里需要借助之前提到的中介者模式\",\"import { useEffect, useState } from \\\"react\\\"; import { mediator } from \\\"./index\\\"; // 事件订阅器 export const useGetEvent = (topic) => { const sub = mediator.install({}); const [data, setData] = useState(0); sub.subscribe(topic, setData); return data; }; // 事件发布器 export const useSetEvent = (topic, value) => { const sub = mediator.install({}); useEffect(() => sub.publish(topic, value), [value]); return []; }; \",\"// app import React, { useState } from \\\"react\\\"; import { Child } from \\\"./child\\\"; import { useSetEvent } from \\\"./useEvent\\\"; const App = () => { const [count, setCount] = useState(0); useSetEvent(\\\"count\\\", count); return ( <div> {count} <br /> <button onClick={() => setCount((curr) => curr + 1)}>add +</button> <Child /> </div> ); }; \",\"// child import { useEffect } from \\\"react\\\"; import { useGetEvent } from \\\"./useEvent\\\"; export const Child = () => { const sub = useGetEvent(\\\"count\\\"); useEffect(() => console.log(sub), [sub]); return <div></div>; }; \",\"事实上不止子组件，全局组件可以实现\",\"好了，今天就表演到这了，感谢大家的捧场\",\"记得关注我公众号：「萌萌哒草头将军」\"]},\"280\":{\"c\":[\"前端\"]},\"281\":{\"c\":[\"JavaScript\",\"React\"]},\"282\":{\"h\":\"面对躺平同事，我开发了一个插件治好了我的精神内耗⚡⚡⚡\",\"t\":[\"文章同步在公众号：萌萌哒草头将军，欢迎关注\",\"插件已经开源了，可以看文章末尾\"]},\"283\":{\"h\":\"console狂魔能有多狂\",\"t\":[\"事情是这样的，前段时间我加入了公司某个小项目组\",\"入组第一天，我要来了项目权限，下载完代码和依赖\",\"然后npm start，打开浏览器控制台，\",\"我尼玛，一个登陆页面就这么多log？\",\"此刻我怀着忐忑的心情打开了自己的即将负责的模块入口页面：\",\"这让我怎么调试啊？\",\"image.png\",\"上图我已经把敏感信息屏蔽掉了(/ω＼)，每点击下页面就会蹦出好几行console\",\"全局一搜索，居然有近800多条console语句。\",\"image.png\",\"起初，我为了方便我调试，我把影响我调试的console一一注释了，真是个体力活。\",\"就在我开心了几天后，同事在开发群里发问了，“我调试打印的console怎么不见了？”，\",\"我说我注释了，那么多console我没法调试啊，然后就被好几个同事”围攻“了，\",\"后来想想没经过人家的同意修改人家的代码确实不对！\",\"其实从他们的代码来看，完全是躺平的状态，完全放弃了公司的代码规范，真的很让人emo。\"]},\"284\":{\"h\":\"emo时间的思考\",\"t\":[\"既然人家喜欢那样做，我也没办法，emo了一会，我就寻找别的方法解决让我强迫症发作的方法。\",\"第一种方法是如果有console就不让提交代码，显然不现实，\",\"第二种方法是使用去除conosle的插件，但是有个缺点，我的console也会被去掉，\",\"焦虑了好久，我就想到，有没有一种插件，在开发环境只展示开发者自己的console，但是不影响别人开发时调试。\",\"找了好久都没找到，那就自己动手开发一个吧。\",\"我的思路是\",\"在每个文件中匹配console语句\",\"用匹配到的行，请求git，查看当前行的作者\",\"如果不是我就统统删除console之后再build\",\"这样既不会干扰我开发，也不会影响别人开发调试了。\",\"上次的文章已经介绍了vite的插件开发了，这里就不赘述了。\",\"我们开发的插件主要是在文件编译时，将文件中的console智能的清除，对应的插件hook为transform。基本的结构如下。\",\"const RemoveConsole = (): { name: string; enforce: 'pre'; transform: (code: string, id: string) => any; } => { return { name: 'remove-console', enforce: \\\"pre\\\", transform: (code, id) => { // todo something return code } } } \",\"接下来一步步实现，\"]},\"285\":{\"h\":\"匹配console语句\",\"t\":[\"如果文件中存在console则进行分析，否则返回原代码。\",\"分析过程：\",\"按行划分\",\"分析出包含console的行\"]},\"286\":{\"h\":\"查询git作者\",\"t\":[\"主要使用child_process子进程运行git命令，根据命令的返回结果分别处理，\",\"例如我们或者当前作者：\",\"const userName = childProcess.execSync( `git config user.name`, { encoding: 'utf-8' } ) console.log(userName) // mmdctjj \",\"分析每行作者，使用的git命令是\",\"// 查看指定问价你的l1到l2行的作者详细信息 git blame -L l1,l2 --porcelain filepath \",\"image.png\",\"我们还需要在此基础上改造下，完整的命令如下：（win不支持grep，使用findstr代替）\",\"git blame -L ${line+1},${line+1} --porcelain ${id} | grep \\\"^author \\\" \",\"接着从字符串中截取出作者\",\"const author = authorInfo.slice(authorInfo.indexOf(`author `) + 7) \",\"根据当前作者和conosle的作者是否相等。我们得出需要删除的行\",\"// 需要删除的行 const removeLine = includesLines.filter(line => { const authorInfo = childProcess.execSync( `git blame -L ${line+1},${line+1} --porcelain ${id} | grep \\\"^author \\\"`, { encoding: 'utf-8' ) const author = authorInfo .slice(authorInfo.indexOf(`author `) + 7) .split('\\\\n')[0] return author !== userName }) \"]},\"287\":{\"h\":\"删除console\",\"t\":[\"接着我们遍历每一行，进行替换\",\"const newRows = rows.map((row, idx) => { if (removeLine.includes(idx)) { // 正则表达式替换完整的console.log语句 return row.replace(/console\\\\.log\\\\((?:[^)(]|\\\\((?:[^)(]+|\\\\([^)(]*\\\\))*\\\\))*\\\\)[;\\\\n]?/g, '') } return row }) const newContent = newRows.join(`\\\\n`) return newContent \"]},\"288\":{\"h\":\"测试\",\"t\":[\"我们验证下效果。这个文件中有多个console语句\",\"image.png\",\"image.png\",\"十分完美！！！\",\"今天的分享就到这了，感谢你的观看，如有错误的地方，欢迎指正！\",\"最后附上我的插件和loader\"]},\"289\":{\"h\":\"🚀 vite插件: rollup-plugin-remove-others-console\",\"t\":[\"插件地址：https://www.npmjs.com/package/rollup-plugin-remove-others-console\",\"github地址：https://github.com/mmdctjj/rollup-plugin-remove-others-console\"]},\"290\":{\"h\":\"🚀 webpack loader: remove-others-console-loader\",\"t\":[\"loader地址：https://www.npmjs.com/package/remove-others-console-loader\",\"github地址：https://github.com/mmdctjj/remove-others-console-loader\",\"功能还会继续完善，欢迎star⭐\"]},\"291\":{\"c\":[\"前端\"]},\"292\":{\"c\":[\"JavaScript\",\"Vite\"]},\"293\":{\"h\":\"简简单单一个vite⚡⚡插件搞定用户的另类需求——自给自足的感觉真好\",\"t\":[\"文章同步在公众号：萌萌哒草头将军，欢迎关注！\"]},\"294\":{\"h\":\"需求背景\",\"t\":[\"前几天我们的客户对我们组的客户经理提了个需求，每次上线前端页面需要在HTML里给定版本信息，因为我们客户单位会定期爬取版本信息进行汇总展示在大屏。\",\"版本信息要求如下：\",\"上线日期\",\"上线内容描述\",\"对应git提交ID\",\"对应项目的版本号\"]},\"295\":{\"h\":\"调研\",\"t\":[\"我立马想到使用插件，前几天我已经将项目脚手架换成vite了，我找了一圈，发现了几个相似的需求，不过都是直接生成 meta 标签，跟我的需求不符\",\"（我的需求是让版本信息成为入口标签的属性），\",\"他们分别是下面几个库，希望可以帮到大家\",\"https://www.npmjs.com/package/vite-plugin-version-mark\",\"https://www.npmjs.com/package/git-commit-info-plugin\",\"可以满足我的需求的插件基本上没有\",\"推荐上篇 面对躺平同事，我开发了一个vite插件，治好了我的精神内耗\",\"基于前面几次的插件经验，我又打算自己开发插件满足自己的需求。\"]},\"296\":{\"h\":\"实现\",\"t\":[\"下面是我本地的初始版本，使用 vite 特有的钩子 transformIndexHtml ，\",\"我们通过 childProcess 同步的方式访问 git 信息，\",\"通过 jsdom 库将html字符串转化为 dom 对象插入信息，最后序列化为字符串返回即可。\",\"import childProcess from 'child_process'; import { JSDOM } from 'jsdom'; import moment from 'moment'; const AddCommitAndVersion = () => { return { name: 'add-commit-and-version', transformIndexHtml (html) { const commitID = childProcess.execSync('git rev-parse --short HEAD', { encoding: 'utf-8' }) const commitInfo = childProcess.execSync('git log -3 --pretty=\\\"%s\\\"', { encoding: 'utf-8' }) const dom = new JSDOM(html) const document = dom.window.document const container = document.getElementById('root') container.setAttribute(\\\"commitID\\\", commitID.trim()); container.setAttribute(\\\"verion\\\", moment(new Date()).format(`YYYY.MM.DD.HH:mm:ss`)); container.setAttribute(\\\"description\\\", commitInfo.trim().split('\\\\n').toString()); return dom.serialize() } } } \",\"为了可以让更多的人方便用，我们在此基础上提供更多的灵活性。所以我们定义如下的签名\",\"interface OptionProps { /** * 挂载信息的节点，该值为 querySelector 参数 * 默认：body标签 */ root?: string /** * moment日期格式 * 默认：YYYY-MM-DD HH:mm:ss */ dateFormat?: string /** * commitID，如果为true，则表示禁用，不显示 * 默认：打包分支，最后一次提交commitID */ commitID?: string | true /** * 版本号，如果为true，则表示禁用，不显示 * 默认: 打包时间，格式取决于 dateFormat */ verion?: string | true /** * 版本描述，如果为true，则表示禁用，不显示 * 默认: 最近三次commit内容，使用`、`隔开 */ description?: string | true /** * 扩展字段 * 默认 null */ extendInfo?: {[key in string]: string} } \",\"除了预设的信息外，我还新增了扩展信息的字段，方便面对更多需求。\",\"扩展之后的代码如下，主要是解析配置文件。\",\"import childProcess from 'child_process'; import { JSDOM } from 'jsdom'; import moment from 'moment'; export default (option) => { let { dateFormat = `YYYY.MM.DD.HH:mm:ss`, commitID, verion, description, extendInfo = {}, root = 'body' } = option ?? {} return { name: 'vate-plugin-add-commit-info', transformIndexHtml (html) { const dom = new JSDOM(html) const document = dom.window.document const container = document.querySelector(root) // 最后一次提交commit的ID if (commitID !== true) { commitID = commitID ? commitID : childProcess.execSync('git rev-parse --short HEAD', { encoding: 'utf-8' }) container?.setAttribute(\\\"commitID\\\", commitID.trim()); } // 版本信息，默认是当前打包的时间点 if (verion !== true) { container?.setAttribute(\\\"verion\\\", verion ?? moment(new Date())?.format(dateFormat)) } // 描述信息，默认最近三次的commit描述 if (description !== true) { description = description ? description : childProcess .execSync('git log -3 --pretty=\\\"%s\\\"', { encoding: 'utf-8' }) .trim() .split('\\\\n') .toString() container?.setAttribute(\\\"description\\\", description) } // 自定义扩展字段 if (extendInfo) { const keys = Object.keys(extendInfo) if (keys.length) { keys.map(key => container?.setAttribute(key, extendInfo[key])) } } return dom.serialize() } } } \",\"默认效果如下\",\"import { defineConfig } from 'vite' import react from '@vitejs/plugin-react' import addCommitInfo from 'vite-plugin-add-commit-info'; // https://vitejs.dev/config/ export default defineConfig({ plugins: [ addCommitInfo(), react() ] }) \",\"image.png\",\"当使用配置时效果如下\",\"import { defineConfig } from 'vite' import react from '@vitejs/plugin-react' import addCommitInfo from 'vite-plugin-add-commit-info'; // https://vitejs.dev/config/ export default defineConfig({ plugins: [ addCommitInfo({ root: '#root', description: 'test' }), react() ] }) \",\"image.png\"]},\"297\":{\"h\":\"最后\",\"t\":[\"我已经开源了，感兴趣的小伙伴可以下载体验一番。\",\"npm地址：https://www.npmjs.com/package/vite-plugin-add-commit-info\",\"github地址：https://github.com/mmdctjj/vite-plugin-add-commit-info\",\"今天的分享就到这了，文章中有纰漏的地方欢迎指正。\"]},\"298\":{\"c\":[\"前端\"]},\"299\":{\"c\":[\"JavaScript\",\"Vite\"]},\"300\":{\"h\":\"🚀两个简单的自定义插件，探究Vite的插件机制\",\"t\":[\"文章首发公众号：萌萌哒草头将军，最近群里有抽奖，送出五本书，群里目前已经快20位小伙伴了，概率很大，感兴趣的小伙伴关注后联系我即可入群。个人联系方式：SunBoy_mmdctjj\",\"阅读更多文章点这里\"]},\"301\":{\"h\":\"🚀 Vite 插件机制\",\"t\":[\"Vite 的插件机制是基于 Rollup 的插件机制实现的，但是又进行了一些扩展。Vite 的插件机制是通过钩子函数实现的，当 Vite 运行时，会通过钩子函数调用插件中的方法，插件可以在这些方法中干预 Vite 的构建过程。\",\"我们主要讨论插件的机制，API 详细请看官网介绍\",\"通用的钩子：https://cn.vitejs.dev/guide/api-plugin.html#universal-hooks\",\"Vite 独有的钩子：https://cn.vitejs.dev/guide/api-plugin.html#vite-specific-hooks\",\"下面我们看看插件的机制原理。\"]},\"302\":{\"h\":\"🚗 Rollup 插件机制\",\"t\":[\"Rollup 的插件机制实现主要基于两点:\",\"Rollup 维护了各个插件接口的 Hook 列表,插件可以向这些列表中添加回调函数。\",\"在执行对应过程时,Rollup 会依次触发这些 Hook 列表中的回调函数。\",\"const hookLists = { load: [] // load hook 列表 } function addHook(hookName, hook) { hookLists[hookName].push(hook) // 向 hook 列表中添加回调函数 } function load(id) { for (const hook of hookLists.load) { // 触发所有 load 钩子函数 const result = hook(id) // 调用钩子函数 if (result) return result // 使用第一个结果并返回 } } \",\"插件可以通过 Rollup 提供的 addHook 方法相对应的 Hook 列表中添加回调函数:\",\"export function myPlugin() { addHook('load', id => { // 向 load 列表添加回调函数 // ... }) } \"]},\"303\":{\"h\":\"🚗 Vite 的巧妙之处\",\"t\":[\"Vite 主要将用户插件排序，然后和内置的插件配置合并，传递给了 Rollup 打包。\",\"关键的部分源码如下：\",\"// vite/node/config.ts export async function resolveConfig() { // ... // resolve plugins const rawUserPlugins = ( (await asyncFlatten(config.plugins || [])) as Plugin[] ).filter(filterPlugin) const [prePlugins, normalPlugins, postPlugins] = sortUserPlugins(rawUserPlugins) // run config hooks const userPlugins = [...prePlugins, ...normalPlugins, ...postPlugins] // ... } \",\"// vite/node/build.ts export async function build() { const config = await resolveConfig( inlineConfig, 'build', 'production', 'production', ) //... const plugins = ( ssr ? config.plugins.map((p) => injectSsrFlagToHooks(p)) : config.plugins ) as Plugin[] const rollupOptions: RollupOptions = { context: 'globalThis', preserveEntrySignatures: ssr ? 'allow-extension' : libOptions ? 'strict' : false, cache: config.build.watch ? undefined : false, ...options.rollupOptions, input, plugins, external, onwarn(warning, warn) { onRollupWarning(warning, warn, config) }, } // ... // write or generate files with rollup const { rollup } = await import('rollup') bundle = await rollup(rollupOptions) // ... } \",\"Vite 使用插件时，需要将插件放入 plugins 的数组中如下：\",\"image.png\"]},\"304\":{\"h\":\"🚀 实践得真知\",\"t\":[\"接下来我们自定义几个插件，感受下 Vite 的插件机制。\",\"写这几个插件是为了理解插件机制，官方已经提供了相关的配置或者现成的插件\"]},\"305\":{\"h\":\"🚗 自动切换端口，默认 8080\",\"t\":[\"Vite 默认的端口不是 8080了，有点不太习惯，所以自己写个插件自动切换端口。\",\"import net from 'net' function getNextPort(port: number) { return new Promise((resolve) => { const server = net.createServer() server.unref() server.on('error', () => { resolve(getNextPort(port + 1)) }) server.listen(port, () => { server.close(() => { resolve(port) }) }) }) } function autoSwitchPortPlugin() { let port = 8080 return { name: 'auto-switch-port', async configResolved(config: any) { port = await getNextPort(port) as number config.server.port = port }, } } export default autoSwitchPortPlugin \",\"image.png\"]},\"306\":{\"h\":\"🚗 为文件加上版本号\",\"t\":[\"由于这个操作是转换 index.html文件，所以需要使用专用钩子transformIndexHtml\",\"import { createHash } from \\\"crypto\\\" export default function autoVersionPlugin() { return { name: 'auto-version', async transformIndexHtml(html: string) { const hash = createHash('md5').update(html).digest('hex') return html.replace(/(src|href)=\\\"(.*?)\\\"/g, `$1=\\\"$2?v=${hash}\\\"`) }, } } \",\"image.png\"]},\"307\":{\"h\":\"🎉 总结\",\"t\":[\"Vite 插件机制主要在整个构建过程的不同时机暴露出钩子函数供开发者灵活自定义构建过程。所以理解构建流程，才能更好的开发一个优秀的插件。\",\"好了今天的分享就到这了，如果文中有纰漏的地方，欢迎指正！！！\"]},\"308\":{\"c\":[\"前端\"]},\"309\":{\"c\":[\"JavaScript\",\"Vite\"]},\"310\":{\"h\":\"🚀🚀vue3自定义指令实践\",\"t\":[\"文章首发公众号：萌萌哒草头将军，欢迎关注\"]},\"311\":{\"h\":\"🚀 关键接口介绍\",\"t\":[\"最近想体验下自定义指令功能，看了看文档和 vue2 差异不大，语法如下：\",\"const myDirective = { // 在绑定元素的 attribute 前 // 或事件监听器应用前调用 created(el, binding, vnode, prevVnode) { // 下面会介绍各个参数的细节 }, // 在元素被插入到 DOM 前调用 beforeMount(el, binding, vnode, prevVnode) {}, // 在绑定元素的父组件 // 及他自己的所有子节点都挂载完成后调用 mounted(el, binding, vnode, prevVnode) {}, // 绑定元素的父组件更新前调用 beforeUpdate(el, binding, vnode, prevVnode) {}, // 在绑定元素的父组件 // 及他自己的所有子节点都更新后调用 updated(el, binding, vnode, prevVnode) {}, // 绑定元素的父组件卸载前调用 beforeUnmount(el, binding, vnode, prevVnode) {}, // 绑定元素的父组件卸载后调用 unmounted(el, binding, vnode, prevVnode) {} } \",\"起初，最大的痛点是需要手动创建 dom ，然后插入 el 中。\",\"const loadingDom = document.createElement('div', {calss: 'loading'}) el.append(loadingDom) \",\"这样好难受啊，我不想写原生 dom ，能不能写个组件渲染到指令里呢？\",\"我想起了我之前看到的几个 vue 接口，\",\"h函数，也就是 vue 提供的创建 vNode 的函数\",\"render函数：将 vNode 渲染到 真实 dom 里的函数\",\"h函数用法如下：\",\"// 完整参数签名 function h( type: string | Component, props?: object | null, children?: Children | Slot | Slots ): VNode \",\"例如：\",\"import { h } from 'vue' const vnode = h('div', { class: 'container' }, [ h('h1', 'Hello, Vue 3'), h('p', 'This is a paragraph') ]) \",\"我们使用h函数创建了一个 VNode，它表示一个包含 div、h1、p 的 DOM 结构。其中，div 的 class 属性为 container\"]},\"312\":{\"h\":\"🚀 自定义 loading 组件\",\"t\":[\"然而，当我使用 props 为组件传递值时，发现是徒劳的。\",\"import Loading from './components/Loading.vue'; cconst option = { msg: '一大波僵尸来袭', loading: true } const vnode = h( Loading, { id: 'loading', ...option} ) \",\"仅仅如下图一样，我以为是给组件的 props，实际上是 dom 的 props。\",\"image.png\",\"此时我们的组件只能通过 $attrs 来获取这些 props 了，如下：\",\"<template> <div class=\\\"loading\\\"> <div></div> <span v-if=\\\"$attrs.msg !== false\\\">{{ $attrs.msg }}</span> </div> </template> \",\"接着我们给组件实现 loading 动画，当然你也可以直接使用组件库的 loading 组件。\",\"我的实现如下：\",\"<style> @keyframes identifier { 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } .loading { height: 100px; width: 100%; } .loading div { width: 50px; height: 50px; border-radius: 50%; border: 2px solid green; margin: 25px auto; border-top: none; border-left: none; animation: identifier 1s infinite linear; } </style> \"]},\"313\":{\"h\":\"🚀 自定义指令\",\"t\":[\"接下来我们封装自定义指令。\",\"我们的思路是：\",\"mounted 阶段，如果是 true，那么渲染组件，否则什么都不做。\",\"update 阶段，如果 true 则重新渲染组件，如果 false 则渲染 vnode\",\"为了可以应对更多场景，我们期望可以配置加载中的提示信息，不配置使用默认值，如果是 false ，那么仅展示 loading 图。所以参数类型如下：\",\"interface Props {loading: boolean, msg?: string | false} v-loading: boolean | Props \",\"由于可能是布尔值，也可能是对象，我们需要初始化配置参数\",\"function formatOption (value: boolean | Props) { const loading = typeof value === 'boolean' ? value : value.loading const option = typeof value !== 'boolean' ? Object.assign(defaultOption, value) : { loading, ...defaultOption } return { loading, option } } \",\"接着再 mounted 阶段获取格式化后的 loading 和 option，如果为 true 则直接渲染组件。\",\"const vLoading: Directive<HTMLElement, boolean | Props> = { mounted(el, binding) { const { loading, option } = formatOption(binding.value) loading && renderLoading(el, option) } } function renderLoading (el: HTMLElement, option: Props) { const vnode = h( Loading, { id: 'loading', ...option} ) el.removeChild(el.children[0]) render(vnode, el) } \",\"如果进入 update 阶段，则根据情况选择渲染 laoding 组件还是 vnode。\",\"const vLoading: Directive<HTMLElement, boolean | Props> = { mounted(el, binding) { const { loading, option } = formatOption(binding.value) loading && renderLoading(el, option) }, updated(el: HTMLElement, binding, vnode) { const { loading, option } = formatOption(binding.value) if (loading) { renderLoading(el, option) } else { renderVNode(el, vnode) } }, } function renderLoading (el: HTMLElement, option: Props) { const vnode = h( Loading, { id: 'loading', ...option} ) el.removeChild(el.children[0]) render(vnode, el) } function renderVNode (el: HTMLElement, vnode: VNode) { el.querySelector('#loading')?.remove() render(vnode, el) } \",\"我们验证下功能：\",\"默认功能\",\"const loading = ref(true) setTimeout(() => loading.value = false, 2000) </script> <template> <div style=\\\"width: 300px\\\" v-loading=laoding> <h1>加载成功</h1> </div> </template> \",\"laoding1.gif\",\"自定义文本\",\"<template> <div style=\\\"width: 300px\\\" v-loading=\\\"{ loading, msg: '一大波僵尸来袭' }\\\"> <h1>加载成功</h1> </div> </template> \",\"laoding2.gif\",\"不展示文本\",\"<template> <div style=\\\"width: 300px\\\" v-loading=\\\"{ loading, msg: false }\\\"> <h1>加载成功</h1> </div> </template> \",\"laoding3.gif\"]},\"314\":{\"h\":\"🎉 最后\",\"t\":[\"今天的分享就到这了，如果有问题，可以评论区告诉我，我会及时更正。\",\"以下是完整的代码。\",\"<template> <div class=\\\"loading\\\"> <div></div> <span v-if=\\\"$attrs.msg !== false\\\">{{ $attrs.msg }}</span> </div> </template> <script lang=\\\"ts\\\"> export default { } </script> <style> @keyframes identifier { 100% { -webkit-transform: rotate(360deg); transform: rotate(360deg); } } .loading { height: 100px; width: 100%; } .loading div { width: 50px; height: 50px; border-radius: 50%; border: 2px solid green; margin: 25px auto; border-top: none; border-left: none; animation: identifier 1s infinite linear; } </style> \",\"<script setup lang=\\\"ts\\\"> import { Directive, VNode, h, ref, render } from 'vue'; import Loading from './components/Loading.vue'; const defaultOption: {msg?: string | false} = { msg: '努力加载中' } interface Props {loading: boolean, msg?: string | false} function formatOption (value: boolean | Props) { const loading = typeof value === 'boolean' ? value : value.loading const option = typeof value !== 'boolean' ? Object.assign(defaultOption, value) : { loading, ...defaultOption } return { loading, option } } function renderLoading (el: HTMLElement, option: Props) { const vnode = h( Loading, { id: 'loading', ...option} ) el.removeChild(el.children[0]) render(vnode, el) } function renderVNode (el: HTMLElement, vnode: VNode) { el.querySelector('#loading')?.remove() render(vnode, el) } const vLoading: Directive<HTMLElement, boolean | Props> = { mounted(el, binding) { const { loading, option } = formatOption(binding.value) loading && renderLoading(el, option) }, updated(el: HTMLElement, binding, vnode) { const { loading, option } = formatOption(binding.value) if (loading) { renderLoading(el, option) } else { renderVNode(el, vnode) } }, } const loading = ref(true) setTimeout(() => loading.value = false, 2000) </script> <template> <div style=\\\"width: 300px\\\" v-loading=\\\"{ loading, msg: '一大波僵尸来袭' }\\\"> <h1>加载成功</h1> </div> </template> \"]},\"315\":{\"c\":[\"前端\"]},\"316\":{\"c\":[\"JavaScript\",\"Vue\"]},\"317\":{\"h\":\"Vue3使用hook封装媒体查询和事件监听，使Vue的开发更加丝滑🚀🚀🚀\",\"t\":[\"文章同步在公众号：萌萌哒草头将军，欢迎关注\",\"js中媒体查询的主要方法是使用window对象下的matchMedia对象，查询语句和CSS媒体查询一样。\"]},\"318\":{\"h\":\"封装媒体查询\",\"t\":[\"首先我们先看监听系统主题色的例子\",\"首先创建媒体查询对象\",\"根据查询结果设置对应的值\",\"然后建立监听事件，并且在退出时取消监听\",\"export const useTheme = () => { // 首先创建媒体查询对象 const themeMedia = matchMedia(\\\"(prefers-color-scheme: light)\\\") // 根据查询结果设置对应的值 const theme = ref(themeMedia.matches ? 'light' : 'dark') const onChange = (e: MediaQueryListEvent) => theme.value = e.matches ? 'light' : 'dark' watchEffect((onCleanup) => { // 然后建立监听事件 themeMedia.addEventListener('change', onChange) // 并且在退出时取消监听 onCleanup(() => themeMedia.removeEventListener('change', onChange)) }) return theme; } \",\"我们测试下\",\"const theme = useTheme() watchEffect(() => console.log(theme.value, 'theme')) \",\" 如果我们其他查询查询，我们需要重新设置新的值，所以，接下来我们封装一个更通用的媒体查询hook，如下，\",\"export const useMatchMedia = (query: string) => { const themeMedia = matchMedia(query) const match = ref(themeMedia.matches) const onChange = (e: MediaQueryListEvent) => match.value = e.matches watchEffect((onCleanup) => { themeMedia.addEventListener('change', onChange) onCleanup(() => themeMedia.removeEventListener('change', onChange)) }) return match } \",\"这个例子里，我们不再对特定的媒体查询值做处理，同时，我们将查询语句作为动态变量，将结果处理交给开发者。\",\"我们使用通用的hook重写监听系统主题色的hook，如下：\",\"export const useTheme = () => { const theme = useMatchMedia(\\\"(prefers-color-scheme: light)\\\") const theme = ref(themeMedia.matches ? 'light' : 'dark') return theme ? 'light' : 'dark' } \",\"是不是这样更简洁了。\"]},\"319\":{\"h\":\"封装事件监听\",\"t\":[\"接下来，我们再看第二个简单的例子，监听网络状态。\",\"监听网络状态，主要通过监听navigator.onLine的变化，值的变化可以通过addEventListener方法，\",\"有了封装媒体查询的例子，我们首先会想到封装事件监听的值的变化可以通过addEventListener方法，成为一个通用的钩子函数。如下：\",\"export const useEventListener = <K extends keyof WindowEventMap>( target: K, listener: (ev: WindowEventMap[K]) => any ) => { watchEffect((onCleanup) => { addEventListener(target, listener) onCleanup(() => removeEventListener(target, listener)) }) } \",\"此时，我们就可以这样封装监听网络状态的hook了\",\"export const useNetWork = () => { const isOnLine = ref(navigator.onLine) const setOnLine = () => isOnLine.value = true const setOffLine = () => isOnLine.value = false useEventListener('online', setOnLine) useEventListener('offline', setOffLine) return isOnLine } \",\"我们测试下\",\"const isOnLine = useNetWork() watchEffect(() => console.log(isOnLine.value, 'isOnLine')) <h1 v-if=\\\"isOnLine\\\">onLine</h1> <h1 v-else>offLine</h1> \",\" 接下来我们测试下其他的监听事件，比如监听scroll事件。\",\"useEventListener('scroll', () => console.log('scroll')) \",\"scroll.gif\",\"功能是正常的，但是顺理成章，我们还需要写一个防抖函数\",\"export const debounce = ( fn: (...args: any[]) => void, delay: number ) => { let timer: NodeJS.Timeout return (...args: any[]) => { if (timer) clearTimeout(timer) timer = setTimeout(() => { fn.apply(this, args) }, delay) } } \",\"useEventListener('scroll', debounce(() => console.log('scroll'), 200)) \",\"scroll2.gif\",\"好了今天的分享到这了，如果文章中有纰漏的地方欢迎指正，我及时修改，感谢你的阅读\",\"觉得文章还不错可以关注我的公众号，或者点个赞再走吧，十分感谢！！！\"]},\"320\":{\"c\":[\"前端\"]},\"321\":{\"c\":[\"JavaScript\",\"Vue\"]},\"322\":{\"h\":\"Vue3使用hook封装常见的几种异步请求函数场景，让开发更加丝滑🚀🚀🚀\",\"t\":[\"文章同步在公众号：萌萌哒草头将军，欢迎关注\",\"今天继续上次的内容，使用hook封装几种的异步请求函数场景。\"]},\"323\":{\"h\":\"🚀 立即请求函数\",\"t\":[\"我们期望的场景是，\",\"初始化一个请求函数，然后根据初始参数，立即发送请求\",\"返回请求结果，并且返回请求回调函数，方便我们根据新的参数再次调用\",\"要求返回值包含加载中状态，错误信息以及正常的数据类型。\",\"我的实现过程如下：\",\"定义具体的数据返回值签名\",\"interface Fetch<T> { loading: boolean, value?: T, // 具体的返回类型是泛型 error?: string } \",\"完整的签名如下\",\"export declare function useFetch <T, Params>( fn: (args: Params) => Promise<T>, initParams: Params ): [Fetch<T>, (params: Params) => Promise<unknown>] \",\"函数实现如下：\",\"export const useFetch = <T, Params>( fn: (args: Params) => Promise<T>, initParams: Params ): [Fetch<T>, (params: Params) => Promise<T>] => { // 定义基础的数据格式 const data = reactive<Fetch<T>>({ loading: true, value: undefined, error: undefined }) as Fetch<T> // 这里会报错：T类型无法赋值给UnwrapRef<T>类型 // 我不懂为啥，UnwrapRef是vue的深层响应式类型的声明 // 这里导致我无法默认的类型赋值，不符合直觉，可能是我ts太菜了 // 懂的大佬评论区带带我吧 // 定义请求回调 const callback = (params: Params): Promise<T> => new Promise((resolve, reject) => { data.loading = true fn(params) .then(result => { data.value = result as any resolve(result) }) .catch(error => { data.error = error reject(error) }) .finally(() => data.loading = false) }) // 立即执行 watchSyncEffect(() => { callback(initParams) }) return [data, callback] } \",\"我们验证下\",\"<script setup lang=\\\"ts\\\"> import { reactive } from 'vue'; import { useFetch } from './hooks/index'; const fn = () => new Promise((resolve) => { setTimeout(()=> resolve({data: [], msg: '', code: 200}), 1000) }) const [data, fetch] = useFetch<unknown, object>(fn, {}) </script> <template> <h4>公众号：萌萌哒草头将军</h4> <!-- 加载中时用css禁用按钮 --> <button :style=\\\"{'pointer-events': data.loading ? 'none' : 'auto'}\\\" @click=\\\"fetch({})\\\" >{{ data.loading ? 'laoding...' : 'fetch' }}</button> <h1 v-if=\\\"data.loading\\\">loading...</h1> <h1 v-else>{{data.value}}</h1> </template> \",\"fetch.gif\",\"页面刷新后立即发出请求了!\"]},\"324\":{\"h\":\"🚀 手动请求函数\",\"t\":[\"我们期望的场景是，\",\"初始化一个请求函数\",\"返回请求回调函数，方便我们调用\",\"要求返回值包含加载中状态，错误信息以及正常的数据类型\",\"这个的实现和上面类似，我们不需要初始参数和类型，也不用立即执行，\",\"完整的签名如下\",\"export declare function useFetch <T>( fn: (args: unknown) => Promise<T> ): [Fetch<T>, (params: unknown) => Promise<T>] \",\"实现如下：\",\"export const useFetchFn = <T>( fn: (args: unknown) => Promise<T> ): [Fetch<T>, (params: unknown) => Promise<T>] => { const data = reactive<Fetch<T>>({ loading: false, // 默认为false value: undefined, error: undefined }) as Fetch<T> const callback = (params: unknown): Promise<T> => new Promise((resolve, reject) => { data.loading = true fn(params) .then(result => { data.value = result as any resolve(result) }) .catch(error => { data.error = error reject(error) }) .finally(() => data.loading = false) }) return [data, callback] } \",\"验证如下：\",\"<script setup lang=\\\"ts\\\"> import { reactive } from 'vue'; import { useFetchFn } from './hooks/index'; const fn = () => new Promise((resolve) => { setTimeout(()=> resolve({data: [], msg: '', code: 200}), 1000) }) const [data, fetch] = useFetchFn<unknown>(fn) </script> <template> <h4>公众号：萌萌哒草头将军</h4> <!-- 加载中时用css禁用按钮 --> <button :style=\\\"{'pointer-events': data.loading ? 'none' : 'auto'}\\\" @click=\\\"fetch({})\\\" >{{ data.loading ? 'laoding...' : 'fetch' }}</button> <h1 v-if=\\\"data.loading\\\">loading...</h1> <h1 v-else>{{data.value}}</h1> </template> \",\"fetchfn.gif\",\"页面刷新后没有发出请求，点击按钮之后才发出请求!\"]},\"325\":{\"h\":\"🚀 自动请求函数\",\"t\":[\"我们期望的场景是，\",\"初始化一个请求函数，然后根据初始参数，立即发送请求\",\"当参数发生变化时，自动根据最新参数发生请求\",\"要求返回值包含加载中状态，错误信息以及正常的数据类型。\",\"这个的实现和立即请求函数类似，只需要监听参数的变化，\",\"完整的签名如下\",\"export declare function useFetch <T, Params>( fn: (args: Params) => Promise<T>, initParams: Params ): Fetch<T> \",\"实现如下：\",\"export const useAutoFetch = <T, Params>( fn: (args: Params) => Promise<T>, initParams: Params ): Fetch<T> => { const data = reactive<Fetch<T>>({ loading: true, value: undefined, error: undefined }) as Fetch<T> const callback = (params: Params): Promise<T> => new Promise((resolve, reject) => { data.loading = true fn(params) .then(result => { data.value = result as any resolve(result) }) .catch(error => { data.error = error reject(error) }) .finally(() => data.loading = false) }) // 如果不需要立即执行，可没有这步 const effects = watchSyncEffect(() => { callback(initParams) }) // 自动监听参数变化 const effects = watch([initParams], () => callback(initParams)) // 卸载页面时，关闭监听 onUnmounted(() => effects()) return data } \",\"我们验证下功能\",\"<script setup lang=\\\"ts\\\"> import { reactive, watch } from 'vue'; import { useAutoFetch } from './hooks/index'; const fn = () => new Promise((resolve) => { setTimeout(()=> resolve({data: [], msg: '', code: 200}), 1000) }) const params = reactive({ age: 9 }) const data = useAutoFetch<unknown, object>(fn, params) watch(params, () => console.log(params)) </script> <template> <h4>公众号：萌萌哒草头将军</h4> <div>{{ params.age }}</div> <!-- 加载中时用css禁用按钮 --> <button :style=\\\"{'pointer-events': data.loading ? 'none' : 'auto'}\\\" @click=\\\"() => params.age++\\\" >{{ data.loading ? 'laoding...' : 'change params' }}</button> <h1 v-if=\\\"data.loading\\\">loading...</h1> <h1 v-else>{{data.value}}</h1> </template> \",\"auto.gif\",\"每次当我们改变参数时自动发送请求。\",\"今天的分享就这些，欢迎大家指正不足的地方，十分感谢\"]},\"326\":{\"c\":[\"前端\"]},\"327\":{\"c\":[\"JavaScript\",\"Vue\"]},\"328\":{\"h\":\"Vue3优雅的监听localStorage变化\",\"t\":[\"文章同步在公众号： 萌萌哒草头将军\",\"最近公众号有🎁，欢迎关注了解\",\"最近在研究框架，也仔细用了Vue3一些功能，今天分享一次我的实践：\",\"Vue3如何监听localStorage的变化。\",\"🎉干货满满，React设计原理(一)：藏在源码里的紧箍咒，几个容易混淆的变量🎉\",\"🎉干货满满，React设计原理(二)：藏在源码里的两个圈，重要的链表结构和双缓存技术🎉\"]},\"329\":{\"h\":\"💡 为什么要这样做？\",\"t\":[\"原生的localStorage只能监听同源地址下不同页面的localStorage变化，作为单页面应用，显然不实用。所以我打算自定义一个hook监听localStorage的变化。\"]},\"330\":{\"h\":\"💎 思路\",\"t\":[\"首先我们需要重写localStorage下的所有方法，这样在每个方法被使用的时候就可以被监听到了。\",\"此时就需要一个事件机制，用于传递消息。\",\"在Vue3移除了$on、$emit事件接口后，我们可以借助第三方库实现：mitt、tiny-emitter.\",\"不过我打算使用自己实现的中介者模式作为通信方法。\"]},\"331\":{\"h\":\"💎 实现\"},\"332\":{\"h\":\"🚗 实现 中介者模式\",\"t\":[\"// mediator.ts export interface MediatorProps { uuid?: number; publish?: (topic: string, ...args: unknown[]) => void; subscribe?: (topic: string, callback: (...args: unknown[]) => void) => void; } const mediator = (function () { let topics = [], uuid = 0; function subscribe(topic: string, callback: (...args: unknown[]) => void) { uuid++; topics[topic] = topics[topic] ? [...topics[topic], { callback, uuid }] : [{ callback, uuid }]; } function publish(topic: string, ...args: unknown[]) { if (topics[topic]) { topics[topic].map((item) => item.callback(...args)); } } return { install: function (obj: MediatorProps) { obj.uuid = uuid; obj.publish = publish; obj.subscribe = subscribe; return obj; }, }; })(); export default mediator; \"]},\"333\":{\"h\":\"🚗 重写 localStorage\",\"t\":[\"// localStorage.ts import mediator from \\\"./mediator\\\"; const keys: string[] = []; const createMediator = () => mediator.install({}); const sub = createMediator(); export const $localStorage = { getItem: (key: string) => { return window.localStorage.getItem(key); }, setItem: (key: string, value: any) => { // 防止重复发布 if (!keys.includes(key)) keys.push(key); // 被修改就发布事件 sub.publish(key, value); window.localStorage.setItem(key, value); }, clear: () => { // 被删除就每个key发布事件 keys.map((key) => sub.publish(key, undefined)); // 发布后清空记录key的数组 keys.length = 0; window.localStorage.clear(); }, removeItem: (key: string) => { keys.splice(keys.indexOf(key), 1); // 被移除就发布 undefined sub.publish(key, undefined); window.localStorage.removeItem(key); }, key: window.localStorage.key, length: window.localStorage.length, }; \"]},\"334\":{\"h\":\"🚗 实现 useStorage hook\",\"t\":[\"// useStorage.ts import { ref } from \\\"vue\\\"; import mediator from \\\"./mediator\\\"; const createMediator = () => mediator.install({}); export const useStorage = (key: string) => { const string = ref(null); const sub = createMediator(); sub.subscribe(key, (value) => string.value = value); return string; }; \"]},\"335\":{\"h\":\"💎 测试\"},\"336\":{\"h\":\"🚗 使用 localStorage\",\"t\":[\"// One.vue // 使用localStorage import { watch } from \\\"vue\\\"; import { useStorage } from \\\"./hook\\\"; const key = useStorage(\\\"yourKey\\\"); watch([key], (a) => console.log(a)); \"]},\"337\":{\"h\":\"🚗 监听 localStorage 变化\",\"t\":[\"// Two.vue // 监听localStorage <script setup lang=\\\"ts\\\"> import { ref } from \\\"vue\\\"; import { localStorage } from \\\"./hook\\\"; const count = ref(0); </script> <template> <div> <button type=\\\"button\\\" @click=\\\"$localStorage.setItem('a', count++);\\\" > count is {{ count }} </button> </div> </template> \"]},\"338\":{\"h\":\"🚗 结果\",\"t\":[\"down33.gif\",\"好了今天的分享的就到了，希望今天的分享可以帮助到你！\",\"源码点这里：https://codesandbox.io/p/sandbox/hardcore-hodgkin-qp5lwu\"]},\"339\":{\"c\":[\"前端\"]},\"340\":{\"c\":[\"JavaScript\",\"Vue\"]},\"341\":{\"h\":\"vue组件通信总结\",\"t\":[\"11月份的面试越来越觉得自己学的不够踏实和深入。现在实习了有空总结下\",\"京东前端实习一道面试题：vue中组件通信接口有哪些，除了props和$emit？\",\"注意是接口，我说了vuex和localStorage，立马就被否决了\"]},\"342\":{\"h\":\"一、父子组件通信\"},\"343\":{\"h\":\"1.props和$emit\",\"t\":[\"props最常见的父子通信接口，但是props是单向数据流的形式：父级 prop 的更新会向下流动到子组件中，但是反过来则不行\",\"此时需要借助vue提供的事件监听机制来完成子组件向父组件数据流动更新的功能。 在子组件使用$emit定义监听事件名称，在父组件使用v-on监听该事件，在事件中改变父组件的状态。\",\"// father.vue <template> <div> <Children :name=\\\"name\\\" @close=\\\"closeChildren\\\"><Children /> </div> </template> <script> import Children from './children.vue' export default { data(){ return { name: 'vue组件通信总结' } }, components: { Children }, methods: { closeChildren() { // todo } } }; </script> \",\"// children.vue <template> <div> <h3>{{name}}</h3> <el-button v-if=\\\"closeBtn\\\" circle size=\\\"mini\\\" class=\\\"close_btn\\\" icon=\\\"el-icon-close\\\" @click=\\\"close\\\" ></el-button> </div> </template> <script> export default { props: [\\\"name\\\"], methods: { close() { this.$emit(\\\"close\\\"); } } }; </script> \"]},\"344\":{\"h\":\"2. p a r e n t 和 parent和 p a re n t 和 children或者$refs\"},\"345\":{\"h\":\"1) $parent\",\"t\":[\"$parent用来访问父组件实例，通常父组件都是唯一确定的\",\"// children.vue <script> export default { created(){ console.log(this.$parent.name) // ==> vue组件通信总结 this.$parent.name='mmdjj' console.log(this.$parent.name) // ==> mmdjj }, }; </script> \"]},\"346\":{\"h\":\"2) $children\",\"t\":[\"$children用来访问子组件实例，要知道一个组件的子组件可能是不唯一的，所以它的返回值是数组.\",\"// father.vue <script> export default { created(){ console.log(this.$children) // ==> [ VueComponent ] this.$children.forEach((VueComponent)=>{ if(VueComponent.name == \\\"你知道的组件名称\\\"){ // todo } }) }, }; </script> \"]},\"347\":{\"h\":\"3) $refs\",\"t\":[\"children的缺点是无法确定子组件的顺序，也不是响应式的。所以如果你确切的知道要访问的子组件建议使用refs。\",\"refs需要使用ref属性在子组件上设置标识，然后通过this.refs.refName访问。\",\"// father.vue <template> <div> <Children ref=\\\"child1\\\"><Children /> </div> </template> <script> import Children from './children.vue' export default { data(){ return { name: '我是父组件name' } }, mounted(){ console.log(this.$refs.child1.name) // ==>我是父组件name123 } }; </script> \",\"// children.vue <script> export default { data(){ return { name: '我是子组件name' } }, mounted(){ this.name = this.$parent.name + '123'; } }; </script> \",\"注意：ref属性作为组件属性时，访问的是根组件的实例；作为dom属性时，访问的是dom信息\",\"// father.vue <template> <div> <Children ref=\\\"child1\\\"><Children /> </div> </template> <script> import Children from './children.vue' export default { data(){ return { name: 'mmdjj', age: 18, sex: 'man' } } }; </script> \"]},\"348\":{\"h\":\"3.inheritAttrs和$attrs\"},\"349\":{\"h\":\"1）inheritAttrs\",\"t\":[\"这是@2.4新增的属性和接口。inheritAttrs属性控制子组件html属性上是否显示父组件的提供的属性\",\"// father.vue <template> <div id=\\\"father\\\" > <Children :name=\\\"name\\\" :age=\\\"age\\\" :sex=\\\"sex\\\" ><Children /> </div> </template> <script> import Children from './children.vue' export default { data(){ return { name: 'mmdjj', age: 18, sex: 'man' } } }; </script> \",\"浏览器渲染的时候，默认会把父组件写在子组件的属性一起渲染出来，它是这样的\",\"<div id=\\\"father\\\" name=\\\"mmdjj\\\" age=\\\"18\\\" sex=\\\"man\\\" > ... </div> \",\"从@2.4开始，在子组件默认添加inheritAttrs选项，并且默认为false，来隐藏这些属性，如果你期望这些属性是显示在根html元素上，你只需要将inheritAttrs的值指定为true\",\"// children.vue <script> export default { inheritAttrs: true }; </script> \",\"此时渲染之后式这样的\",\"<div id=\\\"father\\\"> ... </div> \"]},\"350\":{\"h\":\"2）$attrs\",\"t\":[\"$attrs包含所有未在props中声明的父组件传递的属性\",\"attrs简单的说就是props的加强版，因为当父组件提供props的属性十分多时，逐个在子组件显式的声明出来有时也是比较费事的。但是使用attrs就可以达到事半功倍的效果，看下面的例子\",\"// father.vue <template> <div id=\\\"father\\\" > <Children :name=\\\"name\\\" :age=\\\"age\\\" :sex=\\\"sex\\\" ><Children /> </div> </template> \",\"// children.vue <script> export default { props: [\\\"name\\\"] mounted(){ // 因为在props中声明了name，所以打印结果中没有name这个属性 console.log(this.$attrs) // => { \\\"age\\\": 18, \\\"sex\\\": \\\"man\\\" } } }; </script> \",\"$attrs还有个妙用就是将父组件所有未在props声明的属性通过v-bind传给自己的内部子组件（将父亲的属性通过自己传给自己的儿子），也就是说它可以作为隔代组件通信的桥梁，例子如下\",\"// father.vue <template> <div> <Children :name=\\\"name\\\" :age=\\\"age\\\" :sex=\\\"sex\\\" ><Children /> </div> </template> \",\"// children.vue <template> <div> <Child v-bind=\\\"$attrs\\\" ><Child /> </div> </template> \",\"// child.vue <script> export default { props: [\\\"name\\\"] mounted(){ console.log(this.$attrs) // => { \\\"age\\\": 18, \\\"sex\\\": \\\"man\\\" } } }; </script> \",\"下面的所有方法的分类不是唯一的，只是我比较推荐的分类方式，比如$root和依赖注入他们既适合兄弟组件，也适合隔代组件\"]},\"351\":{\"h\":\"二、兄弟组件通信\"},\"352\":{\"h\":\"1.$root\",\"t\":[\"$root用来方位根实例属性\"]},\"353\":{\"h\":\"1）基本用法\",\"t\":[\"个人认为 root的适用性是最好的，比如前面父子组件通信你使用了parent或者children，但是由于需求的改变等等不得已原因，它们的关系已经不是父子组件了，此时，通信机制就不能不重新建立了。但是如果你一开始就使用了$root作为通信机制，那么就不存在这样的麻烦了。\",\"// children1.vue <script> export default { data(){ return { msg: \\\"hello\\\" } }, mounted(){ this.$root.msg = this.msg } }; </script> \",\"// children2.vue <script> export default { mounted(){ console.log(this.$root.msg) // => 'hello' } }; </script> \",\"确切的说$root方法使用于任何情况的组件通信，包括父子组件、兄弟组件、隔代组件通信，可以形象的把它理解成为它们共同的祖先\",\"这时候聪明的你肯定联想到了根组件，那个被叫做App.vue的家伙。好奇它和$root究竟是啥关系，看下面的代码\",\"// App.vue <script> export default { mounted(){ console.log(this.$root == this) // => ? } }; </script> \",\"实际上这个打印的结果是false，也就说$root也是App.vue的祖先\"]},\"354\":{\"h\":\"2）一个缺点\",\"t\":[\"$root也有它的缺点，官网中也提到了，它只适合通用化（就是不用动态更新的意思）的场景，如果想建立随着改变动态更新的数据，建议使用vuex\",\"// father.vue <script> import Child1 from \\\"@/components/children\\\"; export default { data() { return { name: \\\"123\\\", age: 23, say: \\\"hello\\\" }; }, beforeMount() { this.$root.testMeg = 'mmdjj'; }, components: { Child1 } }; </script> \",\"// Child1.vue <template> <div> {{$root.testMsg.name}} // 一直显示mmdjj </div> </template> <script> export default { mounted() { setTimeout(() => { this.$root.testMeg = \\\"welcome\\\"; console.log(this.$root.testMeg); // welcome }, 3000); } }; </script> \"]},\"355\":{\"h\":\"3）让它成为响应式\",\"t\":[\"不过你尝试着给$root传递一个响应式的对象，当对象中的数据改变时，其余使用这个属性的地方也会跟着改变，也就是说它就是响应式的了\",\"// father.vue <script> import Child1 from \\\"@/components/children\\\"; export default { data() { return { name: \\\"123\\\", age: 23, say: \\\"hello\\\", testMeg: { name: \\\"mmdjj\\\" } }; }, beforeMount() { this.$root.testMeg = this.testMeg; }, components: { Child1 } }; </script> \",\"// Child1.vue <template> <div> {{$root.testMsg.name}} // 刚开始显示mmdjj，三秒之后显示为welcome </div> </template> <script> export default { mounted() { setTimeout(() => { this.$root.testMeg.name = \\\"welcome\\\"; console.log(this.$root.testMeg.name); // welcome }, 3000); } }; </script> \"]},\"356\":{\"h\":\"2.eventBus\",\"t\":[\"eventBus并不是vue官方的名称，它是使用vue实例的$emit接口建立全局的事件监听机制，很多人巧妙的使用它来组件通信，这种思想来源于Android事件发布/订阅轻量级框架eventBus。但是这并不是vue最优的通信机制。\"]},\"357\":{\"h\":\"1创建\",\"t\":[\"本质就是实例化一个空vue实例\",\"// src/eventBus.js import Vue from \\\"vue\\\" const eventBus = new Vue() export default eventBus \",\"或者直接挂载到全局，连引入都可以省略\",\"// main.js import Vue from \\\"vue\\\" Vue.prototype.$eventBus = new Vue() \"]},\"358\":{\"h\":\"2.使用\",\"t\":[\"一般这种方式每个都会经历三个阶段，发起事件——>监听事件——>销毁事件\",\"发起\",\"// children1.vue // 这是挂载到全局的版本 <script>\\\\ export default { mounted(){ // 这是单独文件的版本（注意：引入省略了） eventBus.$emit(\\\"update\\\", this.msg) // 这是挂载到全局的版本 this.$eventBus.$emit(\\\"update\\\", this.msg) } }; </script> \",\"监听\",\"// children2.vue <script> export default { mounted(){ // 这是单独文件的版本（注意：引入省略了） eventBus.$on(\\\"update\\\", this.updateMsg(msg)) // 这是挂载到全局的版本 this.$eventBus.$on(\\\"update\\\", this.updateMsg(msg)) }, methods: { updateMsg(msg){ console.log(msg) // todo } } }; </script> \",\"销毁\",\"// children2.vue <script> export default { beforeDestroy(){ // 这是单独文件的版本（注意：引入省略了） eventBus.$off(\\\"update\\\") // 这是挂载到全局的版本 this.$eventBus.$off(\\\"update\\\") } }; </script> \"]},\"359\":{\"h\":\"这里需要特别强调的一点是当一个事件在多个组件里监听时，每个组件在销毁时连同事件也要销毁，不然它会在你看不到的地方继续执行而难以被发现，当然不管是不是在多个组件监听，在组件销毁时一起销毁监听事件不失为一种良好的编程习惯\"},\"360\":{\"h\":\"3.缺点\",\"t\":[\"看了前面的例子，你会发现，通信最关键的地方其实就在上面的updateMsg函数里，而这之外的所有的东西，都只是一种繁琐的铺垫，所以缺点也是显而易见的。另外对于多个监听的地方，你还需要手动关闭，还有一个被大家诟病的就是每个事件都必需起一个独一无二的名字，这对起名废的同学来说是灾难啊\"]},\"361\":{\"h\":\"4.替代vuex\",\"t\":[\"有人已经提供了一个方案使用eventBus替代vuex，这个方案为我们解决了前面提到的缺点，具体可以看这里\"]},\"362\":{\"h\":\"三、隔代组件通信\"},\"363\":{\"h\":\"1.provide和inject(依赖注入)\",\"t\":[\"依赖注入是在provide选项中提供要共享的数据，在inject选项中使用共享的数据。它也是官方首推在不使用vuex时隔代组件通信方式\"]},\"364\":{\"h\":\"1）使用\",\"t\":[\"// 父级组件提供 'foo' var Provider = { provide: { foo: 'bar' }, // ... } // 任何后代组件注入 'foo' var Child = { inject: ['foo'], created () { console.log(this.foo) // => \\\"bar\\\" } // ... } \",\"需要知道的是，provide也可以是个函数，返回一个对象，更多细节可以参考详细的api文档 此外，它也和props一样可以设置默认值\",\"const Child = { inject: { foo: { default: 'foo' } } } // 或者 const Child = { inject: { foo: { from: 'bar', default: () => [1, 2, 3] } } } \"]},\"365\":{\"h\":\"2）不明显的缺点\",\"t\":[\"出于设计的考虑，依赖注入和$root一样，都是非响应式的数据模式\",\"但是官方又说了，可以通过提供一个响应式的对象，来使注入的数据是响应式的。\",\"// 父级组件提供 'foo' var Provider = { data(){ return { obj: {name: 'mmdjj'} } }, provide: { foo: this.obj }, } // 任何后代组件注入 'foo' var Inject = { template: \\\"<div>{{foo.name}}</div>\\\", // => 三秒后由mmdjj变成welcome inject: ['foo'], created () { console.log(this.foo.name) // => \\\"mmdjj\\\" setTimeout(() => { this.foo.name = \\\"welcome\\\"; console.log(this.foo.name); // welcome }, 3000); } // ... }\"]},\"366\":{\"c\":[\"前端\"]},\"367\":{\"c\":[\"Vue\"]},\"368\":{\"h\":\"🎉一个demo体验Vue3.3所有新功能🎉\",\"t\":[\"最新文章发布在公众号：萌萌哒草头将军，个人：SunBoy_mmdctjj，欢迎关注，最近关注有🎁，送五本JavaScript的书~\",\"Vue3.3已经发布一个月了，今天我和大家体验下最新功能\"]},\"369\":{\"h\":\"💎 准备工作\"},\"370\":{\"h\":\"🚗 创建项目并运行\",\"t\":[\"创建完项目后记得下载最新的包\",\"// 创建 npm create vite vue-demo --template vue-ts // 下载依赖 cd vue-demo npm i // 更新到最新版本 npm i vue@3.3 // 运行 npm run dev \"]},\"371\":{\"h\":\"🚗 开启新功能\",\"t\":[\"由于最新的功能defineModel是实验特性，需要在vite.config.js里开启，另外需要开启解构props响应式功能\",\"import { defineConfig } from 'vite' import vue from '@vitejs/plugin-vue' // https://vitejs.dev/config/ export default defineConfig({ plugins: [vue({ script: { defineModel: true, // 开启defineModel功能 propsDestructure: true, // 开启props结构响应式 } })], }) \"]},\"372\":{\"h\":\"🚗 下载最新的Vue Language Features (Volar)\",\"t\":[\"如果你工作中还是写Vue2，那么建议你不要下载，因为和Vetur是冲突的 不冲突\",\"感谢@BWrong大佬指正\"]},\"373\":{\"h\":\"🚀 体验\"},\"374\":{\"h\":\"🚗 defineProps 使用引入外部定义的接口\",\"t\":[\"// App.vue <script setup lang='ts'> // 定义接口并暴露出去 export interface Command { msg: string } const count = ref(0) </script> <template> <button @click=\\\"count ++\\\">change count</button> <Child :msg=\\\"'hello vue3.3'\\\" :count=\\\"count\\\" /> </template> \",\"// Child.vue <script setup lang='ts'> import { Command } from '../App.vue'; defineProps<Command & { count: number}>() </script> <template> <h1>{{ msg }}</h1> <div>{{ count }}</div> </template> \",\"效果如下：\",\"defineProps.gif\"]},\"375\":{\"h\":\"🚗 props 结构响应式\",\"t\":[\"我们从defineProps中解构出count，然后使用watchEffect打印。\",\"// Child.vue <script setup lang='ts'> const { count } = defineProps<Command & { count: number}>() watchEffect(() => { console.log(count, 'count') }) </script> \",\"效果如下：\",\"reactive.gif\"]},\"376\":{\"h\":\"🚗 defineEmits\",\"t\":[\"接下来使用defineEmits定义监听事件，当count发生变化时使用触发该事件。\",\"// Child.vue <script setup lang=\\\"ts\\\"> const emits = defineEmits<{ 'count-change': [modelValue: number | undefined] }>() watchEffect(() => { console.log(count, 'count') emits('count-change', count) }) </script> \",\"在父组件中监听最新的变化值\",\"// App.vue <script setup lang=\\\"ts\\\"> const countChange = (value: any[]) => { console.log(value, 'countChange') } </script> <template> <Child @count-change=\\\"countChange\\\" /> </template> \",\"效果如下：\",\"emit.gif\"]},\"377\":{\"h\":\"🚗 defineModel\",\"t\":[\"接下来我们使用defineModel定义一个model，绑定在input标签上，同时使用watch监听变化。\",\"// Child.vue <template> <input v-model=\\\"modelValue\\\" /> </template> <script setup lang='ts'> const modelValue = defineModel<string>() watch(() => modelValue.value, (val) => console.log(val)) </script> \",\"需要在父组件设置model初始值\",\"// App.vue <script setup lang=\\\"ts\\\"> const modal = ref('hello world') </script> <template> <Child v-model=\\\"modal\\\" /> </template> \",\"此时效果如下：\",\"model.gif\"]},\"378\":{\"h\":\"🚗 一些类型检查增强的功能\"},\"379\":{\"h\":\"泛型组件\",\"t\":[\"在script标签上用generic属性定义泛型，当然也可以使用extends关键字继承其他属性。\",\"<script setup lang=\\\"ts\\\" generic=\\\"T extends string | number, U extends Item\\\"> import type { Item } from './types' defineProps<{ id: T list: U[] }>() </script> \"]},\"380\":{\"h\":\"defineSlots 新增类型检查\",\"t\":[\"defineSlots<{ default?: (props: { msg: string }) => any item?: (props: { id: number }) => any }>() \",\"此时如果在具名插件上不写id属性或者属性不是指定类型都会报错。\"]},\"381\":{\"h\":\"🎉 总结\",\"t\":[\"新功能确实越来越简洁了，加上TypeScript的加持，相信Vue3将会带来更好的便捷功能。\",\"需要源码的话可以在公众号回复vue3\",\"今天的分享就到了，最新文章发布在公众号：萌萌哒草头将军，想加我个人，请加：SunBoy_mmdctjj，欢迎关注和骚扰!\"]},\"382\":{\"c\":[\"前端\"]},\"383\":{\"c\":[\"JavaScript\",\"Vue\"]},\"384\":{\"h\":\"优美的v-for列表：动画钩子实践\",\"t\":[\"未经允许禁止转载\",\"打个广告，可以关注我哦~\",\"image.png\"]},\"385\":{\"h\":\"一、开始\",\"t\":[\"最近忙完工作，重新撸了一遍vue官方文档，发现很少被我用到的vue动画神器，JavaScript钩子函数\",\"趁着周末我自己做了几个demo和大家分享下，先上图\",\"温馨提示，本文需要了解的知识点如下：\",\"css过度属性transition\",\"css动画属性animation\",\"vue动画介绍\",\"vue动画之列表\",\"官方文档的介绍十分详细了，我就不做多余的赘述了，这里通过实践简单说下vue动画钩子函数思想以及我的使用心得\"]},\"386\":{\"h\":\"二、实践\",\"t\":[\"以下动画实现仅是个人理解，并非标准，希望大佬们指点\"]},\"387\":{\"h\":\"1.跟进列表\",\"t\":[\"源代码点击这里\",\"跟进列表是从下出现，回到初始位置，我在初始阶段采用了padding-top为100%，结束阶段为0%实现这个动画（margin-top也可以实现这个动画）\",\"@keyframes one-in { from { padding-top: 100px; height: 0%; } to { padding-top: 0px; height: 100%; } } \"]},\"388\":{\"h\":\"2.段落列表\",\"t\":[\"源代码点击这里\",\"段落列表是从右出现，回到正常位置，我在初始阶段采用了padding-left为100%，结束阶段为0%实现这个动画（margin-left也可以实现这个动画）\",\"@keyframes one-in { from { padding-left: 100%; } to { padding-left: 0%; } } \"]},\"389\":{\"h\":\"3.交错列表\",\"t\":[\"源代码点击这里\",\"交错列表稍微复杂点，不过我们可以分解为两个动画。 从左下出现，高度从零变到100px（具体自己设定）\",\"@keyframes one-in { from { padding-right: 100%; padding-top: 100px; height: 0; } to { padding-right: 0%; padding-top: 0px; height: 100px; } } \",\"从右上出现，高度从零变到100px（具体自己设定）\",\"@keyframes one-in { from { padding-left: 100%; height: 0; } to { padding-left: 0%; height: 100px; } } \",\"然后根据列表渲染的index为奇数或偶数选择不同的动画\",\"methods: { beforeEnter (el) { el.style.opacity = 0 }, enter (el, done) { let delay = el.dataset.index * 100 let animation = el.dataset.index % 2 === 0 ? 'one-in 0.4s infinite' : 'two-in 0.4s infinite' setTimeout(()=>{ el.style.transition = 'opacity 0.4s ' el.style.opacity = 1 el.style.animation = animation el.style['animation-iteration-count'] = 1 done() }, delay) } } \"]},\"390\":{\"h\":\"4.更多构想\",\"t\":[\"实践到这，越来越觉得页面的动画不好看，不是我们的能力差，而是我们的想象力还不够\",\"翻转列表源代码点击这里 每个复杂的动画其实都是很多简单小动画的拼接，所以下次设计师拿来充满想象力的动画设计稿，先别急着掏菜刀，仔细分析下动画的组成部分，可能也没有那么难。\"]},\"391\":{\"h\":\"三、思想\"},\"392\":{\"h\":\"1.对思想的理解\",\"t\":[\"如果说思想，简单的说就是vue在自己封装的transition组件上检测所有子节点的插入和移除，依次在这些属性作用的各个阶段抛出钩子函数接受我们前端er自定义的动画或者第三方库里的动画\",\"这里的依次以插入为例指动画开始前、动画开始、动画结束，也就是对应的钩子函数beforeEntry、entry、entryTo\",\"所以，vue动画的原理是将一个完整的动画在编码拆分在每个阶段，然后编译阶段重新拼接为一个完整的动画，这也就是官网这个图的含义\"]},\"393\":{\"h\":\"2.实践心得\"},\"394\":{\"h\":\"2.1尽量少用过度属性做复杂的动画\",\"t\":[\"过度属性要求你将过度的几个状态放在不同的钩子函数中，复杂的动画代码太多，写起来不简洁，当然，如果非要这样写，建议使用添加或移除class类的方式，我一般很少用到这过度属性\"]},\"395\":{\"h\":\"2.2多用动画属性\",\"t\":[\"动画属性的好处就是可以将自定义的动画重复使用，而你只需要指定动画名\"]},\"396\":{\"h\":\"2.3多使用setTiemout函数给不同dom依次设置动画延迟\",\"t\":[\"想在动画上根据不同的dom设置不同的动画延迟是十分困难的，但是我们可以很方便的给dom设置动画开始时间。\",\"参考文章：[译] 小 Tips 让你的交互动画从 “还不错” 变成 “超级棒”\"]},\"397\":{\"c\":[\"前端\"]},\"398\":{\"c\":[\"Vue\",\"用户体验\"]},\"399\":{\"h\":\"🚀VuePress-theme-hope2 搭建个人网站，万字长文保姆级教程，包含自动部署、评论、搜索等功能\",\"t\":[\"文章同步在公众号：萌萌哒草头将军，欢迎关注\",\"我的博客地址：https://mmdctjj.github.io/blogs2/\",\"对应仓库地址：https://github.com/mmdctjj/blogs2\",\"VuePress 是一个以 Markdown 为中心的静态网站生成器。好处是可以使用 Markdown 来书写内容文档或者博客。\",\"VuePress 诞生的初衷是为了支持 Vue.js 及其子项目的文档需求。\",\"在明确你的目标之后，先不着急立马搭建项目。\"]},\"400\":{\"h\":\"🚀 你喜欢哪个主题\",\"t\":[\"因为 VuePress 除了默认的主题外，提供了扩展主题、扩展插件的能力，不同的主题又组织了不同的插件集合来完成开箱即用的功能，\",\"所以，你首先应该使用哪款主题作为你的个人完整风格。\",\"比较热门你的主题有：\",\"vuepress 默认主题 21.7k⭐\",\"vuepress-theme-hope 1.4k⭐\",\"vuepress-theme-reco，（2.0 还在测试阶段） 1.6k⭐\",\"vuepress-theme-vdoing 3.5k⭐\",\"不同主题的之间的最明显的差异就是默认的样式不同，其次就是默认提供的功能不同。\",\"首先，我们看看各个主题默认的样式\"]},\"401\":{\"h\":\"默认主题案例\",\"t\":[\"vue 系列早先版本的官网大多数都是默认主题\",\"image.png\"]},\"402\":{\"h\":\"vuepress-theme-hope 案例\",\"t\":[\"蝉沐风的码场: https://www.chanmufeng.com/\",\"image.png\"]},\"403\":{\"h\":\"vuepress-theme-reco 案例：\",\"t\":[\"萌萌哒草头将军（我的旧博客）: https://mmdctjj.github.io/blogs/\",\"image.png\"]},\"404\":{\"h\":\"vuepress-theme-reco 2.0 案例：\",\"t\":[\"异想之旅の Blog：https://www.yixiangzhilv.com/\",\"image.png\"]},\"405\":{\"h\":\"vuepress-theme-vdoing 案例：\",\"t\":[\"Dra-M: https://dra-m.com/\",\"image.png\",\"相信看到这里，应该有自己心仪的主题了吧\",\"我用的主题是：vuepress-theme-reco，主题和默认主题相似\",\"主要功能是新增了一些图标、新增了 Tag、新增了时间轴等常用功能，\",\"缺点是：功能还不够丰富，图标比较少，无法有效添加摘要、阅读时间、字数统计等功能。\",\"相反，vuepress-theme-hope 这些做的都不错，成为我新的选择。\"]},\"406\":{\"h\":\"🚀 搭建项目\"},\"407\":{\"h\":\"💎 初始化项目\",\"t\":[\"如果你选择了一个主题，请务必使用该主题提供的脚手架工具创建项目。这样可以减少很多配置上的麻烦。\",\"npm init vuepress-theme-hope blogs \",\"Need to install the following packages: create-vuepress-theme-hope@2.0.0-beta.233 Ok to proceed? (y) \",\"Need to install the following packages: create-vuepress-theme-hope@2.0.0-beta.233 Ok to proceed? (y) y ? Select a language to display / 选择显示语言 english (US) ❯ 简体中文 D:\\\\work>npm init vuepress-theme-hope blogs2 Need to install the following packages: create-vuepress-theme-hope@2.0.0-beta.233 Ok to proceed? (y) y ? Select a language to display / 选择显示语言 简体中文 ? 选择包管理器 yarn 生成 package.json... ? 设置应用名称 blogs2 ? 设置应用版本号 2.0.0 ? 设置应用描述 A project of vuepress-theme-hope ? 设置协议 MIT ? 项目需要用到多语言么? No ? 是否需要一个自动部署文档到 GitHub Pages 的工作流？ Yes ? 你想要创建什么类型的项目？ blog 生成模板... ? 是否初始化 Git 仓库? Yes ? 选择你想使用的源 当前源 \",\"初始化目录结构如下\",\"image.png\"]},\"408\":{\"h\":\"🚀 首页配置\",\"t\":[\"其中，src 目录下的 README.md即为博客或者文档的首页。\",\"等待下载完毕，执行 npm run docs:dev\",\"打开页面，可以看到博客的首页如下：\",\"image.png\",\"可以通过设置heroFullScreen: false，关闭 hero 背景全屏。\",\"下滑之后文章的列表如下：\",\"image.png\",\"文章的列表来自于项目中所有的 markdown 文件，你可以在每个 md 文件的 frontmatter 中设置文章的标题、封面、分类、标签、日期、是否在文章列表中显示。\",\"--- title: 🚀🚀vue3自定义指令实践 isTimeLine: true date: 2023-07-03 category: - 前端 tag: - JavaScript - Vue --- \",\"通过设置article 为 false将文章在列表中排除。\",\"站点的基本信息、顶部的 hero 信息、项目链接、底部的 footer 信息都可以在README.md中配置。\",\"我的配置如下：具体可以参考：https://theme-hope.vuejs.press/zh/config/frontmatter/blog-home.html\",\"home: false layout: BlogHome icon: home title: 首页 heroImage: /logo.svg heroText: 萌萌哒草头将军 heroFullScreen: false tagline: 千里之行，始于足下 projects: - icon: react name: RaETable desc: 一款开箱即用的antd表格组件库 link: https://mmdctjj.github.io/raetable - icon: setting name: console-loader desc: 自动清除其他开发者console的loader link: https://github.com/mmdctjj/remove-others-console-loader footer: 萌萌哒草头将军 \"]},\"409\":{\"h\":\"🚀 导航栏\",\"t\":[\"在开始之前你需要明确，你的导航栏需求是啥样的（大白话就是哪些栏目需要在侧边栏展示，哪些在侧边栏展示）\",\"我的思路是，根据文章的分类，将相同的分类文章放在同一目录下，每个目录对应一个导航栏目。\",\"image.png\",\"导航栏的相关设置在 navbar.ts文件中。\",\"默认为字符串，对应 src 目录下的文件路径，你可以省略 .md 扩展名，以 / 结尾的路径会被推断为 /README.md。\",\"例如：\",\"import { navbar } from \\\"vuepress-theme-hope\\\"; export default navbar([ \\\"/\\\", // 对应首页，即src/README.md \\\"/react/\\\", // 对应src/react/README.md ]); \",\"也可以是对象，基本格式如下：\",\"import { navbar } from \\\"vuepress-theme-hope\\\"; export default navbar([ { text: \\\"博文\\\", icon: \\\"pen-to-square\\\", prefix: \\\"/posts/\\\", // 对应 src/posts 目录 children: [ { text: \\\"苹果\\\", icon: \\\"pen-to-square\\\", prefix: \\\"apple/\\\", // 对应 src/posts/apple 目录 children: [ { text: \\\"苹果1\\\", icon: \\\"pen-to-square\\\", link: \\\"1\\\" }, { text: \\\"苹果2\\\", icon: \\\"pen-to-square\\\", link: \\\"2\\\" }, \\\"3\\\", \\\"4\\\", ], }, \\\"tomato\\\", \\\"strawberry\\\", ], }, { text: \\\"V2 文档\\\", icon: \\\"book\\\", link: \\\"https://theme-hope.vuejs.press/zh/\\\", // link代码外链地址 }, ]); \",\"我的设置为：\",\"import { navbar } from \\\"vuepress-theme-hope\\\"; export default navbar([ \\\"/\\\", { text: \\\"React系列\\\", icon: \\\"react\\\", link: \\\"/react/\\\", }, { text: \\\"Vue系列\\\", icon: \\\"vue\\\", link: \\\"/vue/\\\", }, { text: \\\"Vite系列\\\", icon: \\\"tool\\\", link: \\\"/vite/\\\", }, { text: \\\"新框架尝鲜系列\\\", icon: \\\"geometry\\\", link: \\\"/framework/\\\", }, { text: \\\"杂谈\\\", icon: \\\"article\\\", link: \\\"/posts/\\\", }, { text: \\\"标签\\\", icon: \\\"tag\\\", link: \\\"/tag/javascript/\\\", }, { text: \\\"分类\\\", icon: \\\"categoryselected\\\", link: \\\"/category/前端/\\\", }, { text: \\\"时间轴\\\", icon: \\\"time\\\", link: \\\"/timeline/\\\", }, ]); \",\"我将一些默认的路由也加进了导航栏配置中，比如时间轴、标签、分类等。\",\"image.png\"]},\"410\":{\"h\":\"🚀 侧边栏\",\"t\":[\"侧边栏的配置在 sidebar.ts中\",\"侧边栏的配置，我们可以分两种情况：全局导航栏、根据每个导航栏栏目分离式导航栏。\"]},\"411\":{\"h\":\"💎 全局侧边栏配置\",\"t\":[\"你可以设置侧边栏导航和导航栏的路由一一对应，这样就相当于是全局的侧边栏。\",\"对于侧边栏的具体条目，可以通过设置children: \\\"structure\\\"根据当前目录下的文件名称自动生成。\",\"import { sidebar } from \\\"vuepress-theme-hope\\\"; export default sidebar({ \\\"/\\\": [ \\\"\\\", { text: \\\"React系列\\\", icon: \\\"react\\\", prefix: \\\"react/\\\", children: \\\"structure\\\", }, { text: \\\"Vue系列\\\", icon: \\\"vue\\\", prefix: \\\"vue/\\\", children: \\\"structure\\\", }, { text: \\\"Vite系列\\\", icon: \\\"tool\\\", prefix: \\\"vite/\\\", children: \\\"structure\\\", }, { text: \\\"新框架尝鲜系列\\\", icon: \\\"geometry\\\", prefix: \\\"framework/\\\", children: \\\"structure\\\", }, { text: \\\"杂谈\\\", icon: \\\"study\\\", prefix: \\\"posts/\\\", children: \\\"structure\\\", }, // \\\"intro\\\", // \\\"slides\\\", ], }); \",\"此时页面侧边栏如下图\",\"image.png\"]},\"412\":{\"h\":\"💎 分离式导航栏\",\"t\":[\"分离式菜单配置更简洁，如下所示：当设置structure时，默认根据目录下的文件自动生成侧边栏。\",\"import { sidebar } from \\\"vuepress-theme-hope\\\"; export default sidebar({ \\\"/react/\\\": \\\"structure\\\", \\\"/framework/\\\": \\\"structure\\\", \\\"/vite/\\\": \\\"structure\\\", \\\"/vue/\\\": \\\"structure\\\", \\\"/posts/\\\": \\\"structure\\\", }); \",\"image.png\"]},\"413\":{\"h\":\"💎 自动生成目录页面\",\"t\":[\"另外，我们还根据文件夹下的文件列表自动为每个文件夹生成目录页面。我们只需要在theme.ts中添加如下设置。\",\"plugins: { autoCatalog: { index: true }, } \",\"就可以自动生成目录页面了。例如：\",\"image.png\"]},\"414\":{\"h\":\"🚀 搜索功能\",\"t\":[\"该主题内置了几种常见搜索插件的支持，你只需下载你喜欢的插件和配置文件即可，我使用的是vuepress-plugin-search-pro插件，配置参考的官方配置。\",\"plugins: [ searchProPlugin({ // 索引全部内容 indexContent: true, // 为分类和标签添加索引 customFields: [ { getter: (page) => page.frontmatter.category as any, formatter: \\\"分类：$content\\\", }, { getter: (page) => page.frontmatter.tag as any, formatter: \\\"标签：$content\\\", }, ], }), ] \",\"效果如下：\",\"image.png\"]},\"415\":{\"h\":\"🚀 自动部署\",\"t\":[\"该主题已经自动添加了workflows文件，你只需添加仓库，修改触发分支。\",\"不过我在部署时遇到问题：\",\"Dependencies lock file is not found in /home/{username}/runners.../repository_name. Supported file patterns: package-lock.json,yarn.lock \",\"需要修改下workflows文件：去除 npm cache 设置\",\" - name: 设置 Node.js uses: actions/setup-node@v3 with: node-version: 18 # cache: npm \",\"cicd 执行成功后，会多一个部署gh-pages分支，这是文件流中配置的，你可以修改\",\" - name: 部署文档 uses: JamesIves/github-pages-deploy-action@v4 with: # 这是文档部署到的分支名称 branch: gh-pages folder: src/.vuepress/dist \",\"image.png\",\"接着最重要的一步，到仓库的设置页面设置如下的内容：\",\"image.png\",\"该设置的意思是，将选中的分支内容部署在 github 自带的页面服务中。\",\"接着点击save按钮，就可以去对应的站点访问了。\",\"我的站点：https://mmdctjj.github.io/blogs2/\"]},\"416\":{\"h\":\"🚀 添加评论功能\",\"t\":[\"不同的插件，评论的实现原理不同，我接触过最早的原理是通过将评论信息映射到仓库的 issue 中。\",\"然而，后来开始流行Discussions，这也是vuepress-theme-hope推荐的方式，\",\"如果你的博客面向程序员，请使用Giscus，面向大众请选择Waline, 所以我选择了Giscus\",\"首先需要你创建一个空的仓库。其次，由于评论需要用户登录到 GitHub，所以，我们还需要提供登录应用的服务。\",\"这里我们不用担心，因为 Github 为我们提供了简单的登陆应用的功能：giscus,\",\"首先安装 Giscus：https://github.com/apps/giscus\",\"image.png\",\"点击install按钮，在配置详情页中选择对应的生效仓库。（这里我选择仅仅对评论仓库生效）\",\"image.png\",\"然后回到评论仓库，点击seething，选中Feature下的Discussions\",\"image.png\",\"点击set up discussions，默认的文本不需要修改，点击提交即可出现如下页面，说明该功能启用成功。\",\"image.png\",\"接着，我们前往https://giscus.app/zh-CN 设置你的仓库和分类\",\"image.png\",\"image.png\",\"在启用栏目复制以下几个信息。\",\"image.png\",\"接着将以下信息复到theme.ts即可：\",\" plugins: { comment: { // You should generate and use your own comment service provider: \\\"Giscus\\\", repo: \\\"mmdctjj/blogs-comments\\\", repoId: \\\"xxxx\\\", // 替换下 category: \\\"Announcements\\\", categoryId: \\\"xxxx\\\" // 替换下 }, } \",\"此时当我们评论之后，在评论仓库查看，\",\"image.png\"]},\"417\":{\"h\":\"🎉 最后\",\"t\":[\"vuepress-theme-hope 主题通过默认的配置就提供了丰富的开箱即用的功能，使得配置体验相比较与 vuepress-theme-reco 有了明显的提升。这是我替换博客主题最大的体验，\",\"今天的分享就到这了，如果文中有错误的地方，还请在评论中告诉我，感激不尽。\"]},\"418\":{\"c\":[\"前端\"]},\"419\":{\"c\":[\"Vue\"]},\"420\":{\"h\":\"Framework\"},\"421\":{\"h\":\"Posts\"},\"422\":{\"h\":\"React\"},\"423\":{\"h\":\"Vite\"},\"424\":{\"h\":\"Vue\"}},\"dirtCount\":0,\"index\":[[\"替换下\",{\"1\":{\"416\":2}}],[\"替代vuex\",{\"0\":{\"361\":1}}],[\"选中feature下的discussions\",{\"1\":{\"416\":1}}],[\"选择你想使用的源\",{\"1\":{\"407\":1}}],[\"选择包管理器\",{\"1\":{\"407\":1}}],[\"选择显示语言\",{\"1\":{\"407\":2}}],[\"选择对jsx的灵活的语法做了限制\",{\"1\":{\"52\":1}}],[\"点击提交即可出现如下页面\",{\"1\":{\"416\":1}}],[\"点击set\",{\"1\":{\"416\":1}}],[\"点击seething\",{\"1\":{\"416\":1}}],[\"点击install按钮\",{\"1\":{\"416\":1}}],[\"点击按钮之后才发出请求\",{\"1\":{\"324\":1}}],[\"添加评论功能\",{\"0\":{\"416\":1}}],[\"添加测试数据\",{\"1\":{\"107\":1}}],[\"去除\",{\"1\":{\"415\":1}}],[\"索引全部内容\",{\"1\":{\"414\":1}}],[\"配置参考的官方配置\",{\"1\":{\"414\":1}}],[\"配合提供的keyframes方法定义各种类型动画实现\",{\"1\":{\"223\":1}}],[\"配合红宝书效果更佳\",{\"1\":{\"118\":1}}],[\"搜索功能\",{\"0\":{\"414\":1}}],[\"搜索等功能\",{\"0\":{\"399\":1}}],[\"侧边栏的配置\",{\"1\":{\"410\":1}}],[\"侧边栏的配置在\",{\"1\":{\"410\":1}}],[\"侧边栏\",{\"0\":{\"410\":1}}],[\"侧重点不同\",{\"1\":{\"118\":1}}],[\"杂谈\",{\"1\":{\"409\":1,\"411\":1}}],[\"杂技\",{\"0\":{\"278\":1,\"279\":1}}],[\"苹果2\",{\"1\":{\"409\":1}}],[\"苹果1\",{\"1\":{\"409\":1}}],[\"苹果\",{\"1\":{\"409\":1}}],[\"博文\",{\"1\":{\"409\":1}}],[\"哪些在侧边栏展示\",{\"1\":{\"409\":1}}],[\"哪些节点是静态的\",{\"1\":{\"208\":1}}],[\"哪些节点是动态的\",{\"1\":{\"208\":1}}],[\"导航栏的相关设置在\",{\"1\":{\"409\":1}}],[\"导航栏\",{\"0\":{\"409\":1}}],[\"导致内存成为不连续的片段\",{\"1\":{\"138\":1}}],[\"导致在编译时\",{\"1\":{\"51\":1}}],[\"导致花在运行时和编译时的时间有所不同\",{\"1\":{\"50\":1}}],[\"导致只有运行时\",{\"1\":{\"47\":1}}],[\"导致变量更新\",{\"1\":{\"29\":1}}],[\"始于足下\",{\"1\":{\"408\":1}}],[\"千里之行\",{\"1\":{\"408\":1}}],[\"zh\",{\"1\":{\"408\":1,\"409\":1,\"416\":1}}],[\"zustand提供了内置的一些中间件\",{\"1\":{\"184\":1}}],[\"zustand\",{\"0\":{\"180\":1,\"181\":1,\"189\":1,\"190\":1},\"1\":{\"182\":3,\"184\":1,\"185\":2,\"189\":2,\"190\":1,\"191\":1,\"192\":3}}],[\"底部的\",{\"1\":{\"408\":1}}],[\"底层原理很简单\",{\"0\":{\"191\":1}}],[\"底层原理\",{\"1\":{\"189\":1}}],[\"底层原理🚀🚀🚀\",{\"0\":{\"189\":1}}],[\"底层都逃不出两三个设计模式的\",{\"1\":{\"121\":1}}],[\"顶部的\",{\"1\":{\"408\":1}}],[\"站点的基本信息\",{\"1\":{\"408\":1}}],[\"日期\",{\"1\":{\"408\":1}}],[\"封面\",{\"1\":{\"408\":1}}],[\"封装事件监听\",{\"0\":{\"319\":1}}],[\"封装媒体查询\",{\"0\":{\"318\":1}}],[\"封装\",{\"1\":{\"135\":1}}],[\"背景全屏\",{\"1\":{\"408\":1}}],[\"仓库\",{\"1\":{\"407\":1}}],[\"搭建项目\",{\"0\":{\"406\":1}}],[\"搭建个人网站\",{\"0\":{\"399\":1}}],[\"成为我新的选择\",{\"1\":{\"405\":1}}],[\"成为一个通用的钩子函数\",{\"1\":{\"319\":1}}],[\"字数统计等功能\",{\"1\":{\"405\":1}}],[\"阅读时间\",{\"1\":{\"405\":1}}],[\"阅读更多文章点这里\",{\"1\":{\"300\":1}}],[\"无法有效添加摘要\",{\"1\":{\"405\":1}}],[\"无权图可以认为是权重相同的有权图\",{\"1\":{\"97\":1}}],[\"异想之旅の\",{\"1\":{\"404\":1}}],[\"异步编程时只能采用回调函数或者promise等方式\",{\"1\":{\"142\":1}}],[\"异步编程\",{\"0\":{\"141\":1}}],[\"蝉沐风的码场\",{\"1\":{\"402\":1}}],[\"案例\",{\"0\":{\"402\":1,\"403\":1,\"404\":1,\"405\":1}}],[\"系列早先版本的官网大多数都是默认主题\",{\"1\":{\"401\":1}}],[\"及其子项目的文档需求\",{\"1\":{\"399\":1}}],[\"及他自己的所有子节点都更新后调用\",{\"1\":{\"311\":1}}],[\"及他自己的所有子节点都挂载完成后调用\",{\"1\":{\"311\":1}}],[\"诞生的初衷是为了支持\",{\"1\":{\"399\":1}}],[\"评论的实现原理不同\",{\"1\":{\"416\":1}}],[\"评论\",{\"0\":{\"399\":1}}],[\"评论区告诉我\",{\"1\":{\"177\":1}}],[\"万字长文保姆级教程\",{\"0\":{\"399\":1}}],[\"万恶之源\",{\"0\":{\"6\":1}}],[\"译\",{\"1\":{\"396\":1}}],[\"参考文章\",{\"1\":{\"396\":1}}],[\"参数\",{\"1\":{\"296\":1}}],[\"想在动画上根据不同的dom设置不同的动画延迟是十分困难的\",{\"1\":{\"396\":1}}],[\"想加我个人\",{\"1\":{\"381\":1}}],[\"建议使用添加或移除class类的方式\",{\"1\":{\"394\":1}}],[\"建议使用vuex\",{\"1\":{\"354\":1}}],[\"写起来不简洁\",{\"1\":{\"394\":1}}],[\"写这几个插件是为了理解插件机制\",{\"1\":{\"304\":1}}],[\"写这篇文章的时候有很大的犹豫\",{\"1\":{\"4\":1}}],[\"复杂的动画代码太多\",{\"1\":{\"394\":1}}],[\"复制\",{\"1\":{\"140\":1}}],[\"复制等gc方式\",{\"1\":{\"140\":1}}],[\"过度属性要求你将过度的几个状态放在不同的钩子函数中\",{\"1\":{\"394\":1}}],[\"过程如下\",{\"1\":{\"240\":1}}],[\"仔细分析下动画的组成部分\",{\"1\":{\"390\":1}}],[\"越来越觉得页面的动画不好看\",{\"1\":{\"390\":1}}],[\"高度从零变到100px\",{\"1\":{\"389\":2}}],[\"交错列表稍微复杂点\",{\"1\":{\"389\":1}}],[\"交错列表\",{\"0\":{\"389\":1}}],[\"段落列表是从右出现\",{\"1\":{\"388\":1}}],[\"段落列表\",{\"0\":{\"388\":1}}],[\"回到正常位置\",{\"1\":{\"388\":1}}],[\"回到初始位置\",{\"1\":{\"387\":1}}],[\"回头记得一键三连哦～\",{\"1\":{\"154\":1,\"155\":1}}],[\"回头再看来时的路\",{\"1\":{\"116\":1}}],[\"源代码点击这里\",{\"1\":{\"387\":1,\"388\":1,\"389\":1}}],[\"源码中\",{\"1\":{\"272\":1}}],[\"源码中实例都用fiber或者workinprogress表示\",{\"1\":{\"260\":1}}],[\"源码里用fiberroot表示\",{\"1\":{\"264\":1}}],[\"源码里通过createhostrootfiber的实例在作为参数时\",{\"1\":{\"262\":1}}],[\"源码里出现了一堆带着fiber的变量\",{\"1\":{\"258\":1}}],[\"源码逻辑\",{\"0\":{\"201\":1,\"202\":1}}],[\"源码分析\",{\"0\":{\"200\":1}}],[\"源码点这里\",{\"1\":{\"154\":1,\"221\":1,\"338\":1}}],[\"跟进列表是从下出现\",{\"1\":{\"387\":1}}],[\"跟进列表\",{\"0\":{\"387\":1}}],[\"跟我的需求不符\",{\"1\":{\"295\":1}}],[\"跟我一样说阿弥陀佛\",{\"1\":{\"154\":1,\"155\":1}}],[\"温馨提示\",{\"1\":{\"385\":1}}],[\"趁着周末我自己做了几个demo和大家分享下\",{\"1\":{\"385\":1}}],[\"加上typescript的加持\",{\"1\":{\"381\":1}}],[\"加载中时用css禁用按钮\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"加载过慢导致的\",{\"1\":{\"241\":1}}],[\"加载速度更快\",{\"1\":{\"58\":1}}],[\"泛型组件\",{\"0\":{\"379\":1}}],[\"绑定在input标签上\",{\"1\":{\"377\":1}}],[\"绑定元素的父组件卸载后调用\",{\"1\":{\"311\":1}}],[\"绑定元素的父组件卸载前调用\",{\"1\":{\"311\":1}}],[\"绑定元素的父组件更新前调用\",{\"1\":{\"311\":1}}],[\"体验\",{\"0\":{\"373\":1}}],[\"准备工作\",{\"0\":{\"369\":1}}],[\"送五本javascript的书~\",{\"1\":{\"368\":1}}],[\"送出五本书\",{\"1\":{\"300\":1}}],[\"出于设计的考虑\",{\"1\":{\"365\":1}}],[\"出家人怎会计较这些\",{\"1\":{\"154\":1,\"155\":1}}],[\"任何后代组件注入\",{\"1\":{\"364\":1,\"365\":1}}],[\"任务会被再次执行\",{\"1\":{\"41\":1}}],[\"任务会在客户端再次执行\",{\"1\":{\"40\":1}}],[\"销毁\",{\"1\":{\"358\":1}}],[\"销毁这个store\",{\"1\":{\"191\":1}}],[\"连引入都可以省略\",{\"1\":{\"357\":1}}],[\"连续72个后空翻\",{\"1\":{\"154\":1,\"155\":1}}],[\"刚开始显示mmdjj\",{\"1\":{\"355\":1}}],[\"隔代组件通信\",{\"0\":{\"362\":1},\"1\":{\"353\":1}}],[\"兄弟组件\",{\"1\":{\"353\":1}}],[\"兄弟组件通信\",{\"0\":{\"351\":1}}],[\"确切的说$root方法使用于任何情况的组件通信\",{\"1\":{\"353\":1}}],[\"个人\",{\"1\":{\"368\":1}}],[\"个人认为\",{\"1\":{\"353\":1}}],[\"个人联系方式\",{\"1\":{\"300\":1}}],[\"逐个在子组件显式的声明出来有时也是比较费事的\",{\"1\":{\"350\":1}}],[\"浏览器渲染的时候\",{\"1\":{\"349\":1}}],[\"浏览器是多进程多线程的\",{\"1\":{\"142\":1}}],[\"访问的是dom信息\",{\"1\":{\"347\":1}}],[\"访问的是根组件的实例\",{\"1\":{\"347\":1}}],[\"父级组件提供\",{\"1\":{\"364\":1,\"365\":1}}],[\"父级\",{\"1\":{\"343\":1}}],[\"父子组件通信\",{\"0\":{\"342\":1}}],[\"父组件改变子组件的值\",{\"1\":{\"278\":1}}],[\"立马就被否决了\",{\"1\":{\"341\":1}}],[\"立即执行\",{\"1\":{\"323\":1}}],[\"立即发送请求\",{\"1\":{\"323\":1,\"325\":1}}],[\"立即请求函数\",{\"0\":{\"323\":1}}],[\"京东前端实习一道面试题\",{\"1\":{\"341\":1}}],[\"防止重复发布\",{\"1\":{\"333\":1}}],[\"卸载页面时\",{\"1\":{\"325\":1}}],[\"验证如下\",{\"1\":{\"324\":1}}],[\"手动请求函数\",{\"0\":{\"324\":1}}],[\"页面刷新后没有发出请求\",{\"1\":{\"324\":1}}],[\"页面刷新后立即发出请求了\",{\"1\":{\"323\":1}}],[\"页面刷新后服务端也执行了一次任务\",{\"1\":{\"40\":1}}],[\"懂的大佬评论区带带我吧\",{\"1\":{\"323\":1}}],[\"错误信息以及正常的数据类型\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"要知道一个组件的子组件可能是不唯一的\",{\"1\":{\"346\":1}}],[\"要求返回值包含加载中状态\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"要应用到元素的样式\",{\"1\":{\"222\":1}}],[\"让你的交互动画从\",{\"1\":{\"396\":1}}],[\"让它成为响应式\",{\"0\":{\"355\":1}}],[\"让开发更加丝滑🚀🚀🚀\",{\"0\":{\"322\":1}}],[\"让我们给这个计数器加上监听事件\",{\"1\":{\"35\":1}}],[\"觉得文章还不错可以关注我的公众号\",{\"1\":{\"319\":1}}],[\"觉得还不错\",{\"1\":{\"21\":1}}],[\"功能还不够丰富\",{\"1\":{\"405\":1}}],[\"功能还会继续完善\",{\"1\":{\"290\":1}}],[\"功能是正常的\",{\"1\":{\"319\":1}}],[\"值的变化可以通过addeventlistener方法\",{\"1\":{\"319\":1}}],[\"努力加载中\",{\"1\":{\"314\":1}}],[\"阶段获取格式化后的\",{\"1\":{\"313\":1}}],[\"阶段\",{\"1\":{\"313\":3}}],[\"结尾的路径会被推断为\",{\"1\":{\"409\":1}}],[\"结果\",{\"0\":{\"338\":1}}],[\"结构响应式\",{\"0\":{\"375\":1}}],[\"结构\",{\"1\":{\"311\":1}}],[\"结束阶段为0\",{\"1\":{\"387\":1,\"388\":1}}],[\"结束\",{\"0\":{\"144\":1}}],[\"结束了\",{\"1\":{\"143\":1}}],[\"里的函数\",{\"1\":{\"311\":1}}],[\"里添加如下配置\",{\"1\":{\"240\":1}}],[\"能不能写个组件渲染到指令里呢\",{\"1\":{\"311\":1}}],[\"差异不大\",{\"1\":{\"311\":1}}],[\"官方文档的介绍十分详细了\",{\"1\":{\"385\":1}}],[\"官方已经提供了相关的配置或者现成的插件\",{\"1\":{\"304\":1}}],[\"官网中也提到了\",{\"1\":{\"354\":1}}],[\"官网明确告诉你\",{\"1\":{\"26\":1}}],[\"传递给了\",{\"1\":{\"303\":1}}],[\"向\",{\"1\":{\"302\":2}}],[\"向父组件暴露一个自定义的\",{\"1\":{\"278\":1}}],[\"列表添加回调函数\",{\"1\":{\"302\":1}}],[\"列表中添加回调函数\",{\"1\":{\"302\":2}}],[\"列表中的回调函数\",{\"1\":{\"302\":1}}],[\"列表\",{\"1\":{\"302\":2}}],[\"列表动画\",{\"1\":{\"186\":1}}],[\"维护了各个插件接口的\",{\"1\":{\"302\":1}}],[\"维护一系列的观察者\",{\"1\":{\"160\":1}}],[\"独有的钩子\",{\"1\":{\"301\":1}}],[\"详细请看官网介绍\",{\"1\":{\"301\":1}}],[\"详细请看这里\",{\"1\":{\"184\":1}}],[\"概率很大\",{\"1\":{\"300\":1}}],[\"概述\",{\"0\":{\"208\":1}}],[\"群里目前已经快20位小伙伴了\",{\"1\":{\"300\":1}}],[\"探究vite的插件机制\",{\"0\":{\"300\":1}}],[\"you\",{\"1\":{\"416\":1}}],[\"yourkey\",{\"1\":{\"336\":1}}],[\"yourclass\",{\"1\":{\"164\":8}}],[\"your\",{\"1\":{\"163\":1,\"278\":1,\"416\":1}}],[\"yes\",{\"1\":{\"407\":2}}],[\"yarn\",{\"1\":{\"407\":1,\"415\":1}}],[\"y\",{\"1\":{\"407\":5}}],[\"yixiangzhilv\",{\"1\":{\"404\":1}}],[\"yyyy\",{\"1\":{\"296\":1}}],[\"挂载信息的节点\",{\"1\":{\"296\":1}}],[\"挂起\",{\"1\":{\"143\":1}}],[\"库将html字符串转化为\",{\"1\":{\"296\":1}}],[\"信息都可以在readme\",{\"1\":{\"408\":1}}],[\"信息\",{\"1\":{\"296\":1,\"408\":1}}],[\"信息如下\",{\"1\":{\"192\":1}}],[\"特有的钩子\",{\"1\":{\"296\":1}}],[\"特别感谢下面几本书带我入行前端\",{\"1\":{\"116\":1}}],[\"治好了我的精神内耗\",{\"1\":{\"295\":1}}],[\"他们分别是下面几个库\",{\"1\":{\"295\":1}}],[\"他们都接收两个参数\",{\"1\":{\"199\":1}}],[\"调研\",{\"0\":{\"295\":1}}],[\"调用钩子函数\",{\"1\":{\"302\":1}}],[\"调用updatecallback\",{\"1\":{\"202\":1}}],[\"调用updatememo\",{\"1\":{\"201\":1}}],[\"调用mountcallback\",{\"1\":{\"202\":1}}],[\"调用mountmemo\",{\"1\":{\"201\":1}}],[\"调用者\",{\"1\":{\"153\":2}}],[\"需求背景\",{\"0\":{\"294\":1}}],[\"需要修改下workflows文件\",{\"1\":{\"415\":1}}],[\"需要源码的话可以在公众号回复vue3\",{\"1\":{\"381\":1}}],[\"需要在父组件设置model初始值\",{\"1\":{\"377\":1}}],[\"需要在vite\",{\"1\":{\"371\":1}}],[\"需要知道的是\",{\"1\":{\"364\":1}}],[\"需要将插件放入\",{\"1\":{\"303\":1}}],[\"需要将代码转为二进制字节码文件\",{\"1\":{\"47\":1}}],[\"需要删除的行\",{\"1\":{\"286\":1}}],[\"需要开启压缩识别\",{\"1\":{\"241\":1}}],[\"需要实现命令接口\",{\"1\":{\"153\":1}}],[\"需要实现runable接口\",{\"1\":{\"143\":1}}],[\"需要随时追踪\",{\"1\":{\"152\":1}}],[\"需要根据参数确定执行哪个方法时\",{\"1\":{\"152\":1}}],[\"需要使用命令模式的场景\",{\"0\":{\"152\":1}}],[\"需要使用java集合框架里的arraylist或者linkedlist\",{\"1\":{\"133\":1}}],[\"需要强制转换\",{\"1\":{\"131\":1}}],[\"需要强制类型转换\",{\"1\":{\"129\":1}}],[\"需要初始化新节点的邻接表和标记状态\",{\"1\":{\"105\":1}}],[\"需要edges对象存放邻接表\",{\"1\":{\"104\":1}}],[\"需要vertexs数组存放所有的节点\",{\"1\":{\"104\":1}}],[\"需要像react一样\",{\"1\":{\"53\":1}}],[\"^\",{\"1\":{\"287\":3}}],[\"^author\",{\"1\":{\"286\":2}}],[\"正则表达式替换完整的console\",{\"1\":{\"287\":1}}],[\"正在执行命令的类\",{\"1\":{\"153\":1}}],[\"删除console\",{\"0\":{\"287\":1}}],[\"查询语句和css媒体查询一样\",{\"1\":{\"317\":1}}],[\"查询git作者\",{\"0\":{\"286\":1}}],[\"查看指定问价你的l1到l2行的作者详细信息\",{\"1\":{\"286\":1}}],[\"查看当前行的作者\",{\"1\":{\"284\":1}}],[\"按行划分\",{\"1\":{\"285\":1}}],[\"按下性能问题暂且不表\",{\"1\":{\"208\":1}}],[\"匹配console语句\",{\"0\":{\"285\":1}}],[\"焦虑了好久\",{\"1\":{\"284\":1}}],[\"显然不实用\",{\"1\":{\"329\":1}}],[\"显然不现实\",{\"1\":{\"284\":1}}],[\"显示器如果每秒刷新次数小于60帧\",{\"1\":{\"217\":1}}],[\"既然人家喜欢那样做\",{\"1\":{\"284\":1}}],[\"围攻\",{\"1\":{\"283\":1}}],[\"居然有近800多条console语句\",{\"1\":{\"283\":1}}],[\"居然又是个前端框架\",{\"1\":{\"24\":1}}],[\"ω\",{\"1\":{\"283\":1}}],[\"此外\",{\"1\":{\"364\":1}}],[\"此刻我怀着忐忑的心情打开了自己的即将负责的模块入口页面\",{\"1\":{\"283\":1}}],[\"此时当我们评论之后\",{\"1\":{\"416\":1}}],[\"此时页面侧边栏如下图\",{\"1\":{\"411\":1}}],[\"此时页面可以访问了\",{\"1\":{\"240\":1}}],[\"此时如果在具名插件上不写id属性或者属性不是指定类型都会报错\",{\"1\":{\"380\":1}}],[\"此时效果如下\",{\"1\":{\"377\":1}}],[\"此时渲染之后式这样的\",{\"1\":{\"349\":1}}],[\"此时需要借助vue提供的事件监听机制来完成子组件向父组件数据流动更新的功能\",{\"1\":{\"343\":1}}],[\"此时就需要一个事件机制\",{\"1\":{\"330\":1}}],[\"此时就是更新workinprogress对应地fiber\",{\"1\":{\"272\":1}}],[\"此时我们的组件只能通过\",{\"1\":{\"312\":1}}],[\"此时我们去掉usememo\",{\"1\":{\"234\":1}}],[\"此时是fiberrootnode的current属性为null\",{\"1\":{\"272\":1}}],[\"此时对应的是mounted阶段的初始状态\",{\"1\":{\"271\":1}}],[\"此时影响的因素主要请求链的长度过长\",{\"1\":{\"243\":1}}],[\"此时动画样式虽然很舒服了\",{\"1\":{\"223\":1}}],[\"此时清空eden区和from区\",{\"1\":{\"140\":1}}],[\"此时eden区存活下来的变量将会被分配到to区\",{\"1\":{\"140\":1}}],[\"此时的树为下图所示\",{\"1\":{\"107\":1}}],[\"此时代码里的错误在编译阶段就可以抛出异常了\",{\"1\":{\"48\":1}}],[\"此时console的打印结果是先1111\",{\"1\":{\"41\":1}}],[\"此时\",{\"1\":{\"41\":1,\"47\":1,\"112\":1,\"235\":1,\"259\":1,\"272\":1,\"319\":1,\"353\":1}}],[\"入组第一天\",{\"1\":{\"283\":1}}],[\"暴露你自己的命令式方法\",{\"1\":{\"278\":1}}],[\"句柄\",{\"1\":{\"278\":1}}],[\"近期有抽奖哦～\",{\"1\":{\"277\":1}}],[\"近些年的热度已经盖过angular了\",{\"1\":{\"58\":1}}],[\"降低阅读源码的难度\",{\"1\":{\"274\":1}}],[\"全局侧边栏配置\",{\"0\":{\"411\":1}}],[\"全局导航栏\",{\"1\":{\"410\":1}}],[\"全局一搜索\",{\"1\":{\"283\":1}}],[\"全局组件可以实现\",{\"1\":{\"279\":1}}],[\"全局只有一个实例\",{\"1\":{\"159\":1}}],[\"全文近六千五字符\",{\"1\":{\"274\":1}}],[\"肥肠感谢🙏\",{\"1\":{\"274\":1}}],[\"圈\",{\"1\":{\"273\":1}}],[\"顺着return属性向上回归\",{\"1\":{\"272\":1}}],[\"顺着child属性向下遍历\",{\"1\":{\"272\":1}}],[\"旧的current替换之后成为workinprogress\",{\"1\":{\"272\":1}}],[\"快速比对\",{\"1\":{\"272\":1}}],[\"快放弃math\",{\"1\":{\"248\":1}}],[\"略微不同的fibernode类型\",{\"1\":{\"271\":1}}],[\"普通元素等\",{\"1\":{\"271\":1}}],[\"普里姆\",{\"0\":{\"100\":1}}],[\"类组件的fiber结构的updatequeue属性承载了组件的更新信息\",{\"1\":{\"271\":1}}],[\"类组件的fiber结构的memoizedstate属性仅仅对应this\",{\"1\":{\"271\":1}}],[\"类组件\",{\"1\":{\"271\":1}}],[\"类似react\",{\"1\":{\"177\":1}}],[\"类似于\",{\"1\":{\"80\":4}}],[\"链表结构\",{\"0\":{\"271\":1}}],[\"链表结构和双缓存机制\",{\"0\":{\"270\":1}}],[\"待定🎉\",{\"1\":{\"274\":1}}],[\"待下一次更新时再进行处理\",{\"1\":{\"263\":1}}],[\"待查收\",{\"1\":{\"186\":1}}],[\"树进行比较\",{\"1\":{\"263\":1}}],[\"树\",{\"1\":{\"263\":1}}],[\"树的根节点\",{\"1\":{\"263\":2}}],[\"网络请求优化用的属性\",{\"1\":{\"263\":1}}],[\"表示下一次更新的过期时间\",{\"1\":{\"263\":1}}],[\"表示最近一次渲染完成的\",{\"1\":{\"263\":1}}],[\"表示当前应用程序的挂起上下文\",{\"1\":{\"263\":1}}],[\"表示当前应用程序的上下文\",{\"1\":{\"263\":1}}],[\"表示当前应用程序中待处理的子树列表\",{\"1\":{\"263\":1}}],[\"表示当前渲染的\",{\"1\":{\"263\":1}}],[\"表示应用程序的容器元素\",{\"1\":{\"263\":1}}],[\"表示可以被系统调用分配系统资源\",{\"1\":{\"143\":1}}],[\"偶尔也会使用rootfiber表示\",{\"1\":{\"262\":1}}],[\"布局更新前触发\",{\"1\":{\"249\":1}}],[\"吧\",{\"1\":{\"248\":1}}],[\"生成模板\",{\"1\":{\"407\":1}}],[\"生成\",{\"1\":{\"407\":1}}],[\"生成全局唯一id\",{\"1\":{\"248\":1}}],[\"生命周期钩子\",{\"0\":{\"80\":1}}],[\"外部数据源需要提供订阅函数\",{\"1\":{\"247\":1}}],[\"考虑减少链的长度\",{\"1\":{\"243\":1}}],[\"翻转列表源代码点击这里\",{\"1\":{\"390\":1}}],[\"翻译\",{\"1\":{\"243\":1}}],[\"翻着精美的图片\",{\"1\":{\"155\":1}}],[\"指向\",{\"1\":{\"263\":1}}],[\"指向右边兄弟节点\",{\"1\":{\"259\":1,\"271\":1}}],[\"指向第一个子节点\",{\"1\":{\"259\":1,\"271\":1}}],[\"指向父节点\",{\"1\":{\"259\":1,\"271\":1}}],[\"指标很健康\",{\"1\":{\"242\":1}}],[\"指标十分优秀\",{\"1\":{\"242\":1}}],[\"指令来根据条件动态添加或删除\",{\"1\":{\"82\":1}}],[\"指令来监听按钮的点击事件\",{\"1\":{\"82\":1}}],[\"指令来双向绑定输入框的值\",{\"1\":{\"82\":1}}],[\"指令\",{\"0\":{\"81\":1}}],[\"打开页面\",{\"1\":{\"408\":1}}],[\"打开浏览器控制台\",{\"1\":{\"283\":1}}],[\"打个广告\",{\"1\":{\"384\":1}}],[\"打包\",{\"1\":{\"303\":1}}],[\"打包时间\",{\"1\":{\"296\":1}}],[\"打包分支\",{\"1\":{\"296\":1}}],[\"打包之后\",{\"1\":{\"241\":1}}],[\"打上标记\",{\"1\":{\"272\":1}}],[\"打印每个节点对应父节点的信息\",{\"1\":{\"112\":1}}],[\"打印如下\",{\"1\":{\"15\":1}}],[\"格式取决于\",{\"1\":{\"296\":1}}],[\"格式\",{\"1\":{\"241\":1}}],[\"格式化展示\",{\"1\":{\"112\":1}}],[\"阈值\",{\"1\":{\"241\":1}}],[\"部署文档\",{\"1\":{\"415\":1}}],[\"部署之后\",{\"1\":{\"241\":1}}],[\"部署在服务器上看看\",{\"1\":{\"241\":1}}],[\"版已经完成了代码压缩\",{\"1\":{\"242\":1}}],[\"版的\",{\"1\":{\"242\":1}}],[\"版\",{\"1\":{\"241\":1}}],[\"版包体积小了\",{\"1\":{\"241\":1}}],[\"版本信息\",{\"1\":{\"296\":1}}],[\"版本信息要求如下\",{\"1\":{\"294\":1}}],[\"版本描述\",{\"1\":{\"296\":1}}],[\"版本号\",{\"1\":{\"296\":1}}],[\"版本不同的是\",{\"1\":{\"192\":1}}],[\"版本相同的是他们都是使用\",{\"1\":{\"192\":1}}],[\"版本\",{\"1\":{\"192\":2}}],[\"版本和非\",{\"1\":{\"192\":1}}],[\"比较热门你的主题有\",{\"1\":{\"400\":1}}],[\"比\",{\"1\":{\"241\":1}}],[\"比如时间轴\",{\"1\":{\"409\":1}}],[\"比如前面父子组件通信你使用了parent或者children\",{\"1\":{\"353\":1}}],[\"比如$root和依赖注入他们既适合兄弟组件\",{\"1\":{\"350\":1}}],[\"比如监听scroll事件\",{\"1\":{\"319\":1}}],[\"比如workinprogresshook\",{\"1\":{\"272\":1}}],[\"比如函数组件\",{\"1\":{\"271\":1}}],[\"比如执行了sleep\",{\"1\":{\"143\":1}}],[\"比如使用分代回收\",{\"1\":{\"138\":1}}],[\"比如tostring\",{\"1\":{\"130\":1}}],[\"比如对于闭包\",{\"1\":{\"118\":1}}],[\"比如\",{\"1\":{\"112\":1,\"126\":1,\"218\":1,\"271\":1}}],[\"比如提供show标签代替if语法\",{\"1\":{\"52\":1}}],[\"比如java使用虚拟机编辑成目标机器字节码\",{\"1\":{\"47\":1}}],[\"性能比较\",{\"0\":{\"242\":1}}],[\"性能有了明显提升\",{\"1\":{\"241\":1}}],[\"性能优化过程\",{\"0\":{\"241\":1}}],[\"性能更好\",{\"1\":{\"84\":1}}],[\"整个过程很快\",{\"1\":{\"240\":1}}],[\"换成\",{\"1\":{\"240\":1}}],[\"换句话说\",{\"1\":{\"39\":1}}],[\"工作目录直接拷贝过来\",{\"1\":{\"240\":1}}],[\"项目链接\",{\"1\":{\"408\":1}}],[\"项目需要用到多语言么\",{\"1\":{\"407\":1}}],[\"项目脚手架换成\",{\"1\":{\"240\":1}}],[\"项目状态管理库\",{\"1\":{\"182\":1}}],[\"⚡️\",{\"0\":{\"240\":1}}],[\"附带性能比较和思考\",{\"0\":{\"239\":1}}],[\"附上犹大的推特照片\",{\"1\":{\"54\":1}}],[\"尽量不要使用usememo和usecallback\",{\"1\":{\"236\":1}}],[\"尽可能的减少渲染次数\",{\"1\":{\"236\":1}}],[\"减少资源的下载大小\",{\"1\":{\"243\":1}}],[\"减少调用\",{\"1\":{\"236\":1}}],[\"减少计算消耗\",{\"1\":{\"236\":1}}],[\"减少性能消耗\",{\"1\":{\"236\":1}}],[\"减少渲染次数\",{\"1\":{\"236\":3}}],[\"减少无意义的的render从而提高性能\",{\"1\":{\"231\":1}}],[\"应该有自己心仪的主题了吧\",{\"1\":{\"405\":1}}],[\"应该遵循下面的规律\",{\"1\":{\"236\":1}}],[\"应用级\",{\"1\":{\"208\":1}}],[\"应用程序组件\",{\"1\":{\"182\":2}}],[\"子组件依然是按期望渲染的\",{\"1\":{\"234\":1}}],[\"子组件使用memo函数包裹\",{\"1\":{\"234\":1}}],[\"~~\",{\"1\":{\"233\":1,\"235\":1}}],[\"第二种方法是使用去除conosle的插件\",{\"1\":{\"284\":1}}],[\"第二座大山\",{\"0\":{\"270\":1}}],[\"第二个child组件都会被重新渲染\",{\"1\":{\"235\":1}}],[\"第二个子组件还是重新渲染了\",{\"1\":{\"233\":1}}],[\"第一种方法是如果有console就不让提交代码\",{\"1\":{\"284\":1}}],[\"第一座山\",{\"0\":{\"258\":1}}],[\"第一次使用\",{\"1\":{\"190\":1}}],[\"第一次上香是在这篇文章里\",{\"1\":{\"49\":1}}],[\"甚至\",{\"1\":{\"227\":1}}],[\"甚至可以定义响应式的时机\",{\"1\":{\"7\":1}}],[\"左右交错的同时载增加从下到上的动画\",{\"0\":{\"227\":1}}],[\"左右交错\",{\"0\":{\"225\":1}}],[\"除了默认的主题外\",{\"1\":{\"400\":1}}],[\"除了props和$emit\",{\"1\":{\"341\":1}}],[\"除了预设的信息外\",{\"1\":{\"296\":1}}],[\"除了上面说到的类组件和函数组件\",{\"1\":{\"271\":1}}],[\"除了逐个有序的渲染列表\",{\"1\":{\"224\":1}}],[\"除了初始化节点之外\",{\"1\":{\"105\":1}}],[\"设置你的仓库和分类\",{\"1\":{\"416\":1}}],[\"设置\",{\"1\":{\"415\":2}}],[\"设置协议\",{\"1\":{\"407\":1}}],[\"设置应用描述\",{\"1\":{\"407\":1}}],[\"设置应用版本号\",{\"1\":{\"407\":1}}],[\"设置应用名称\",{\"1\":{\"407\":1}}],[\"设置为动态的变量\",{\"1\":{\"223\":1}}],[\"设计原理\",{\"1\":{\"186\":3}}],[\"设计模式\",{\"0\":{\"279\":1},\"2\":{\"157\":1,\"166\":1}}],[\"动画属性的好处就是可以将自定义的动画重复使用\",{\"1\":{\"395\":1}}],[\"动画结束\",{\"1\":{\"392\":1}}],[\"动画开始\",{\"1\":{\"392\":1}}],[\"动画钩子实践\",{\"0\":{\"384\":1}}],[\"动画\",{\"1\":{\"312\":1}}],[\"动画时长参数\",{\"1\":{\"223\":1}}],[\"动画实现的基本原理\",{\"0\":{\"222\":1}}],[\"动画实践\",{\"1\":{\"186\":1}}],[\"或事件监听器应用前调用\",{\"1\":{\"311\":1}}],[\"或当动画有一个延迟未开始播放时\",{\"1\":{\"222\":1}}],[\"或者\",{\"1\":{\"364\":1}}],[\"或者直接挂载到全局\",{\"1\":{\"357\":1}}],[\"或者点个赞再走吧\",{\"1\":{\"319\":1}}],[\"或者推迟不必要资源的下载以提高页面负载\",{\"1\":{\"243\":1}}],[\"或者继承thread类\",{\"1\":{\"143\":1}}],[\"或者hidden=\",{\"1\":{\"88\":1}}],[\"或者visibility\",{\"1\":{\"88\":1}}],[\"或者触发事件时\",{\"1\":{\"29\":1}}],[\"带缩放的动画如下\",{\"1\":{\"221\":1}}],[\"组合起来使用场景更广\",{\"1\":{\"228\":1}}],[\"组合我们列表动画\",{\"1\":{\"228\":1}}],[\"组合动画如下\",{\"1\":{\"221\":1}}],[\"组件还是\",{\"1\":{\"313\":1}}],[\"组件\",{\"0\":{\"312\":1},\"1\":{\"312\":1}}],[\"组件的key\",{\"1\":{\"259\":1}}],[\"组件也会按预期渲染\",{\"1\":{\"235\":1}}],[\"组件就可以按预期渲染了\",{\"1\":{\"234\":1}}],[\"组件级\",{\"1\":{\"208\":1}}],[\"组件之间通信\",{\"0\":{\"75\":1}}],[\"组件引用\",{\"0\":{\"64\":1}}],[\"组件化\",{\"0\":{\"74\":1},\"1\":{\"58\":1}}],[\"录制软件限制\",{\"1\":{\"221\":1}}],[\"禁止转载\",{\"1\":{\"221\":1}}],[\"原生的localstorage只能监听同源地址下不同页面的localstorage变化\",{\"1\":{\"329\":1}}],[\"原创文章\",{\"1\":{\"221\":1}}],[\"原理\",{\"0\":{\"9\":1,\"14\":1,\"19\":1}}],[\"明确这是个静态的\",{\"1\":{\"218\":1}}],[\"计算和渲染的时候超过16\",{\"1\":{\"217\":1}}],[\"与firbe架构对应的是老版本的stack架构\",{\"1\":{\"217\":1}}],[\"与之相连的边数组集合作为value\",{\"1\":{\"102\":1}}],[\"刷新率\",{\"1\":{\"217\":1}}],[\"等待下载完毕\",{\"1\":{\"408\":1}}],[\"等待下次的更新\",{\"1\":{\"272\":1}}],[\"等待下一轮minor\",{\"1\":{\"140\":1}}],[\"等时间充裕的时候再重新更新\",{\"1\":{\"217\":1}}],[\"把时间让给下一个更新任务\",{\"1\":{\"217\":1}}],[\"把你们老板叫出来\",{\"1\":{\"154\":1,\"155\":1}}],[\"像react这样大动干戈\",{\"1\":{\"215\":1}}],[\"函数实现如下\",{\"1\":{\"323\":1}}],[\"函数\",{\"0\":{\"212\":1,\"213\":1}}],[\"压缩算法\",{\"1\":{\"241\":1}}],[\"压缩配置\",{\"1\":{\"241\":1}}],[\"压缩\",{\"1\":{\"208\":1}}],[\"架构\",{\"0\":{\"217\":1}}],[\"架构不同导致的\",{\"1\":{\"208\":1}}],[\"架构模式的状态管理库\",{\"1\":{\"182\":1}}],[\"元素\",{\"1\":{\"263\":1}}],[\"元素就从上边进入\",{\"1\":{\"226\":1}}],[\"元素就从右边进入\",{\"1\":{\"225\":1}}],[\"元素级\",{\"1\":{\"208\":1}}],[\"元素的\",{\"1\":{\"82\":1}}],[\"元素的事件\",{\"1\":{\"82\":1}}],[\"扩展名\",{\"1\":{\"409\":1}}],[\"扩展插件的能力\",{\"1\":{\"400\":1}}],[\"扩展之后的代码如下\",{\"1\":{\"296\":1}}],[\"扩展字段\",{\"1\":{\"296\":1}}],[\"扩展ui\",{\"1\":{\"208\":1}}],[\"扩展逻辑\",{\"1\":{\"208\":1}}],[\"主题通过默认的配置就提供了丰富的开箱即用的功能\",{\"1\":{\"417\":1}}],[\"主题和默认主题相似\",{\"1\":{\"405\":1}}],[\"主流的描述方式分为\",{\"1\":{\"208\":1}}],[\"主要功能是新增了一些图标\",{\"1\":{\"405\":1}}],[\"主要通过监听navigator\",{\"1\":{\"319\":1}}],[\"主要通过扩展已有的类增加新功能\",{\"1\":{\"164\":1}}],[\"主要将用户插件排序\",{\"1\":{\"303\":1}}],[\"主要是解析配置文件\",{\"1\":{\"296\":1}}],[\"主要使用child\",{\"1\":{\"286\":1}}],[\"主要采用styled\",{\"1\":{\"223\":1}}],[\"主要还是因为数据结构和算法方面比较薄弱\",{\"1\":{\"120\":1}}],[\"果断就下单了\",{\"1\":{\"206\":1}}],[\"读懂react源码就不是难事了\",{\"1\":{\"257\":1}}],[\"读书分享\",{\"0\":{\"206\":1}}],[\"读完这本书\",{\"1\":{\"119\":1}}],[\"唯一的不同之处是\",{\"1\":{\"202\":1}}],[\"唯一的瑕疵是before\",{\"1\":{\"42\":1}}],[\"获取当前hook依赖项\",{\"1\":{\"202\":1}}],[\"获取当前hook状态\",{\"1\":{\"202\":1}}],[\"缓存相关\",{\"1\":{\"259\":1}}],[\"缓存回调函数和依赖\",{\"1\":{\"202\":1}}],[\"缓存回调函数返回值和依赖\",{\"1\":{\"201\":1}}],[\"缓存中间值\",{\"1\":{\"26\":1,\"27\":1,\"28\":1}}],[\"拿到当前的hook依赖项\",{\"1\":{\"201\":1}}],[\"拿到当前的hook状态\",{\"1\":{\"201\":1}}],[\"拿到callback和deps\",{\"1\":{\"201\":1,\"202\":1}}],[\"保持返回值\",{\"1\":{\"201\":1}}],[\"保存的链状数据结构\",{\"1\":{\"270\":1}}],[\"保存着不同的数据\",{\"1\":{\"270\":1}}],[\"保存当前线程\",{\"1\":{\"143\":1}}],[\"保存订阅者\",{\"1\":{\"15\":1}}],[\"保存在observers中\",{\"1\":{\"15\":1}}],[\"答案是完全可以\",{\"1\":{\"197\":1}}],[\"答案是肯定的\",{\"1\":{\"182\":1}}],[\"实践心得\",{\"0\":{\"393\":1}}],[\"实践到这\",{\"1\":{\"390\":1}}],[\"实践\",{\"0\":{\"386\":1}}],[\"实践得真知\",{\"0\":{\"304\":1}}],[\"实际上这个打印的结果是false\",{\"1\":{\"353\":1}}],[\"实际上是\",{\"1\":{\"312\":1}}],[\"实际的fiber树状链表结构如下\",{\"1\":{\"271\":1}}],[\"实际是\",{\"1\":{\"192\":1}}],[\"实现这个动画\",{\"1\":{\"387\":1,\"388\":1}}],[\"实现如下\",{\"1\":{\"324\":1,\"325\":1}}],[\"实现其余基础动画的方式与此类似\",{\"1\":{\"223\":1}}],[\"实现图\",{\"0\":{\"103\":1}}],[\"实现\",{\"0\":{\"10\":1,\"15\":1,\"20\":1,\"154\":1,\"296\":1,\"331\":1,\"332\":1,\"334\":1}}],[\"非\",{\"1\":{\"192\":1}}],[\"事情是这样的\",{\"1\":{\"283\":1}}],[\"事实上不止子组件\",{\"1\":{\"279\":1}}],[\"事实上\",{\"1\":{\"192\":1}}],[\"事件发布器\",{\"1\":{\"279\":1}}],[\"事件订阅器\",{\"1\":{\"279\":1}}],[\"事件通道\",{\"1\":{\"161\":1}}],[\"事件处理\",{\"0\":{\"65\":1}}],[\"取消订阅\",{\"1\":{\"191\":1}}],[\"被移除就发布\",{\"1\":{\"333\":1}}],[\"被删除就每个key发布事件\",{\"1\":{\"333\":1}}],[\"被修改就发布事件\",{\"1\":{\"333\":1}}],[\"被react团队抛弃了\",{\"1\":{\"217\":1}}],[\"被惊艳到了\",{\"1\":{\"190\":1}}],[\"被越来越多的开发者和公司所采用\",{\"1\":{\"58\":1}}],[\"优先级相关的属性\",{\"1\":{\"263\":1}}],[\"优先级相关\",{\"1\":{\"259\":1}}],[\"优化配置之后更好一点\",{\"1\":{\"242\":1}}],[\"优美的v\",{\"0\":{\"384\":1}}],[\"优美的reactl列表动画\",{\"0\":{\"221\":1}}],[\"优美的\",{\"1\":{\"186\":1}}],[\"优点\",{\"0\":{\"150\":1}}],[\"叮~\",{\"1\":{\"186\":1}}],[\"糟了\",{\"0\":{\"195\":1},\"1\":{\"186\":1}}],[\"🤔usememo还可以这样用\",{\"0\":{\"195\":1}}],[\"🤔usememo\",{\"1\":{\"186\":1}}],[\"🤮\",{\"1\":{\"186\":1}}],[\"🤮是时候放弃usestate了\",{\"1\":{\"176\":1}}],[\"藏在源码里的xx\",{\"1\":{\"274\":1}}],[\"藏在源码里的传呼机\",{\"1\":{\"274\":1}}],[\"藏在源码里的五指山🎉\",{\"1\":{\"196\":1}}],[\"藏在源码里的紧箍咒🎉\",{\"0\":{\"256\":1}}],[\"藏在源码里的紧箍咒\",{\"1\":{\"186\":1,\"232\":1,\"269\":1,\"274\":1,\"328\":1}}],[\"藏在源码里的两个圈🎉\",{\"0\":{\"268\":1}}],[\"藏在源码里的两个圈\",{\"1\":{\"186\":1,\"232\":1,\"257\":1,\"274\":1,\"328\":1}}],[\"藏在源码里的排位赛\",{\"1\":{\"186\":1,\"274\":1}}],[\"干货满满\",{\"1\":{\"186\":3}}],[\"足以说明它的好用\",{\"1\":{\"185\":1}}],[\"足见它地优秀了\",{\"1\":{\"43\":1}}],[\"迅速获得\",{\"1\":{\"185\":1}}],[\"凭借小巧的体积\",{\"1\":{\"185\":1}}],[\"社区中间件也十分丰富\",{\"1\":{\"184\":1}}],[\"注意是接口\",{\"1\":{\"341\":1}}],[\"注意\",{\"1\":{\"183\":1,\"347\":1,\"358\":3}}],[\"注意到count和fib都是未执行的函数\",{\"1\":{\"28\":1}}],[\"监听localstorage\",{\"1\":{\"337\":1}}],[\"监听\",{\"0\":{\"337\":1},\"1\":{\"358\":1}}],[\"监听网络状态\",{\"1\":{\"319\":2}}],[\"监听外部数据变化\",{\"1\":{\"247\":1}}],[\"监听状态变化\",{\"1\":{\"183\":1}}],[\"监听变化\",{\"0\":{\"183\":1}}],[\"监听变量的变化\",{\"0\":{\"71\":1}}],[\"变成\",{\"1\":{\"396\":1}}],[\"变化\",{\"0\":{\"337\":1}}],[\"变化时\",{\"1\":{\"183\":1}}],[\"变量名为workinprogress\",{\"1\":{\"272\":1}}],[\"变为\",{\"1\":{\"72\":2,\"73\":2}}],[\"步骤\",{\"1\":{\"182\":1}}],[\"提供了扩展主题\",{\"1\":{\"400\":1}}],[\"提供了两个版本的包\",{\"1\":{\"192\":1}}],[\"提供的创建\",{\"1\":{\"311\":1}}],[\"提供的\",{\"1\":{\"302\":1}}],[\"提供的styled方法定义css\",{\"1\":{\"223\":1}}],[\"提供器组件\",{\"1\":{\"182\":1}}],[\"提高加载速度\",{\"0\":{\"93\":1}}],[\"提高用户体验\",{\"0\":{\"92\":1}}],[\"然而\",{\"1\":{\"235\":1,\"312\":1,\"416\":1}}],[\"然而随着\",{\"1\":{\"182\":1}}],[\"然后回到评论仓库\",{\"1\":{\"416\":1}}],[\"然后编译阶段重新拼接为一个完整的动画\",{\"1\":{\"392\":1}}],[\"然后根据列表渲染的index为奇数或偶数选择不同的动画\",{\"1\":{\"389\":1}}],[\"然后根据初始参数\",{\"1\":{\"323\":1,\"325\":1}}],[\"然后使用watcheffect打印\",{\"1\":{\"375\":1}}],[\"然后通过this\",{\"1\":{\"347\":1}}],[\"然后建立监听事件\",{\"1\":{\"318\":2}}],[\"然后插入\",{\"1\":{\"311\":1}}],[\"然后和内置的插件配置合并\",{\"1\":{\"303\":1}}],[\"然后就被好几个同事\",{\"1\":{\"283\":1}}],[\"然后npm\",{\"1\":{\"283\":1}}],[\"然后渲染在页面中\",{\"1\":{\"272\":1}}],[\"然后进行更新\",{\"1\":{\"263\":1}}],[\"然后\",{\"1\":{\"195\":1}}],[\"然后打了个响指\",{\"1\":{\"154\":1}}],[\"然后打了个响指空空\",{\"1\":{\"154\":1,\"155\":1}}],[\"然后将fiberrootnode的current属性指向workinprogress成为新的curent属性\",{\"1\":{\"272\":1}}],[\"然后将vnode渲染在真实dom里\",{\"1\":{\"216\":1}}],[\"然后将to区和from区调换身份\",{\"1\":{\"140\":1}}],[\"然后将现在的空闲区标记为使用区\",{\"1\":{\"139\":1}}],[\"然后又执行小段的gc\",{\"1\":{\"139\":1}}],[\"然后清除\",{\"1\":{\"138\":1}}],[\"然后对可回收的内存使用回收器进行回收\",{\"1\":{\"138\":1}}],[\"然后按值比较\",{\"1\":{\"132\":1}}],[\"然后娓娓道来\",{\"1\":{\"126\":1}}],[\"然后举例说明差异\",{\"1\":{\"118\":1}}],[\"然后在合适的时机将这棵树渲染在屏幕上\",{\"1\":{\"258\":1}}],[\"然后在往上推\",{\"1\":{\"112\":1}}],[\"然后在控制台操作\",{\"1\":{\"20\":1}}],[\"然后像\",{\"1\":{\"64\":1}}],[\"然后再目标环境运行代码\",{\"1\":{\"53\":1}}],[\"然后才会被运行在模板机器中\",{\"1\":{\"48\":1}}],[\"然后才能被系统识别并运行\",{\"1\":{\"47\":1}}],[\"然后才是最新的count\",{\"1\":{\"41\":1}}],[\"然后是2222\",{\"1\":{\"41\":1}}],[\"然后返回value\",{\"1\":{\"10\":1,\"15\":1}}],[\"触发所有\",{\"1\":{\"302\":1}}],[\"触发更新\",{\"1\":{\"272\":1}}],[\"触发mounted阶段监听事件的回调函数\",{\"1\":{\"214\":1}}],[\"触发订阅的回调函数\",{\"1\":{\"191\":1}}],[\"触发相应的\",{\"1\":{\"182\":1}}],[\"触发gc\",{\"1\":{\"140\":1}}],[\"单位为b\",{\"1\":{\"241\":1}}],[\"单独声明\",{\"1\":{\"214\":1}}],[\"单向流动\",{\"1\":{\"182\":1}}],[\"单例模式的本质就是共享同一个作用域链\",{\"1\":{\"159\":1}}],[\"单例模式的精髓就是不管一个构造函数被实例化多少次\",{\"1\":{\"159\":1}}],[\"单例模式\",{\"0\":{\"159\":1}}],[\"地址点这里\",{\"1\":{\"180\":1}}],[\"地址相同时才相等\",{\"1\":{\"132\":1}}],[\"感激不尽\",{\"1\":{\"417\":1}}],[\"感受下\",{\"1\":{\"304\":1}}],[\"感谢\",{\"1\":{\"372\":1}}],[\"感谢你的观看\",{\"1\":{\"288\":1}}],[\"感谢你的阅读\",{\"1\":{\"243\":1,\"319\":1}}],[\"感谢大家的捧场\",{\"1\":{\"279\":1}}],[\"感谢大佬oncc指正\",{\"1\":{\"236\":1}}],[\"感谢吃山鬼的神仙大佬指正\",{\"1\":{\"236\":1}}],[\"感谢各位的观看\",{\"1\":{\"177\":1}}],[\"感兴趣的小伙伴关注后联系我即可入群\",{\"1\":{\"300\":1}}],[\"感兴趣的小伙伴可以下载体验一番\",{\"1\":{\"297\":1}}],[\"感兴趣的小伙伴可以关注我公众号\",{\"1\":{\"277\":1}}],[\"感兴趣的小伙伴快点来吧\",{\"1\":{\"21\":1}}],[\"感兴趣的小伙伴快去关注我了解详情吧\",{\"1\":{\"3\":1}}],[\"感兴趣的话可以关注我的微信公众号\",{\"1\":{\"144\":1}}],[\"→\",{\"1\":{\"177\":1}}],[\"语法如下\",{\"1\":{\"311\":1}}],[\"语法\",{\"1\":{\"278\":1}}],[\"语法转换\",{\"1\":{\"208\":1}}],[\"语法上的改进使用起来十分舒适\",{\"1\":{\"176\":1}}],[\"语言本身\",{\"1\":{\"142\":1}}],[\"语言类型\",{\"0\":{\"129\":1}}],[\"语言设计\",{\"1\":{\"126\":1}}],[\"语言特性\",{\"1\":{\"126\":1}}],[\"很多人巧妙的使用它来组件通信\",{\"1\":{\"356\":1}}],[\"很早就阅读了电子版的\",{\"1\":{\"206\":1}}],[\"很实用\",{\"1\":{\"174\":1}}],[\"很明显这是javascript的闭包机制实现的\",{\"1\":{\"159\":1}}],[\"英文原版15\",{\"1\":{\"172\":1}}],[\"助你玩转react学习和开发\",{\"1\":{\"168\":1}}],[\"装饰器模式\",{\"0\":{\"164\":1},\"1\":{\"164\":1}}],[\"采用不同的策略解决开发中的问题\",{\"1\":{\"163\":1}}],[\"采用aot编译技术的框架\",{\"1\":{\"49\":1}}],[\"策略模式可以在不同的时机\",{\"1\":{\"163\":1}}],[\"策略模式\",{\"0\":{\"163\":1}}],[\"必须通过中介者同步信息\",{\"1\":{\"162\":1}}],[\"必须自动装箱成为包装类才能调用类型方法\",{\"1\":{\"130\":1}}],[\"订阅轻量级框架eventbus\",{\"1\":{\"356\":1}}],[\"订阅\",{\"1\":{\"191\":1}}],[\"订阅器\",{\"1\":{\"161\":1}}],[\"订阅者通过subscribe功能和topic绑定\",{\"1\":{\"161\":1}}],[\"订阅者模式\",{\"1\":{\"161\":1}}],[\"订阅模式实现\",{\"1\":{\"161\":1}}],[\"订阅模式提供了主题\",{\"1\":{\"161\":1}}],[\"订阅模式\",{\"0\":{\"161\":1}}],[\"发起\",{\"1\":{\"358\":1}}],[\"发起事件\",{\"1\":{\"358\":1}}],[\"发现很少被我用到的vue动画神器\",{\"1\":{\"385\":1}}],[\"发现了几个相似的需求\",{\"1\":{\"295\":1}}],[\"发现是徒劳的\",{\"1\":{\"312\":1}}],[\"发现是app组件状态发生改变了\",{\"1\":{\"272\":1}}],[\"发现是因为没有压缩\",{\"1\":{\"241\":1}}],[\"发现它并没有我之前想象的那么难理解\",{\"1\":{\"257\":1}}],[\"发现组件无法按预期渲染了\",{\"1\":{\"235\":1}}],[\"发现你曾经邂逅过的一切\",{\"1\":{\"29\":1}}],[\"发布后清空记录key的数组\",{\"1\":{\"333\":1}}],[\"发布器\",{\"1\":{\"161\":1}}],[\"发布\",{\"0\":{\"161\":1},\"1\":{\"161\":2}}],[\"观察者\",{\"1\":{\"160\":1}}],[\"观察者模式主要由四个角色组成\",{\"1\":{\"160\":1}}],[\"观察者模式主要是通过一个目标\",{\"1\":{\"160\":1}}],[\"观察者模式\",{\"0\":{\"160\":1}}],[\"目录\",{\"1\":{\"409\":2}}],[\"目录下的文件路径\",{\"1\":{\"409\":1}}],[\"目录下的\",{\"1\":{\"408\":1}}],[\"目标\",{\"1\":{\"160\":1}}],[\"目前还没有类似的插件\",{\"1\":{\"243\":1}}],[\"目前来看两者差距不大\",{\"1\":{\"242\":1}}],[\"目前已经1\",{\"1\":{\"177\":1}}],[\"目前已经41\",{\"1\":{\"174\":1}}],[\"目前6\",{\"1\":{\"176\":1}}],[\"目前17k的⭐\",{\"1\":{\"173\":1}}],[\"目前1\",{\"1\":{\"171\":1}}],[\"目前7\",{\"1\":{\"170\":1}}],[\"目前有两本名为\",{\"1\":{\"121\":1}}],[\"目前前端框架的aot方案有两种\",{\"1\":{\"49\":1}}],[\"包含自动部署\",{\"0\":{\"399\":1}}],[\"包含整个应用的状态信息和租价信息\",{\"1\":{\"265\":1}}],[\"包括父子组件\",{\"1\":{\"353\":1}}],[\"包体积为\",{\"1\":{\"241\":1}}],[\"包裹你的组件\",{\"1\":{\"218\":1}}],[\"包装了一层的返回值\",{\"1\":{\"192\":1}}],[\"包装类\",{\"0\":{\"130\":1}}],[\"包的\",{\"1\":{\"192\":1}}],[\"包教包会源码点击这里\",{\"1\":{\"158\":1}}],[\"俺都要了\",{\"1\":{\"154\":1,\"155\":1}}],[\"爷不差钱\",{\"1\":{\"154\":1,\"155\":1}}],[\"萨克斯\",{\"1\":{\"154\":1,\"155\":1}}],[\"沙沙\",{\"1\":{\"154\":2,\"155\":3}}],[\"沙沙分别走了上来\",{\"1\":{\"154\":2,\"155\":1}}],[\"空空\",{\"1\":{\"154\":2,\"155\":3}}],[\"k\",{\"1\":{\"319\":2}}],[\"kb\",{\"1\":{\"243\":1}}],[\"keyof\",{\"1\":{\"319\":1}}],[\"keys\",{\"1\":{\"296\":4,\"333\":7}}],[\"key\",{\"1\":{\"240\":2,\"259\":5,\"296\":4,\"333\":15,\"334\":2,\"336\":2}}],[\"key=\",{\"1\":{\"223\":1,\"225\":2,\"226\":2,\"227\":2}}],[\"keyframes`\",{\"1\":{\"223\":3,\"228\":1}}],[\"keyframes\",{\"1\":{\"222\":1,\"223\":2,\"312\":1,\"314\":1,\"387\":1,\"388\":1,\"389\":2}}],[\"kongkong\",{\"1\":{\"154\":2}}],[\"kruskal\",{\"0\":{\"99\":1}}],[\"递给唐唐\",{\"1\":{\"154\":1,\"155\":1}}],[\"递归\",{\"1\":{\"109\":1}}],[\"岂不美哉\",{\"1\":{\"154\":1,\"155\":1}}],[\"路由懒加载\",{\"1\":{\"242\":1}}],[\"路上消遣\",{\"1\":{\"154\":1,\"155\":1}}],[\"路径\",{\"1\":{\"97\":1}}],[\"弟子马上要出发了\",{\"1\":{\"154\":1,\"155\":1}}],[\"拉住唐唐的手道\",{\"1\":{\"154\":1,\"155\":1}}],[\"边点边念叨到\",{\"1\":{\"154\":1,\"155\":1}}],[\"边穿衣服边对身边的白骨精说道\",{\"1\":{\"154\":1,\"155\":1}}],[\"边解释边执行\",{\"1\":{\"129\":1}}],[\"啥档次\",{\"1\":{\"154\":1,\"155\":1}}],[\"唐唐满意的点了点头\",{\"1\":{\"154\":1,\"155\":1}}],[\"唐唐\",{\"1\":{\"154\":1,\"155\":1}}],[\"唐唐接过平板\",{\"1\":{\"154\":1,\"155\":1}}],[\"唐唐嚣张的骂道\",{\"1\":{\"154\":1,\"155\":1}}],[\"唐唐拖着长长的背影\",{\"1\":{\"154\":1,\"155\":1}}],[\"施主想来些啥\",{\"1\":{\"154\":1,\"155\":1}}],[\"鞠躬道\",{\"1\":{\"154\":1,\"155\":1}}],[\"几个不常用\",{\"1\":{\"186\":1}}],[\"几个容易混淆的变量🎉\",{\"1\":{\"232\":1,\"269\":1,\"274\":1,\"328\":1}}],[\"几个容易混淆的变量\",{\"1\":{\"186\":1}}],[\"几个苦行僧打扮的服务员迎了上来\",{\"1\":{\"154\":1,\"155\":1}}],[\"几多坎坷\",{\"1\":{\"116\":1}}],[\"走进了灵山白金翰佛堂\",{\"1\":{\"154\":1,\"155\":1}}],[\"夕阳西下\",{\"1\":{\"154\":1,\"155\":1}}],[\"给react套上了神秘的面纱\",{\"1\":{\"273\":1}}],[\"给我来一个空空\",{\"1\":{\"154\":1}}],[\"给我来一个\",{\"1\":{\"154\":1,\"155\":3}}],[\"给你安排了\",{\"1\":{\"154\":2,\"155\":3}}],[\"戒戒\",{\"1\":{\"154\":4,\"155\":4}}],[\"亲\",{\"1\":{\"154\":2,\"155\":3}}],[\"随后夺门而出\",{\"1\":{\"154\":1,\"155\":1}}],[\"随后使出了他的看家本领\",{\"1\":{\"154\":1,\"155\":3}}],[\"随着前端的框架的出现\",{\"1\":{\"48\":1}}],[\"随着ajax的出现\",{\"1\":{\"47\":1}}],[\"阿弥陀佛\",{\"1\":{\"154\":2,\"155\":4}}],[\"口念\",{\"1\":{\"154\":1,\"155\":3}}],[\"双缓存机制\",{\"0\":{\"216\":1,\"272\":1}}],[\"双手合十\",{\"1\":{\"154\":2,\"155\":4}}],[\"双向绑定\",{\"0\":{\"66\":1}}],[\"规定具体的命令需要实现的接口\",{\"1\":{\"153\":1}}],[\"命令接口\",{\"1\":{\"153\":2}}],[\"命令模式需要的角色分别是\",{\"1\":{\"153\":1}}],[\"命令模式的使用场景有\",{\"1\":{\"152\":1}}],[\"命令模式的功能是将一个请求或者操作包装在一个对象中\",{\"1\":{\"149\":1}}],[\"命令模式\",{\"0\":{\"148\":1}}],[\"客户端\",{\"1\":{\"153\":2,\"154\":1}}],[\"撤销或者重做某些操作时\",{\"1\":{\"152\":1}}],[\"缺点是\",{\"1\":{\"405\":1}}],[\"缺点\",{\"0\":{\"151\":1,\"360\":1}}],[\"另一方面\",{\"1\":{\"216\":1,\"272\":1}}],[\"另一方面可以根据不通过的请求对客户进行参数化调用\",{\"1\":{\"150\":1}}],[\"另外需要开启解构props响应式功能\",{\"1\":{\"371\":1}}],[\"另外对于多个监听的地方\",{\"1\":{\"360\":1}}],[\"另外通过alternate引出并介绍了双缓存机制\",{\"1\":{\"273\":1}}],[\"另外我们还发现\",{\"1\":{\"271\":1}}],[\"另外还提供了高等进阶的一些方法\",{\"1\":{\"174\":1}}],[\"另外注意\",{\"1\":{\"125\":1}}],[\"另外\",{\"1\":{\"41\":1,\"129\":1,\"138\":1,\"413\":1}}],[\"另外组件被移除时也会被执行\",{\"1\":{\"41\":1}}],[\"思考\",{\"0\":{\"243\":1}}],[\"思想\",{\"0\":{\"149\":1,\"391\":1}}],[\"思路再打开\",{\"0\":{\"228\":1}}],[\"思路打开\",{\"0\":{\"224\":1}}],[\"思路\",{\"0\":{\"330\":1},\"1\":{\"99\":1,\"100\":1}}],[\"介绍\",{\"0\":{\"148\":1}}],[\"介绍页\",{\"0\":{\"1\":1}}],[\"祝大家都能拿到满意的offer\",{\"1\":{\"144\":1}}],[\"四\",{\"0\":{\"144\":1},\"1\":{\"274\":1}}],[\"效果如下\",{\"1\":{\"228\":1,\"374\":1,\"375\":1,\"376\":1,\"414\":1}}],[\"效果更佳哦\",{\"1\":{\"126\":1}}],[\"效率反而降低了\",{\"1\":{\"143\":1}}],[\"做了一部分关键的优化\",{\"1\":{\"215\":1}}],[\"做点啥吧\",{\"1\":{\"143\":1}}],[\"做为多年学习javascript的开发者\",{\"1\":{\"116\":1}}],[\"做为订阅者\",{\"1\":{\"27\":1}}],[\"运行\",{\"1\":{\"370\":1}}],[\"运行中\",{\"1\":{\"143\":1}}],[\"运行时\",{\"0\":{\"50\":1},\"1\":{\"301\":1}}],[\"运行时💎\",{\"0\":{\"46\":1}}],[\"操作对象\",{\"1\":{\"143\":1}}],[\"锁\",{\"1\":{\"143\":1}}],[\"其余使用这个属性的地方也会跟着改变\",{\"1\":{\"355\":1}}],[\"其余想要对这个变量进行写操作的线程必须等待该线程写操作结束\",{\"1\":{\"143\":1}}],[\"其中\",{\"1\":{\"311\":1,\"408\":1}}],[\"其中一个状态钩子如下\",{\"1\":{\"176\":1}}],[\"其他配置\",{\"1\":{\"241\":2}}],[\"其他的手段\",{\"0\":{\"218\":1}}],[\"其实从他们的代码来看\",{\"1\":{\"283\":1}}],[\"其实这是react的一种优化策略\",{\"1\":{\"272\":1}}],[\"其实原因在之前的文章中也提到过\",{\"1\":{\"234\":1}}],[\"其实我考虑到基础动画\",{\"1\":{\"228\":1}}],[\"其实\",{\"1\":{\"215\":1}}],[\"其实就是ctx上下文\",{\"1\":{\"213\":1}}],[\"其次就是默认提供的功能不同\",{\"1\":{\"400\":1}}],[\"其次\",{\"1\":{\"139\":1,\"416\":1}}],[\"解耦才能算得上是优秀的系统\",{\"1\":{\"161\":1}}],[\"解决的方案就是增加安全机制\",{\"1\":{\"143\":1}}],[\"解析编译结果为javascript代码\",{\"1\":{\"53\":1}}],[\"线程\",{\"1\":{\"143\":4}}],[\"线程名\",{\"1\":{\"143\":1}}],[\"线程安全问题\",{\"1\":{\"143\":1}}],[\"线程同步消息的方式是\",{\"1\":{\"143\":1}}],[\"消费者组件\",{\"1\":{\"182\":2,\"183\":2}}],[\"消费上下文\",{\"1\":{\"38\":1}}],[\"消息同步\",{\"1\":{\"143\":1}}],[\"睡眠\",{\"1\":{\"143\":1}}],[\"进入update阶段\",{\"1\":{\"201\":1,\"202\":1}}],[\"进入运行中状态\",{\"1\":{\"143\":1}}],[\"进行替换\",{\"1\":{\"287\":1}}],[\"进行界面更新\",{\"1\":{\"182\":1}}],[\"进行派发\",{\"1\":{\"182\":1}}],[\"进行交互\",{\"1\":{\"182\":1}}],[\"进阶利器\",{\"1\":{\"120\":1}}],[\"之后进入就绪状态\",{\"1\":{\"143\":1}}],[\"之后还有严格的验证措施\",{\"1\":{\"140\":1}}],[\"多个fibernode作为基本节点构成fiber\",{\"1\":{\"259\":1}}],[\"多个线程对同一个全局变量进行写操作时\",{\"1\":{\"143\":1}}],[\"多线程就已经可以满足日常的并发需求了\",{\"1\":{\"143\":1}}],[\"多态的表现\",{\"1\":{\"135\":1}}],[\"多态\",{\"1\":{\"135\":1}}],[\"否则什么都不做\",{\"1\":{\"313\":1}}],[\"否则返回原代码\",{\"1\":{\"285\":1}}],[\"否则无效\",{\"1\":{\"241\":1}}],[\"否则重新赋值\",{\"1\":{\"202\":1}}],[\"否则重新计算赋值\",{\"1\":{\"201\":1}}],[\"否则进入to区\",{\"1\":{\"140\":1}}],[\"否则称为无序图\",{\"1\":{\"97\":1}}],[\"虚拟机将发起一次minor\",{\"1\":{\"140\":1}}],[\"区\",{\"1\":{\"140\":1}}],[\"较小的fron\",{\"1\":{\"140\":1}}],[\"较大的eden\",{\"1\":{\"140\":1}}],[\"永生代已经被移除了\",{\"1\":{\"140\":1}}],[\"没赞的捧个人场\",{\"1\":{\"277\":1}}],[\"没错v8新生代确实是借鉴了这里\",{\"1\":{\"140\":1}}],[\"没有了想函数组件的第二条链表\",{\"1\":{\"271\":1}}],[\"没有特定的概念\",{\"1\":{\"182\":1}}],[\"没有自动装箱\",{\"1\":{\"130\":1}}],[\"没有兄弟节点时\",{\"1\":{\"110\":1}}],[\"没有子节点时再回到兄弟节点\",{\"1\":{\"109\":1}}],[\"没有编译时\",{\"1\":{\"47\":1}}],[\"没有\",{\"1\":{\"38\":1}}],[\"严格来说是准可回收\",{\"1\":{\"140\":1}}],[\"自动部署\",{\"0\":{\"415\":1}}],[\"自动生成目录页面\",{\"0\":{\"413\":1}}],[\"自动清除其他开发者console的loader\",{\"1\":{\"408\":1}}],[\"自动监听参数变化\",{\"1\":{\"325\":1}}],[\"自动根据最新参数发生请求\",{\"1\":{\"325\":1}}],[\"自动请求函数\",{\"0\":{\"325\":1}}],[\"自动切换端口\",{\"0\":{\"305\":1}}],[\"自动更新localstroge\",{\"1\":{\"184\":1}}],[\"自给自足的感觉真好\",{\"0\":{\"293\":1}}],[\"自定义文本\",{\"1\":{\"313\":1}}],[\"自定义\",{\"0\":{\"312\":1}}],[\"自定义扩展字段\",{\"1\":{\"296\":1}}],[\"自定义由ref暴露出来的句柄\",{\"1\":{\"253\":1}}],[\"自定义一个轻量级的redux\",{\"1\":{\"251\":1}}],[\"自定义指令\",{\"0\":{\"83\":1,\"313\":1}}],[\"自带的页面服务中\",{\"1\":{\"415\":1}}],[\"自带的\",{\"1\":{\"182\":1}}],[\"自身和成员都被标记时是黑色\",{\"1\":{\"139\":1}}],[\"自身被标记但是成员未被标记时为灰色\",{\"1\":{\"139\":1}}],[\"未被标记时为白色\",{\"1\":{\"139\":1}}],[\"未经允许\",{\"1\":{\"221\":1}}],[\"未经允许禁止转载\",{\"1\":{\"96\":1,\"158\":1,\"384\":1}}],[\"未经许可禁止转载\",{\"1\":{\"125\":1}}],[\"起初\",{\"1\":{\"283\":1,\"311\":1}}],[\"起初的标记清理\",{\"1\":{\"139\":1}}],[\"起来\",{\"1\":{\"54\":1}}],[\"又通过内置的包\",{\"1\":{\"192\":1}}],[\"又将标记阶段切分为多个小段\",{\"1\":{\"139\":1}}],[\"又将新生代区域一分为二\",{\"1\":{\"139\":1}}],[\"又发现了你最近心心念念的svelte的影子\",{\"1\":{\"27\":1}}],[\"老弟好久没来了啊\",{\"1\":{\"154\":1,\"155\":1}}],[\"老年代使用的是full\",{\"1\":{\"140\":1}}],[\"老生代里存放存活周期长的常驻对象\",{\"1\":{\"139\":1}}],[\"老少皆宜\",{\"1\":{\"119\":1}}],[\"新框架尝鲜系列\",{\"1\":{\"409\":1,\"411\":1}}],[\"新功能确实越来越简洁了\",{\"1\":{\"381\":1}}],[\"新的树状链状结构\",{\"1\":{\"271\":1}}],[\"新建\",{\"1\":{\"143\":1}}],[\"新生代使用的是minor\",{\"1\":{\"140\":1}}],[\"新生代特有的gc算法\",{\"1\":{\"140\":1}}],[\"新生代里存放存活周期短的对象\",{\"1\":{\"139\":1}}],[\"新声明的变量会存入使用区\",{\"1\":{\"139\":1}}],[\"新增了时间轴等常用功能\",{\"1\":{\"405\":1}}],[\"新增了\",{\"1\":{\"405\":1}}],[\"新增类型检查\",{\"0\":{\"380\":1}}],[\"新增\",{\"1\":{\"8\":1}}],[\"状态管理库\",{\"1\":{\"189\":1}}],[\"状态\",{\"1\":{\"138\":1,\"143\":1}}],[\"避免形成内存碎片而浪费内存空间\",{\"1\":{\"138\":1}}],[\"避免每次扫描常驻对象\",{\"1\":{\"138\":1}}],[\"清理之后的使用区标记为空闲区\",{\"1\":{\"139\":1}}],[\"清理掉的内存会成为内存碎片\",{\"1\":{\"138\":1}}],[\"清除方案\",{\"1\":{\"139\":1}}],[\"清除也存在很大的缺陷\",{\"1\":{\"138\":1}}],[\"清除没有被标记变量的内存\",{\"1\":{\"138\":1}}],[\"清除\",{\"1\":{\"138\":2}}],[\"该设置的意思是\",{\"1\":{\"415\":1}}],[\"该主题已经自动添加了workflows文件\",{\"1\":{\"415\":1}}],[\"该主题内置了几种常见搜索插件的支持\",{\"1\":{\"414\":1}}],[\"该值为\",{\"1\":{\"296\":1}}],[\"该线程就切换到终止状态\",{\"1\":{\"143\":1}}],[\"该策略分为两步\",{\"1\":{\"138\":1}}],[\"该书被称为\",{\"1\":{\"118\":1}}],[\"标记整理\",{\"1\":{\"140\":2}}],[\"标记清除和三色标记法\",{\"1\":{\"139\":1}}],[\"标记\",{\"1\":{\"138\":2}}],[\"标签的\",{\"1\":{\"92\":1}}],[\"标签的排序\",{\"0\":{\"89\":1}}],[\"标签\",{\"1\":{\"92\":1,\"295\":1,\"408\":1,\"409\":2,\"414\":1}}],[\"标签一样使用它\",{\"1\":{\"64\":1}}],[\"业界的第一种做法是引用计数\",{\"1\":{\"138\":1}}],[\"引入省略了\",{\"1\":{\"358\":3}}],[\"引入到主文件中\",{\"1\":{\"243\":1}}],[\"引入了模板语法和jsx的概念\",{\"1\":{\"48\":1}}],[\"引用计数基本是任何编程语言gc标配了\",{\"1\":{\"138\":1}}],[\"引用计数\",{\"1\":{\"138\":1}}],[\"垃圾回收的整体策略都是一样的\",{\"1\":{\"138\":1}}],[\"垃圾回收\",{\"0\":{\"138\":1}}],[\"符private\",{\"1\":{\"136\":1}}],[\"私有\",{\"1\":{\"136\":1}}],[\"私有属性和公有属性\",{\"0\":{\"136\":1}}],[\"公有\",{\"1\":{\"136\":1}}],[\"公众号回复\",{\"1\":{\"116\":1}}],[\"小\",{\"1\":{\"396\":1}}],[\"小文件小文件众多阻塞的时间就越久\",{\"1\":{\"243\":1}}],[\"小鱼干\",{\"1\":{\"135\":2}}],[\"小字节转换为大字节是自动转换\",{\"1\":{\"131\":1}}],[\"假象\",{\"1\":{\"135\":1}}],[\"短路\",{\"1\":{\"135\":1}}],[\"继承了\",{\"1\":{\"182\":1}}],[\"继承\",{\"0\":{\"214\":1},\"1\":{\"135\":1}}],[\"天生具有面向对象特性\",{\"1\":{\"135\":1}}],[\"面向大众请选择waline\",{\"1\":{\"416\":1}}],[\"面向对象\",{\"0\":{\"135\":1}}],[\"面对躺平同事\",{\"0\":{\"282\":1},\"1\":{\"295\":1}}],[\"面试官就会觉得你是真的了解而不是滥竽充数\",{\"1\":{\"126\":1}}],[\"面试的时候分别说出一两个点\",{\"1\":{\"126\":1}}],[\"数据变化时\",{\"1\":{\"208\":3}}],[\"数据结构会有所不同\",{\"1\":{\"271\":1}}],[\"数据结构与算法javascript描述\",{\"0\":{\"120\":1}}],[\"数据结构和算法\",{\"2\":{\"115\":1}}],[\"数据结构\",{\"0\":{\"96\":1},\"1\":{\"120\":1}}],[\"数组的异同\",{\"0\":{\"133\":1}}],[\"则根据情况选择渲染\",{\"1\":{\"313\":1}}],[\"则直接渲染组件\",{\"1\":{\"313\":1}}],[\"则渲染\",{\"1\":{\"313\":1}}],[\"则重新渲染组件\",{\"1\":{\"313\":1}}],[\"则表示禁用\",{\"1\":{\"296\":3}}],[\"则会都会转换为同类型比较\",{\"1\":{\"132\":1}}],[\"则浅浅的带过\",{\"1\":{\"118\":1}}],[\"由大到小需要手动指定\",{\"1\":{\"131\":1}}],[\"由小到大\",{\"1\":{\"131\":1}}],[\"由于评论需要用户登录到\",{\"1\":{\"416\":1}}],[\"由于最新的功能definemodel是实验特性\",{\"1\":{\"371\":1}}],[\"由于可能是布尔值\",{\"1\":{\"313\":1}}],[\"由于这个操作是转换\",{\"1\":{\"306\":1}}],[\"由于svelte不需要运行时库\",{\"1\":{\"58\":1}}],[\"由于jsx语法过于灵活\",{\"1\":{\"51\":1}}],[\"由于它边解释边执行的特性\",{\"1\":{\"47\":1}}],[\"由于在编译阶段还没有建立变量的响应式机制\",{\"1\":{\"29\":1}}],[\"反而造成了额外的性能消耗\",{\"1\":{\"236\":1}}],[\"反反复复\",{\"1\":{\"139\":1}}],[\"反过来就是自动拆箱\",{\"1\":{\"130\":1}}],[\"反转排序\",{\"1\":{\"89\":1}}],[\"基础动画如下\",{\"1\":{\"221\":1}}],[\"基础上利用react高阶组件功能开发的功能库\",{\"1\":{\"177\":1}}],[\"基本格式如下\",{\"1\":{\"409\":1}}],[\"基本用法\",{\"0\":{\"353\":1}}],[\"基本的结构如下\",{\"1\":{\"284\":1}}],[\"基本原理\",{\"0\":{\"207\":1}}],[\"基本类型可以调用类方法\",{\"1\":{\"130\":1}}],[\"基于前面几次的插件经验\",{\"1\":{\"295\":1}}],[\"基于发布订阅模式实现的响应式\",{\"1\":{\"191\":1}}],[\"基于java内存模型\",{\"1\":{\"143\":1}}],[\"基于上述策略做了很多类似的优化\",{\"1\":{\"138\":1}}],[\"基于vue地服务端渲染框架\",{\"1\":{\"39\":1}}],[\"基于react服务端渲染框架\",{\"1\":{\"39\":1}}],[\"青铜\",{\"0\":{\"128\":1}}],[\"眼球向右上微微瞅一两秒\",{\"1\":{\"126\":1}}],[\"睁大眼睛\",{\"1\":{\"126\":1}}],[\"十分感谢\",{\"1\":{\"319\":1,\"325\":1}}],[\"十分完美\",{\"1\":{\"288\":1}}],[\"十分推荐带星号标记的\",{\"1\":{\"126\":1}}],[\"十分详细\",{\"1\":{\"118\":1,\"170\":1}}],[\"铂金\",{\"0\":{\"137\":1},\"1\":{\"126\":1}}],[\"黄金\",{\"0\":{\"134\":1},\"1\":{\"126\":1}}],[\"说到中大型\",{\"1\":{\"182\":1}}],[\"说说javascript和java的异同点\",{\"1\":{\"126\":1}}],[\"说明该功能启用成功\",{\"1\":{\"416\":1}}],[\"说明\",{\"0\":{\"125\":1}}],[\"所谓万变不离其宗\",{\"1\":{\"222\":1}}],[\"所有带着workinprogressxxx的变量\",{\"1\":{\"272\":1}}],[\"所有的订阅者们不能互相沟通\",{\"1\":{\"162\":1}}],[\"所有的清除阶段\",{\"1\":{\"138\":1}}],[\"所有变量在进入内存前没有标记\",{\"1\":{\"138\":1}}],[\"所幸\",{\"1\":{\"126\":1}}],[\"所以下次设计师拿来充满想象力的动画设计稿\",{\"1\":{\"390\":1}}],[\"所以缺点也是显而易见的\",{\"1\":{\"360\":1}}],[\"所以打印结果中没有name这个属性\",{\"1\":{\"350\":1}}],[\"所以如果你确切的知道要访问的子组件建议使用refs\",{\"1\":{\"347\":1}}],[\"所以它的返回值是数组\",{\"1\":{\"346\":1}}],[\"所以我选择了giscus\",{\"1\":{\"416\":1}}],[\"所以我打算自定义一个hook监听localstorage的变化\",{\"1\":{\"329\":1}}],[\"所以我们定义如下的签名\",{\"1\":{\"296\":1}}],[\"所以我们在面试前多做这类问题的准备\",{\"1\":{\"126\":1}}],[\"所以我们先定义下面的类来描述节点\",{\"1\":{\"101\":1}}],[\"所以参数类型如下\",{\"1\":{\"313\":1}}],[\"所以理解构建流程\",{\"1\":{\"307\":1}}],[\"所以需要使用专用钩子transformindexhtml\",{\"1\":{\"306\":1}}],[\"所以自己写个插件自动切换端口\",{\"1\":{\"305\":1}}],[\"所以对你有帮助话请给我点下赞\",{\"1\":{\"274\":1}}],[\"所以从app组件开始替换子树\",{\"1\":{\"272\":1}}],[\"所以react一方面会为每个dom绑定上次的状态\",{\"1\":{\"272\":1}}],[\"所以fibernode保存的数据比较复杂\",{\"1\":{\"270\":1}}],[\"所以围绕着fiber\",{\"1\":{\"258\":1}}],[\"所以会造成阻塞\",{\"1\":{\"243\":1}}],[\"所以没有使用压缩图片的插件\",{\"1\":{\"241\":1}}],[\"所以没有重载\",{\"1\":{\"135\":1}}],[\"所以最好保留源文件\",{\"1\":{\"241\":1}}],[\"所以接下来\",{\"1\":{\"241\":1}}],[\"所以上面的示例中\",{\"1\":{\"234\":1}}],[\"所以就这样使用了\",{\"1\":{\"228\":1}}],[\"所以每帧最多时间是1s\",{\"1\":{\"217\":1}}],[\"所以每次数据变化\",{\"1\":{\"209\":1}}],[\"所以这种框被架称为元素级框架\",{\"1\":{\"214\":1}}],[\"所以这种框被架称为应用级框架\",{\"1\":{\"209\":1}}],[\"所以这种框架被称为组件级框架\",{\"1\":{\"210\":1}}],[\"所以今天分享下最近的阅读心得\",{\"1\":{\"206\":1}}],[\"所以开头的例子可以按预期运行\",{\"1\":{\"203\":1}}],[\"所以当组件卸载时\",{\"1\":{\"183\":1}}],[\"所以使用过多的线程并发编程\",{\"1\":{\"143\":1}}],[\"所以被设计成单线程语言\",{\"1\":{\"142\":1}}],[\"所以v8采用了三色标记清除\",{\"1\":{\"139\":1}}],[\"所以为了缩短stw时间\",{\"1\":{\"139\":1}}],[\"所以怎么缩短stw的时间也是各语言努力优化的目标\",{\"1\":{\"138\":1}}],[\"所以很多编程语言在具体设计gc时\",{\"1\":{\"138\":1}}],[\"所以很多编程语言都需要提供转码模块\",{\"1\":{\"47\":1}}],[\"所以又出现了标记\",{\"1\":{\"138\":1}}],[\"所以javascript数字的转换是自动的\",{\"1\":{\"131\":1}}],[\"所以十分推荐你进阶的时候去读它\",{\"1\":{\"121\":1}}],[\"所以也被广大开发者称为\",{\"1\":{\"117\":1}}],[\"所以邻接表就是图的精髓所在\",{\"1\":{\"107\":1}}],[\"所以你觉得是运行时的框架好还是编译时的框架好了\",{\"1\":{\"54\":1}}],[\"所以\",{\"1\":{\"51\":1,\"235\":1,\"318\":1,\"392\":1,\"400\":1,\"416\":1}}],[\"所以一个组件的生命周期是从服务器开始的\",{\"1\":{\"39\":1}}],[\"所以只有拿usecontext来将就了\",{\"1\":{\"38\":1}}],[\"所以流程上来说和createeffect一样\",{\"1\":{\"19\":1}}],[\"所以先写一篇试试水\",{\"1\":{\"4\":1}}],[\"作为dom属性时\",{\"1\":{\"347\":1}}],[\"作为单页面应用\",{\"1\":{\"329\":1}}],[\"作为调度的一环\",{\"1\":{\"259\":2}}],[\"作为数据的一环\",{\"1\":{\"259\":2}}],[\"作为架构的一环\",{\"1\":{\"259\":2}}],[\"作为前端\",{\"1\":{\"126\":1}}],[\"作为solid\",{\"1\":{\"5\":1}}],[\"怎么确定内存是否可回收的\",{\"1\":{\"138\":1}}],[\"怎么问你\",{\"0\":{\"126\":1}}],[\"怎么匹配加分项\",{\"0\":{\"124\":1}}],[\"众所周知\",{\"1\":{\"125\":1}}],[\"众里寻他千百度\",{\"1\":{\"29\":1}}],[\"但总的来说\",{\"1\":{\"273\":1}}],[\"但如果你理解了下面的几个概念\",{\"1\":{\"257\":1}}],[\"但这里就不做赘述了\",{\"1\":{\"214\":1}}],[\"但本文旨在帮助读者增加薪酬谈判的底气和筹码\",{\"1\":{\"125\":1}}],[\"但是我们可以很方便的给dom设置动画开始时间\",{\"1\":{\"396\":1}}],[\"但是官方又说了\",{\"1\":{\"365\":1}}],[\"但是这并不是vue最优的通信机制\",{\"1\":{\"356\":1}}],[\"但是这本书却使用了简洁的方法实现了各种数据结构和算法\",{\"1\":{\"120\":1}}],[\"但是由于需求的改变等等不得已原因\",{\"1\":{\"353\":1}}],[\"但是由于每个框架的策略不同\",{\"1\":{\"50\":1}}],[\"但是使用attrs就可以达到事半功倍的效果\",{\"1\":{\"350\":1}}],[\"但是使用多进程的最大的缺点是进程之间消息通信\",{\"1\":{\"143\":1}}],[\"但是反过来则不行\",{\"1\":{\"343\":1}}],[\"但是props是单向数据流的形式\",{\"1\":{\"343\":1}}],[\"但是顺理成章\",{\"1\":{\"319\":1}}],[\"但是又进行了一些扩展\",{\"1\":{\"301\":1}}],[\"但是不影响别人开发时调试\",{\"1\":{\"284\":1}}],[\"但是有个缺点\",{\"1\":{\"284\":1}}],[\"但是还是会有\",{\"1\":{\"240\":1}}],[\"但是还不够优雅\",{\"1\":{\"223\":1}}],[\"但是最近我发现我对它们的使用一直有误解\",{\"1\":{\"231\":1}}],[\"但是最近查阅发现流行的是张容铭著作的版本\",{\"1\":{\"121\":1}}],[\"但是希望可以帮你理解地更深一点\",{\"1\":{\"203\":1}}],[\"但是可以四两拨千斤的hooks\",{\"1\":{\"246\":1}}],[\"但是可以四两拨千斤的hooks🎉\",{\"0\":{\"246\":1}}],[\"但是可以四两拨千斤的\",{\"1\":{\"186\":1}}],[\"但是如果你一开始就使用了$root作为通信机制\",{\"1\":{\"353\":1}}],[\"但是如果当状态的变化不想引起组件的渲染时\",{\"1\":{\"183\":1}}],[\"但是如果使用\",{\"1\":{\"90\":1}}],[\"但是实际开发中\",{\"1\":{\"182\":1}}],[\"但是实现比较简陋\",{\"1\":{\"121\":1}}],[\"但是观察者模式使得concretesuject和concreteobservver耦合在了一起\",{\"1\":{\"161\":1}}],[\"但是引用计数容易因为互相引用导致内存泄露\",{\"1\":{\"138\":1}}],[\"但是它们都会使用这三个属性描述它与它们相邻节点的关系\",{\"1\":{\"271\":1}}],[\"但是它不符合面向对象编程的编程方式\",{\"1\":{\"135\":1}}],[\"但是它的设计智慧\",{\"1\":{\"121\":1}}],[\"但是它的内部是createsignal\",{\"1\":{\"19\":1}}],[\"但是大字节转换为小字节\",{\"1\":{\"131\":1}}],[\"但是很难有机会系统学习某个后端语言\",{\"1\":{\"126\":1}}],[\"但是\",{\"1\":{\"118\":1,\"234\":1,\"242\":1}}],[\"但是总有一条是最短的\",{\"1\":{\"112\":1}}],[\"但是对于后续的查询和变更\",{\"1\":{\"102\":1}}],[\"但是却有着很大的区别\",{\"1\":{\"39\":1}}],[\"但是看写法\",{\"1\":{\"35\":1}}],[\"但是昨天\",{\"1\":{\"24\":1}}],[\"至少熟悉或了解一门后端语言\",{\"0\":{\"124\":1},\"1\":{\"125\":1}}],[\"具体自己设定\",{\"1\":{\"389\":2}}],[\"具体可以参考\",{\"1\":{\"408\":1}}],[\"具体可以参考源码\",{\"1\":{\"223\":1}}],[\"具体可以看这里\",{\"1\":{\"361\":1}}],[\"具体而言\",{\"1\":{\"272\":1}}],[\"具体观察者\",{\"1\":{\"160\":1}}],[\"具体目标\",{\"1\":{\"160\":1}}],[\"具体的返回类型是泛型\",{\"1\":{\"323\":1}}],[\"具体的对应关系\",{\"1\":{\"160\":2}}],[\"具体的目标\",{\"1\":{\"160\":1}}],[\"具体的观察者\",{\"1\":{\"160\":1}}],[\"具体的使用者\",{\"1\":{\"153\":1}}],[\"具体的命令\",{\"1\":{\"153\":3}}],[\"具体请在公众号回复\",{\"1\":{\"121\":1}}],[\"具名插槽\",{\"0\":{\"69\":1}}],[\"行为型和结构型三种\",{\"1\":{\"121\":1}}],[\"常见的设计模式都有\",{\"1\":{\"121\":1}}],[\"常用http状态码的含义\",{\"1\":{\"119\":1}}],[\"⭐⭐⭐\",{\"1\":{\"121\":1}}],[\"⭐⭐⭐⭐\",{\"1\":{\"119\":1,\"120\":1}}],[\"⭐⭐⭐⭐⭐\",{\"1\":{\"117\":1,\"118\":1}}],[\"闭眼入就对了\",{\"1\":{\"120\":1}}],[\"请使用giscus\",{\"1\":{\"416\":1}}],[\"请务必使用该主题提供的脚手架工具创建项目\",{\"1\":{\"407\":1}}],[\"请加\",{\"1\":{\"381\":1}}],[\"请求git\",{\"1\":{\"284\":1}}],[\"请求头的各种含义\",{\"1\":{\"119\":1}}],[\"请不吝指正\",{\"1\":{\"274\":1}}],[\"请看下面的例子\",{\"1\":{\"235\":1}}],[\"请看下面的代码\",{\"1\":{\"233\":1}}],[\"请看👇的代码\",{\"1\":{\"197\":1}}],[\"请及时指正\",{\"1\":{\"21\":1}}],[\"后来开始流行discussions\",{\"1\":{\"416\":1}}],[\"后来想想没经过人家的同意修改人家的代码确实不对\",{\"1\":{\"283\":1}}],[\"后来听说出了实体书\",{\"1\":{\"206\":1}}],[\"后端\",{\"2\":{\"145\":1}}],[\"后端的数据怎么从服务端到达浏览器的\",{\"1\":{\"119\":1}}],[\"后半部分讲解了老牌框架jquery设计的各种设计模式\",{\"1\":{\"121\":1}}],[\"后面的方法主要是操作邻接表\",{\"1\":{\"107\":1}}],[\"后面会详细讲\",{\"1\":{\"35\":1}}],[\"形象生动\",{\"1\":{\"119\":1}}],[\"形成环\",{\"1\":{\"99\":1}}],[\"绝不是空穴来风\",{\"1\":{\"119\":1}}],[\"简体中文\",{\"1\":{\"407\":2}}],[\"简简单单一个vite⚡⚡插件搞定用户的另类需求\",{\"0\":{\"293\":1}}],[\"简易这里保留\",{\"1\":{\"241\":1}}],[\"简单的说就是vue在自己封装的transition组件上检测所有子节点的插入和移除\",{\"1\":{\"392\":1}}],[\"简单的对比\",{\"0\":{\"182\":1},\"1\":{\"182\":1}}],[\"简单几步\",{\"0\":{\"239\":1}}],[\"简单易用\",{\"1\":{\"182\":1}}],[\"简单易用的\",{\"0\":{\"181\":1}}],[\"简单分析之后可以得出结论如下\",{\"1\":{\"28\":1}}],[\"简历\",{\"2\":{\"145\":1,\"146\":1}}],[\"简历上只需写自己最熟悉的一门后端语言就行\",{\"1\":{\"125\":1}}],[\"简洁明了\",{\"1\":{\"119\":1}}],[\"更正\",{\"1\":{\"236\":2}}],[\"更丝滑\",{\"1\":{\"186\":1}}],[\"更多构想\",{\"0\":{\"390\":1}}],[\"更多细节可以参考详细的api文档\",{\"1\":{\"364\":1}}],[\"更多文章\",{\"0\":{\"186\":1}}],[\"更多使用的工具函数可以去仓库中浏览下\",{\"1\":{\"176\":1}}],[\"更新到最新版本\",{\"1\":{\"370\":1}}],[\"更新之后标记出更新前后变动的dom\",{\"1\":{\"272\":1}}],[\"更新之后每个fiber节点的alternate属性都会指向上次的自己\",{\"1\":{\"272\":1}}],[\"更新之后\",{\"1\":{\"271\":1}}],[\"更新细粒度\",{\"1\":{\"208\":1}}],[\"更新\",{\"1\":{\"191\":1}}],[\"更新后触发事件\",{\"1\":{\"182\":1}}],[\"更新内部的value\",{\"1\":{\"10\":1,\"15\":1}}],[\"更像是一本字典\",{\"1\":{\"118\":1}}],[\"讲解作为fiber架构的一环时\",{\"1\":{\"270\":1}}],[\"讲解react使用技巧的开源电子书\",{\"1\":{\"172\":1}}],[\"讲解的比较简单易懂\",{\"1\":{\"121\":1}}],[\"讲解由浅到深\",{\"1\":{\"118\":1}}],[\"讲解详细\",{\"1\":{\"118\":1}}],[\"到仓库的设置页面设置如下的内容\",{\"1\":{\"415\":1}}],[\"到作用域链\",{\"1\":{\"118\":1}}],[\"到这\",{\"1\":{\"27\":1}}],[\"书如其名\",{\"1\":{\"118\":1}}],[\"犀牛书\",{\"1\":{\"118\":4}}],[\"红宝书很详细\",{\"1\":{\"118\":1}}],[\"红宝书\",{\"1\":{\"117\":1,\"118\":1}}],[\"买的是影印版\",{\"1\":{\"117\":1}}],[\"且不深奥\",{\"1\":{\"117\":1}}],[\"内存中又多了个一棵树\",{\"1\":{\"272\":1}}],[\"内存共享时\",{\"1\":{\"143\":1}}],[\"内容介绍\",{\"1\":{\"170\":1,\"171\":1,\"172\":1,\"174\":1,\"176\":1,\"177\":1}}],[\"内容全面\",{\"1\":{\"118\":1}}],[\"内容扎实\",{\"1\":{\"117\":1}}],[\"内置指令\",{\"0\":{\"82\":1}}],[\"推荐上篇\",{\"1\":{\"295\":1}}],[\"推荐理由\",{\"1\":{\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1}}],[\"推荐指数\",{\"1\":{\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1}}],[\"依赖注入和$root一样\",{\"1\":{\"365\":1}}],[\"依赖注入是在provide选项中提供要共享的数据\",{\"1\":{\"363\":1}}],[\"依赖注入\",{\"0\":{\"363\":1}}],[\"依赖收集是无感的\",{\"1\":{\"70\":1}}],[\"依然繁琐\",{\"1\":{\"182\":1}}],[\"依次在这些属性作用的各个阶段抛出钩子函数接受我们前端er自定义的动画或者第三方库里的动画\",{\"1\":{\"392\":1}}],[\"依次来较少无用的更新\",{\"1\":{\"218\":1}}],[\"依次是\",{\"1\":{\"140\":1}}],[\"依次寻找依赖的子对象\",{\"1\":{\"140\":1}}],[\"依次打印\",{\"1\":{\"113\":1}}],[\"找了好久都没找到\",{\"1\":{\"284\":1}}],[\"找出变动的地方\",{\"1\":{\"272\":1}}],[\"找出需要更新的部分\",{\"1\":{\"263\":1}}],[\"找出目标节点到根节点的路径\",{\"1\":{\"112\":1}}],[\"找到变化地地方\",{\"1\":{\"272\":1}}],[\"找到具体更新的vnode并且在内存中更新\",{\"1\":{\"216\":1}}],[\"找到最优的更新路径\",{\"1\":{\"210\":1}}],[\"找到它的父节点\",{\"1\":{\"112\":1}}],[\"记得关注我公众号\",{\"1\":{\"279\":1}}],[\"记得添加这个属性\",{\"1\":{\"112\":1}}],[\"记录整个组件树的信息\",{\"1\":{\"265\":1}}],[\"记录元素节点的信息\",{\"1\":{\"265\":1}}],[\"记录每个节点的父节点\",{\"1\":{\"112\":1}}],[\"记录标记\",{\"1\":{\"104\":1}}],[\"知道源节点或者根节点\",{\"1\":{\"112\":1}}],[\"往上逆推\",{\"1\":{\"112\":1}}],[\"就在我开心了几天后\",{\"1\":{\"283\":1}}],[\"就可以去对应的站点访问了\",{\"1\":{\"415\":1}}],[\"就可以自动生成目录页面了\",{\"1\":{\"413\":1}}],[\"就可以有效缩短链长度\",{\"1\":{\"243\":1}}],[\"就可以发现\",{\"1\":{\"182\":1}}],[\"就又正常了\",{\"1\":{\"235\":1}}],[\"就从下边进入\",{\"1\":{\"226\":1}}],[\"就从左边进入\",{\"1\":{\"225\":1}}],[\"就已经找到元素和变量之间的对应关系了\",{\"1\":{\"214\":1}}],[\"就是不用动态更新的意思\",{\"1\":{\"354\":1}}],[\"就是这两个重要的\",{\"1\":{\"273\":1}}],[\"就是这么简单的原因\",{\"1\":{\"199\":1}}],[\"就是借助广度优先算法实现的\",{\"1\":{\"112\":1}}],[\"就进入了阻塞状态\",{\"1\":{\"143\":1}}],[\"就会被感知到卡顿\",{\"1\":{\"217\":1}}],[\"就会被判别为可回收对象\",{\"1\":{\"140\":1}}],[\"就会形成死锁\",{\"1\":{\"143\":1}}],[\"就会进入老年代\",{\"1\":{\"140\":1}}],[\"就会出发gc\",{\"1\":{\"139\":1}}],[\"就给这个对象的引用计数+1\",{\"1\":{\"138\":1}}],[\"就继续下钻\",{\"1\":{\"109\":1}}],[\"顾名思义\",{\"1\":{\"112\":1}}],[\"今天我和大家体验下最新功能\",{\"1\":{\"368\":1}}],[\"今天分享一次我的实践\",{\"1\":{\"328\":1}}],[\"今天分享几个上千⭐的库\",{\"1\":{\"168\":1}}],[\"今天继续上次的内容\",{\"1\":{\"322\":1}}],[\"今天就表演到这了\",{\"1\":{\"279\":1}}],[\"今天给大家表演个杂技\",{\"1\":{\"277\":1}}],[\"今天探究\",{\"1\":{\"189\":1}}],[\"今天先分享到这里了\",{\"1\":{\"164\":1}}],[\"今天介绍几个react几个不常用\",{\"1\":{\"246\":1}}],[\"今天介绍几个经常被提到的设计模式\",{\"1\":{\"158\":1}}],[\"今天介绍bfs最短距离\",{\"1\":{\"112\":1}}],[\"今天的分享比较简单\",{\"1\":{\"203\":1}}],[\"今天的分享就到了\",{\"1\":{\"381\":1}}],[\"今天的分享就到这里了\",{\"1\":{\"243\":1}}],[\"今天的分享就到这了\",{\"1\":{\"21\":1,\"177\":1,\"288\":1,\"297\":1,\"314\":1,\"417\":1}}],[\"今天的分享就这些\",{\"1\":{\"43\":1,\"325\":1}}],[\"今天的分享就这些了\",{\"1\":{\"29\":1}}],[\"今天的内容就这些了\",{\"1\":{\"121\":1}}],[\"求最短路径的算法有多种\",{\"1\":{\"112\":1}}],[\"道路可能不止一条\",{\"1\":{\"112\":1}}],[\"测试\",{\"0\":{\"111\":1,\"113\":1,\"288\":1,\"335\":1}}],[\"直到最后一个状态时\",{\"1\":{\"271\":1}}],[\"直到队列为空\",{\"1\":{\"110\":1}}],[\"直至找不到依赖对象\",{\"1\":{\"140\":1}}],[\"直接返回当前值\",{\"1\":{\"201\":1,\"202\":1}}],[\"直接返回当前的状态值\",{\"1\":{\"201\":1,\"202\":1}}],[\"直接在html元素使用hidden属性\",{\"1\":{\"88\":1}}],[\"直接定义就可以被捕获\",{\"1\":{\"70\":1}}],[\"开启props结构响应式\",{\"1\":{\"371\":1}}],[\"开启definemodel功能\",{\"1\":{\"371\":1}}],[\"开启新功能\",{\"0\":{\"371\":1}}],[\"开启富文本编辑器\",{\"0\":{\"91\":1}}],[\"开门见山\",{\"0\":{\"197\":1}}],[\"开始\",{\"0\":{\"385\":1}}],[\"开始线程\",{\"1\":{\"143\":1}}],[\"开始循环第三步\",{\"1\":{\"110\":1}}],[\"弹出队列第一个节点\",{\"1\":{\"110\":2}}],[\"先不着急立马搭建项目\",{\"1\":{\"399\":1}}],[\"先别急着掏菜刀\",{\"1\":{\"390\":1}}],[\"先别晕\",{\"1\":{\"211\":1}}],[\"先上图\",{\"1\":{\"385\":1}}],[\"先上代码\",{\"1\":{\"26\":1}}],[\"先看效果图\",{\"1\":{\"221\":1}}],[\"先想想\",{\"1\":{\"208\":1}}],[\"先判断这块内存是否可回收\",{\"1\":{\"138\":1}}],[\"先编译后执行\",{\"1\":{\"129\":1}}],[\"先初始化一个空队列\",{\"1\":{\"110\":2}}],[\"循环邻接表中子节点\",{\"1\":{\"109\":1}}],[\"循环语句\",{\"0\":{\"63\":1}}],[\"深度优先单独标记\",{\"1\":{\"109\":1}}],[\"深度优先搜索\",{\"1\":{\"109\":1}}],[\"深度优先\",{\"0\":{\"109\":1},\"1\":{\"109\":1}}],[\"深度优先和广度优先\",{\"0\":{\"108\":1}}],[\"广度优先搜索\",{\"1\":{\"110\":1}}],[\"广度优先\",{\"0\":{\"110\":1},\"1\":{\"108\":1,\"110\":1}}],[\"节点的遍历顺序也不相同\",{\"1\":{\"108\":1}}],[\"节点1\",{\"1\":{\"100\":5}}],[\"遍历图中每个节点\",{\"1\":{\"108\":1}}],[\"展示图\",{\"1\":{\"107\":1}}],[\"展示图时\",{\"1\":{\"107\":1}}],[\"分离式菜单配置更简洁\",{\"1\":{\"412\":1}}],[\"分离式导航栏\",{\"0\":{\"412\":1}}],[\"分类等\",{\"1\":{\"409\":1}}],[\"分类\",{\"1\":{\"408\":1,\"409\":1,\"414\":1}}],[\"分\",{\"1\":{\"241\":1,\"242\":1}}],[\"分析每行作者\",{\"1\":{\"286\":1}}],[\"分析出包含console的行\",{\"1\":{\"285\":1}}],[\"分析过程\",{\"1\":{\"285\":1}}],[\"分析\",{\"0\":{\"198\":1}}],[\"分享几个上千✨的react开源库助你玩转react\",{\"0\":{\"167\":1}}],[\"分享就到这了\",{\"1\":{\"113\":1}}],[\"分代清理\",{\"1\":{\"140\":1}}],[\"分代回收\",{\"1\":{\"139\":1}}],[\"分别看看他的看家本领\",{\"1\":{\"154\":1}}],[\"分别代表基础语法\",{\"1\":{\"126\":1}}],[\"分别给对方的邻接表添加边\",{\"1\":{\"106\":1}}],[\"分阶段粗略地介绍了一些原理\",{\"1\":{\"4\":1}}],[\"增加边\",{\"1\":{\"106\":1}}],[\"增加边的本质就是增加邻接表信息\",{\"1\":{\"106\":1}}],[\"增加节点\",{\"1\":{\"105\":2}}],[\"方便我们调用\",{\"1\":{\"324\":1}}],[\"方便我们根据新的参数再次调用\",{\"1\":{\"323\":1}}],[\"方便面对更多需求\",{\"1\":{\"296\":1}}],[\"方法相对应的\",{\"1\":{\"302\":1}}],[\"方法\",{\"0\":{\"105\":1,\"106\":1,\"107\":1,\"214\":1},\"1\":{\"143\":1}}],[\"方式\",{\"0\":{\"72\":1}}],[\"存放邻接表\",{\"1\":{\"104\":1}}],[\"存放节点\",{\"1\":{\"104\":1}}],[\"邻接数组是用二维数组的方式描述\",{\"1\":{\"102\":1}}],[\"邻接表是一个描述每个节点相关边的对象\",{\"1\":{\"102\":1}}],[\"描述信息\",{\"1\":{\"296\":1}}],[\"描述逻辑\",{\"1\":{\"208\":1}}],[\"描述ui\",{\"1\":{\"208\":1}}],[\"描述边成熟的做法是使用邻接表或者邻接数组\",{\"1\":{\"102\":1}}],[\"描述每个节点需要唯一标识\",{\"1\":{\"101\":1}}],[\"描述节点\",{\"0\":{\"101\":1}}],[\"只是我比较推荐的分类方式\",{\"1\":{\"350\":1}}],[\"只是非黑即白的标记方式\",{\"1\":{\"139\":1}}],[\"只需要监听参数的变化\",{\"1\":{\"325\":1}}],[\"只需要在\",{\"1\":{\"240\":1}}],[\"只需要调用create函数创建store就可以直接在任何组件使用了\",{\"1\":{\"190\":1}}],[\"只渲染数据变化的dom节点\",{\"1\":{\"208\":1}}],[\"只能修饰变量\",{\"1\":{\"143\":1}}],[\"只能选\",{\"1\":{\"100\":5}}],[\"只比较引用地址\",{\"1\":{\"132\":1}}],[\"只有30祯\",{\"1\":{\"221\":1}}],[\"只有运行时的语言\",{\"1\":{\"48\":1}}],[\"只有运行时的javascript\",{\"0\":{\"47\":1}}],[\"只有编译时的typescript\",{\"0\":{\"48\":1}}],[\"了\",{\"1\":{\"99\":1,\"186\":1,\"240\":1,\"283\":1,\"312\":1}}],[\"根据当前目录下的文件名称自动生成\",{\"1\":{\"411\":1}}],[\"根据当前作者和conosle的作者是否相等\",{\"1\":{\"286\":1}}],[\"根据每个导航栏栏目分离式导航栏\",{\"1\":{\"410\":1}}],[\"根据文章的分类\",{\"1\":{\"409\":1}}],[\"根据查询结果设置对应的值\",{\"1\":{\"318\":2}}],[\"根据命令的返回结果分别处理\",{\"1\":{\"286\":1}}],[\"根据tag的不同\",{\"1\":{\"259\":1}}],[\"根据ui变化方式\",{\"1\":{\"208\":1}}],[\"根据usememo返回值的不同\",{\"1\":{\"199\":1}}],[\"根据不同的策略\",{\"1\":{\"108\":1}}],[\"根据权重\",{\"1\":{\"99\":1}}],[\"根据新值和旧值的关系来设置何时为响应式\",{\"1\":{\"7\":1}}],[\"算法\",{\"0\":{\"99\":1}}],[\"克鲁斯卡尔\",{\"0\":{\"99\":1}}],[\"有了明显的提升\",{\"1\":{\"417\":1}}],[\"有了封装媒体查询的例子\",{\"1\":{\"319\":1}}],[\"有人已经提供了一个方案使用eventbus替代vuex\",{\"1\":{\"361\":1}}],[\"有人给我介绍了solidjs\",{\"1\":{\"24\":1}}],[\"有点不太习惯\",{\"1\":{\"305\":1}}],[\"有没有一种插件\",{\"1\":{\"284\":1}}],[\"有赞的捧个赞场\",{\"1\":{\"277\":1}}],[\"有如下的代码\",{\"1\":{\"271\":1}}],[\"有很大的优化空间\",{\"1\":{\"208\":1}}],[\"有失远迎\",{\"1\":{\"154\":1,\"155\":1}}],[\"有两种方法\",{\"1\":{\"143\":1}}],[\"有两种方法将图转为最小生成树\",{\"1\":{\"98\":1}}],[\"有自动装箱\",{\"1\":{\"130\":1}}],[\"有深有浅\",{\"1\":{\"126\":1}}],[\"有详细的结构图解释\",{\"1\":{\"120\":1}}],[\"有不懂的问题\",{\"1\":{\"118\":1}}],[\"有惊喜🎉\",{\"1\":{\"116\":1}}],[\"集合组成的图形\",{\"1\":{\"97\":1}}],[\"图标比较少\",{\"1\":{\"405\":1}}],[\"图\",{\"1\":{\"313\":1}}],[\"图解网络硬件\",{\"1\":{\"119\":2}}],[\"图解tcp\",{\"1\":{\"119\":2}}],[\"图解http\",{\"0\":{\"119\":1},\"1\":{\"119\":1}}],[\"图经常被用到的地方其实查询从某个节点到另一个节点的最短距离\",{\"1\":{\"112\":1}}],[\"图是由节点集合和边\",{\"1\":{\"97\":1}}],[\"图文并茂\",{\"0\":{\"96\":1},\"1\":{\"96\":1,\"119\":1}}],[\"认识图\",{\"0\":{\"97\":1}}],[\"微信公众号\",{\"1\":{\"96\":1}}],[\"超级棒\",{\"1\":{\"396\":1}}],[\"超级简单的设计模式\",{\"0\":{\"158\":1}}],[\"超级简单的图算法\",{\"0\":{\"96\":1},\"1\":{\"96\":1}}],[\"超越\",{\"0\":{\"25\":1}}],[\"懒加载资源\",{\"0\":{\"93\":1}}],[\"以\",{\"1\":{\"409\":1}}],[\"以下动画实现仅是个人理解\",{\"1\":{\"386\":1}}],[\"以下是完整的代码\",{\"1\":{\"314\":1}}],[\"以备不时之需\",{\"1\":{\"241\":1}}],[\"以方便下次更新时对比\",{\"1\":{\"216\":1}}],[\"以保证每次调用都是最新值\",{\"1\":{\"199\":1}}],[\"以java为例创建线程\",{\"1\":{\"143\":1}}],[\"以免影响广度优先算法和最短路径算法\",{\"1\":{\"109\":1}}],[\"以此类推\",{\"1\":{\"109\":1,\"110\":1}}],[\"以提供给用户一组可供选择的选项\",{\"1\":{\"92\":1}}],[\"以及双缓存机制\",{\"1\":{\"270\":1}}],[\"以及变量变化时的回调函数\",{\"1\":{\"213\":1}}],[\"以及对应的元素节点使用\",{\"1\":{\"29\":1}}],[\"以及firstchild等属性获取动态元素\",{\"1\":{\"28\":1}}],[\"即src\",{\"1\":{\"409\":1}}],[\"即fiberrootnode实例\",{\"1\":{\"264\":1}}],[\"即组件树的根节点\",{\"1\":{\"263\":1}}],[\"即完整的动画定义为下面这样\",{\"1\":{\"223\":1}}],[\"即不采用初始样式\",{\"1\":{\"222\":1}}],[\"即采用初始样式\",{\"1\":{\"222\":1}}],[\"即16\",{\"1\":{\"217\":1}}],[\"即ctx\",{\"1\":{\"214\":1}}],[\"即使不读源码也会对react的设计思想有总体上的理解\",{\"1\":{\"274\":1}}],[\"即使onclick函数不使用usecallback\",{\"1\":{\"235\":1}}],[\"即使用了usememo\",{\"1\":{\"233\":1}}],[\"即使代码没有边\",{\"1\":{\"208\":1}}],[\"即使你买了红宝书\",{\"1\":{\"118\":1}}],[\"即\",{\"1\":{\"192\":1}}],[\"即事务场景\",{\"1\":{\"152\":1}}],[\"即可查看详情\",{\"1\":{\"121\":1}}],[\"即可以开启富文本编辑器\",{\"1\":{\"91\":1}}],[\"即时编译\",{\"1\":{\"49\":1}}],[\"9k⭐了\",{\"1\":{\"177\":1}}],[\"9k的⭐\",{\"1\":{\"176\":1}}],[\"9k地star了\",{\"1\":{\"43\":1}}],[\"9\",{\"1\":{\"90\":1,\"325\":1}}],[\"输入的数字时\",{\"1\":{\"90\":1}}],[\"代替\",{\"0\":{\"90\":1},\"1\":{\"182\":1}}],[\"代码如下\",{\"1\":{\"271\":1}}],[\"代码分割\",{\"1\":{\"242\":1}}],[\"代码都是stw\",{\"1\":{\"138\":1}}],[\"代码都会将编译的\",{\"1\":{\"29\":1}}],[\"代码成为可执行javascript的示意图图如下\",{\"1\":{\"54\":1}}],[\"修改触发分支\",{\"1\":{\"415\":1}}],[\"修改\",{\"0\":{\"89\":1}}],[\"现在实习了有空总结下\",{\"1\":{\"341\":1}}],[\"现在前端的招聘加分项要求里多半会有一条\",{\"1\":{\"125\":1}}],[\"现在\",{\"1\":{\"121\":1}}],[\"现在已经出了第四版了\",{\"1\":{\"117\":1}}],[\"现在就让我们开始实现基本的属性和功能吧\",{\"1\":{\"103\":1}}],[\"现在有一个更简便的方式\",{\"1\":{\"88\":1}}],[\"现在我们得到了一个合理的代码\",{\"1\":{\"235\":1}}],[\"现在我们准备下面的html文件\",{\"1\":{\"15\":1}}],[\"现在我们已经实现了createsignal基本功能了\",{\"1\":{\"10\":1}}],[\"告别\",{\"0\":{\"88\":1}}],[\"同事在开发群里发问了\",{\"1\":{\"283\":1}}],[\"同步的方式访问\",{\"1\":{\"296\":1}}],[\"同步方法\",{\"1\":{\"143\":2}}],[\"同步代码块\",{\"1\":{\"143\":2}}],[\"同时使用watch监听变化\",{\"1\":{\"377\":1}}],[\"同时使用next属性指向下一个状态\",{\"1\":{\"271\":1}}],[\"同时\",{\"1\":{\"318\":1}}],[\"同时完成上述指针的切换工作\",{\"1\":{\"272\":1}}],[\"同时需要\",{\"1\":{\"241\":1}}],[\"同时保留内存中的vnode\",{\"1\":{\"216\":1}}],[\"同时升级了标记\",{\"1\":{\"139\":1}}],[\"同时java中没有===\",{\"1\":{\"132\":1}}],[\"同时也会捎带的讲解其他的一些属性\",{\"1\":{\"270\":1}}],[\"同时也会为调度相关的工作提供依据\",{\"1\":{\"265\":1}}],[\"同时也从下面选择一个自己容易理解的语言\",{\"1\":{\"125\":1}}],[\"同时也具有很好的可维护性和可扩展性\",{\"1\":{\"84\":1}}],[\"同样功能的例子实现如下\",{\"1\":{\"182\":1}}],[\"同样值得一看\",{\"1\":{\"119\":1}}],[\"同样\",{\"1\":{\"102\":1}}],[\"同系列阅读\",{\"0\":{\"33\":1}}],[\"相反\",{\"1\":{\"405\":1}}],[\"相信看到这里\",{\"1\":{\"405\":1}}],[\"相信vue3将会带来更好的便捷功能\",{\"1\":{\"381\":1}}],[\"相信你经常遇到同事这样的代码\",{\"1\":{\"163\":1}}],[\"相关变量命名\",{\"0\":{\"258\":1}}],[\"相关阅读\",{\"0\":{\"257\":1}}],[\"相关报错\",{\"1\":{\"240\":1}}],[\"相比其他前端框架\",{\"1\":{\"84\":1}}],[\"相当于next\",{\"1\":{\"39\":1}}],[\"六\",{\"0\":{\"84\":1}}],[\"属性为\",{\"1\":{\"311\":1}}],[\"属性中\",{\"1\":{\"263\":1}}],[\"属性一起使用\",{\"1\":{\"92\":1}}],[\"属性控制排序的起始位置\",{\"1\":{\"89\":1}}],[\"属性\",{\"0\":{\"104\":1},\"1\":{\"82\":1}}],[\"并非标准\",{\"1\":{\"386\":1}}],[\"并置为空\",{\"1\":{\"272\":1}}],[\"并不是所有的\",{\"1\":{\"241\":1}}],[\"并返回最新值\",{\"1\":{\"201\":1,\"202\":1}}],[\"并缓存返回值\",{\"1\":{\"199\":1}}],[\"并缓存这个函数\",{\"1\":{\"199\":1}}],[\"并根据需要更新状态\",{\"1\":{\"182\":1}}],[\"并将它与旧的\",{\"1\":{\"263\":1}}],[\"并将该值最为最新的状态值和deps一起保存起来\",{\"1\":{\"201\":1}}],[\"并将执行结果和deps缓存在当前hook的状态上\",{\"1\":{\"201\":1}}],[\"并将参数传递给调用对象\",{\"1\":{\"149\":1}}],[\"并将这些信息记录在edgeto属性中\",{\"1\":{\"112\":1}}],[\"并行回收的好处是可以缩短gc时间\",{\"1\":{\"139\":1}}],[\"并行回收的优化\",{\"1\":{\"139\":1}}],[\"并行回收就是使用多个线程和主线程执行gc流程\",{\"1\":{\"139\":1}}],[\"并行回收\",{\"1\":{\"139\":1}}],[\"并做了部分笔记\",{\"1\":{\"120\":1}}],[\"并且默认为false\",{\"1\":{\"349\":1}}],[\"并且返回请求回调函数\",{\"1\":{\"323\":1}}],[\"并且返回它们\",{\"1\":{\"213\":1}}],[\"并且在退出时取消监听\",{\"1\":{\"318\":2}}],[\"并且这个函数需要返回取消订阅的方法\",{\"1\":{\"247\":1}}],[\"并且通过\",{\"1\":{\"243\":1}}],[\"并且需要复杂的计算时\",{\"1\":{\"236\":1}}],[\"并且执行\",{\"0\":{\"214\":1}}],[\"并且执行这些命令\",{\"1\":{\"153\":1}}],[\"并且监听div的click事件\",{\"1\":{\"212\":1}}],[\"并且进行更新\",{\"1\":{\"210\":1}}],[\"并且可以存放各种类型\",{\"1\":{\"133\":1}}],[\"并且做了详细的记录\",{\"1\":{\"117\":1}}],[\"并且访问它子节点\",{\"1\":{\"110\":2}}],[\"并放入队列\",{\"1\":{\"110\":2}}],[\"并在事件触发时执行相应的逻辑\",{\"1\":{\"82\":1}}],[\"并挂载到document\",{\"1\":{\"29\":1}}],[\"五\",{\"0\":{\"81\":1},\"1\":{\"274\":1}}],[\"钩子函数\",{\"1\":{\"302\":1}}],[\"钩子\",{\"1\":{\"80\":4}}],[\"中设置文章的标题\",{\"1\":{\"408\":1}}],[\"中\",{\"1\":{\"263\":2,\"311\":1,\"416\":1}}],[\"中使用外部状态管理库的状态\",{\"1\":{\"192\":1}}],[\"中间件模式\",{\"0\":{\"184\":1}}],[\"中介者模式由中介者和订阅者组成\",{\"1\":{\"162\":1}}],[\"中介者模式也和观察者类似\",{\"1\":{\"162\":1}}],[\"中介者模式\",{\"0\":{\"162\":1,\"332\":1}}],[\"中仅仅是给出闭包的概念\",{\"1\":{\"118\":1}}],[\"中的最新状态重新渲染界面\",{\"1\":{\"182\":1}}],[\"中的一个表单元素\",{\"1\":{\"92\":1}}],[\"中的\",{\"1\":{\"80\":4}}],[\"中后执行\",{\"1\":{\"80\":1}}],[\"从右上出现\",{\"1\":{\"389\":1}}],[\"从左下出现\",{\"1\":{\"389\":1}}],[\"从左到右同时从下到上\",{\"1\":{\"228\":1}}],[\"从中我们可以得出结论\",{\"1\":{\"271\":1}}],[\"从上面你或许可以看到\",{\"1\":{\"228\":1}}],[\"从上述可以发现\",{\"1\":{\"138\":1}}],[\"从前面的代码可以看出\",{\"1\":{\"214\":1}}],[\"从ui出发\",{\"1\":{\"208\":1}}],[\"从逻辑出发\",{\"1\":{\"208\":1}}],[\"从源码上看\",{\"1\":{\"202\":1}}],[\"从作用域\",{\"1\":{\"118\":1}}],[\"从你的住处到公司\",{\"1\":{\"112\":1}}],[\"从节点1开始经过该算法后最小生成树是这样的\",{\"1\":{\"100\":1}}],[\"从一个节点出发\",{\"1\":{\"100\":1}}],[\"从\",{\"1\":{\"73\":2,\"349\":1}}],[\"从而更进一步的提高性能\",{\"1\":{\"243\":1}}],[\"从而更新\",{\"1\":{\"160\":2}}],[\"从而使整个系统具有更高的灵活性\",{\"1\":{\"150\":1}}],[\"从而使方法和调用者的职责分离\",{\"1\":{\"149\":1}}],[\"从而提升gc效率\",{\"1\":{\"138\":1}}],[\"从而提高应用程序的性能和响应速度\",{\"1\":{\"84\":1}}],[\"从而改变元素的样式\",{\"1\":{\"82\":1}}],[\"从而减少运行时的时间\",{\"1\":{\"52\":1}}],[\"从而让它可以在编译时完成大量的工作\",{\"1\":{\"52\":1}}],[\"从而有更大的优化空间\",{\"1\":{\"49\":1}}],[\"`$1=\",{\"1\":{\"306\":1}}],[\"`隔开\",{\"1\":{\"296\":1}}],[\"`yyyy\",{\"1\":{\"296\":2}}],[\"`author\",{\"1\":{\"286\":2}}],[\"`age\",{\"1\":{\"72\":1,\"73\":1}}],[\"`git\",{\"1\":{\"286\":2}}],[\"`pendingcontext`\",{\"1\":{\"263\":1}}],[\"`finishedwork`\",{\"1\":{\"263\":1}}],[\"`isloading\",{\"1\":{\"177\":1}}],[\"`<=========>`\",{\"1\":{\"111\":1}}],[\"`<div>count\",{\"1\":{\"28\":1}}],[\"`\",{\"1\":{\"72\":2,\"73\":2,\"177\":1,\"223\":5,\"228\":2,\"233\":2,\"235\":2,\"286\":3,\"287\":1,\"306\":1}}],[\"`name\",{\"1\":{\"72\":1,\"73\":1}}],[\"三秒后由mmdjj变成welcome\",{\"1\":{\"365\":1}}],[\"三秒之后显示为welcome\",{\"1\":{\"355\":1}}],[\"三\",{\"0\":{\"71\":1,\"74\":1,\"127\":1,\"362\":1,\"391\":1},\"1\":{\"186\":1,\"274\":1}}],[\"声明在模板使用的变量\",{\"1\":{\"213\":1}}],[\"声明一个包装类是这样的\",{\"1\":{\"130\":2}}],[\"声明前需要指定变量类型\",{\"1\":{\"129\":1}}],[\"声明\",{\"1\":{\"125\":1}}],[\"声明变量\",{\"0\":{\"70\":1}}],[\"声明式api\",{\"1\":{\"58\":1}}],[\"二\",{\"0\":{\"70\":1,\"126\":1,\"268\":1,\"351\":1,\"386\":1},\"1\":{\"186\":1,\"232\":1,\"257\":1,\"274\":1,\"328\":1}}],[\"插件可以通过\",{\"1\":{\"302\":1}}],[\"插件可以向这些列表中添加回调函数\",{\"1\":{\"302\":1}}],[\"插件可以在这些方法中干预\",{\"1\":{\"301\":1}}],[\"插件机制主要在整个构建过程的不同时机暴露出钩子函数供开发者灵活自定义构建过程\",{\"1\":{\"307\":1}}],[\"插件机制\",{\"0\":{\"301\":1,\"302\":1}}],[\"插件地址\",{\"1\":{\"289\":1}}],[\"插件已经开源了\",{\"1\":{\"282\":1}}],[\"插槽语法\",{\"0\":{\"67\":1}}],[\"插值表达式\",{\"0\":{\"61\":1}}],[\"7k⭐\",{\"1\":{\"400\":1}}],[\"73\",{\"1\":{\"242\":1}}],[\"7m\",{\"1\":{\"241\":1}}],[\"70\",{\"1\":{\"228\":1}}],[\"7\",{\"0\":{\"66\":1,\"136\":1},\"1\":{\"286\":2}}],[\"前调用\",{\"1\":{\"311\":1}}],[\"前\",{\"1\":{\"311\":1}}],[\"前几天我已经将项目脚手架换成vite了\",{\"1\":{\"295\":1}}],[\"前几天我们的客户对我们组的客户经理提了个需求\",{\"1\":{\"294\":1}}],[\"前段时间我加入了公司某个小项目组\",{\"1\":{\"283\":1}}],[\"前段时间\",{\"1\":{\"240\":1}}],[\"前面说过\",{\"1\":{\"218\":1,\"260\":1}}],[\"前面的空闲区作为使用区\",{\"1\":{\"140\":1}}],[\"前面部分分别讲解了十三种设计模式\",{\"1\":{\"121\":1}}],[\"前缀来实现双向绑定\",{\"1\":{\"66\":1}}],[\"前缀来绑定事件处理函数\",{\"1\":{\"65\":1}}],[\"前端面试的时候一般会将javascript和java两门语言的比较作为面试题目\",{\"1\":{\"126\":1}}],[\"前端开发一大部分的时间都是在和后端的接口打交道\",{\"1\":{\"119\":1}}],[\"前端入门进阶宝典\",{\"1\":{\"117\":1}}],[\"前端框架主要的作用是将数据的变化映射为ui的变化\",{\"1\":{\"208\":1}}],[\"前端框架概述\",{\"0\":{\"206\":1}}],[\"前端框架都是在编译时\",{\"1\":{\"50\":1}}],[\"前端框架的选择\",{\"0\":{\"50\":1}}],[\"前端框架的角斗场\",{\"0\":{\"46\":1}}],[\"前端娱乐圈战地记者\",{\"1\":{\"32\":1}}],[\"前端\",{\"1\":{\"408\":1,\"409\":1},\"2\":{\"22\":1,\"30\":1,\"44\":1,\"56\":1,\"85\":1,\"94\":1,\"114\":1,\"122\":1,\"156\":1,\"165\":1,\"178\":1,\"187\":1,\"193\":1,\"204\":1,\"219\":1,\"229\":1,\"237\":1,\"244\":1,\"254\":1,\"266\":1,\"275\":1,\"280\":1,\"291\":1,\"298\":1,\"308\":1,\"315\":1,\"320\":1,\"326\":1,\"339\":1,\"366\":1,\"382\":1,\"397\":1,\"418\":1}}],[\"6k⭐\",{\"1\":{\"400\":1}}],[\"60次\",{\"1\":{\"217\":1}}],[\"67ms会造成页面卡顿\",{\"1\":{\"217\":1}}],[\"67ms\",{\"1\":{\"217\":2}}],[\"66\",{\"1\":{\"164\":1}}],[\"6\",{\"0\":{\"65\":1,\"93\":1,\"135\":1},\"1\":{\"99\":1,\"100\":8,\"107\":4,\"111\":2,\"113\":3,\"241\":1}}],[\"5k⭐\",{\"1\":{\"400\":1}}],[\"5k的⭐\",{\"1\":{\"172\":1}}],[\"59\",{\"1\":{\"241\":1}}],[\"50px\",{\"1\":{\"312\":2,\"314\":2}}],[\"50\",{\"1\":{\"223\":5,\"225\":2,\"226\":2,\"227\":4,\"312\":1,\"314\":1}}],[\"5\",{\"0\":{\"64\":1,\"92\":1,\"133\":1},\"1\":{\"92\":2,\"99\":3,\"100\":10,\"107\":6,\"111\":2,\"113\":2,\"133\":1,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"241\":1}}],[\"4k⭐\",{\"1\":{\"400\":1}}],[\"4k的⭐\",{\"1\":{\"170\":1,\"174\":1}}],[\"4s\",{\"1\":{\"389\":3}}],[\"4开始\",{\"1\":{\"349\":1}}],[\"4新增的属性和接口\",{\"1\":{\"349\":1}}],[\"4m\",{\"1\":{\"241\":1}}],[\"4fd6be\",{\"1\":{\"92\":1}}],[\"4d32bf\",{\"1\":{\"92\":1}}],[\"4\",{\"0\":{\"63\":1,\"91\":1,\"132\":1,\"228\":1,\"361\":1,\"390\":1},\"1\":{\"92\":1,\"99\":1,\"100\":8,\"107\":6,\"110\":1,\"111\":2,\"113\":1,\"409\":1}}],[\"关闭\",{\"1\":{\"408\":1}}],[\"关闭监听\",{\"1\":{\"325\":1}}],[\"关键接口介绍\",{\"0\":{\"311\":1}}],[\"关键的部分源码如下\",{\"1\":{\"303\":1}}],[\"关键的链表结构和双缓存技术🎉\",{\"1\":{\"232\":1,\"257\":1,\"274\":1}}],[\"关键字来实现循环语句\",{\"1\":{\"63\":1}}],[\"关键字来实现条件语句\",{\"1\":{\"62\":1}}],[\"关注我的公众号会有送书福利\",{\"1\":{\"121\":1}}],[\"关注后回复\",{\"1\":{\"32\":1}}],[\"条件语句\",{\"0\":{\"62\":1}}],[\"例如我们或者当前作者\",{\"1\":{\"286\":1}}],[\"例如左右交错的同时载增加从下到上的动画\",{\"1\":{\"227\":1}}],[\"例如上图中的每个节点的邻接表如下所示\",{\"1\":{\"102\":1}}],[\"例如上图\",{\"1\":{\"100\":1}}],[\"例如上图的最小生成树如下\",{\"1\":{\"98\":1}}],[\"例如\",{\"1\":{\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"66\":1,\"82\":3,\"184\":1,\"192\":1,\"223\":1,\"225\":1,\"226\":1,\"228\":2,\"311\":1,\"409\":1,\"413\":1}}],[\"例子如下\",{\"1\":{\"350\":1}}],[\"例子\",{\"0\":{\"8\":1,\"13\":1,\"18\":1}}],[\"文档\",{\"1\":{\"409\":1}}],[\"文档可以参看这里\",{\"1\":{\"184\":1}}],[\"文件的\",{\"1\":{\"408\":1}}],[\"文件的依赖文件\",{\"1\":{\"243\":1}}],[\"文件\",{\"1\":{\"408\":1}}],[\"文件后缀名为\",{\"1\":{\"60\":1}}],[\"文中同时也提到了这个问题的解决方案\",{\"1\":{\"234\":1}}],[\"文章的列表来自于项目中所有的\",{\"1\":{\"408\":1}}],[\"文章的反响连\",{\"1\":{\"4\":1}}],[\"文章中有纰漏的地方欢迎指正\",{\"1\":{\"297\":1}}],[\"文章同步在公众号\",{\"1\":{\"87\":1,\"168\":1,\"180\":1,\"239\":1,\"282\":1,\"293\":1,\"317\":1,\"322\":1,\"328\":1,\"399\":1}}],[\"文章首发在公众号\",{\"1\":{\"32\":1}}],[\"文章首发公众号\",{\"1\":{\"3\":1,\"46\":1,\"116\":1,\"195\":1,\"231\":1,\"257\":1,\"269\":1,\"300\":1,\"310\":1}}],[\"模块\",{\"1\":{\"241\":1}}],[\"模式下\",{\"1\":{\"192\":1}}],[\"模式显得日益笨重\",{\"1\":{\"182\":1}}],[\"模型\",{\"0\":{\"153\":1},\"1\":{\"186\":1}}],[\"模版命名\",{\"0\":{\"60\":1}}],[\"模版语法\",{\"0\":{\"59\":1}}],[\"模板语法是静态的\",{\"1\":{\"208\":1}}],[\"模板语法\",{\"1\":{\"49\":1,\"208\":1}}],[\"如有错误的地方\",{\"1\":{\"288\":1}}],[\"如下所示\",{\"1\":{\"412\":1}}],[\"如下\",{\"1\":{\"184\":1,\"235\":1,\"271\":1,\"278\":1,\"312\":1,\"318\":2,\"319\":1}}],[\"如来迎了上来\",{\"1\":{\"155\":1}}],[\"如来迎了上啦\",{\"1\":{\"154\":1}}],[\"如来翘起了兰花指\",{\"1\":{\"154\":1}}],[\"如来\",{\"1\":{\"154\":1}}],[\"如来从身后拿出了ipad\",{\"1\":{\"154\":1,\"155\":1}}],[\"如来听到唐唐的声音\",{\"1\":{\"154\":1,\"155\":1}}],[\"如来捏了个兰花指\",{\"1\":{\"154\":1,\"155\":1}}],[\"如来说\",{\"1\":{\"154\":3,\"155\":4}}],[\"如大型企业netflix\",{\"1\":{\"58\":1}}],[\"如果非要这样写\",{\"1\":{\"394\":1}}],[\"如果说思想\",{\"1\":{\"392\":1}}],[\"如果想建立随着改变动态更新的数据\",{\"1\":{\"354\":1}}],[\"如果有问题\",{\"1\":{\"314\":1}}],[\"如果进入\",{\"1\":{\"313\":1}}],[\"如果为\",{\"1\":{\"313\":1}}],[\"如果为true\",{\"1\":{\"296\":3}}],[\"如果\",{\"1\":{\"313\":2}}],[\"如果文中有错误的地方\",{\"1\":{\"417\":1}}],[\"如果文中有纰漏的地方\",{\"1\":{\"307\":1}}],[\"如果文中有纰漏的地方欢迎指正\",{\"1\":{\"43\":1}}],[\"如果文章中有纰漏的地方欢迎指正\",{\"1\":{\"319\":1}}],[\"如果文件中存在console则进行分析\",{\"1\":{\"285\":1}}],[\"如果不需要立即执行\",{\"1\":{\"325\":1}}],[\"如果不是我就统统删除console之后再build\",{\"1\":{\"284\":1}}],[\"如果不再使用这个对象\",{\"1\":{\"138\":1}}],[\"如果每次都重新生成新的dom显然十分浪费资源\",{\"1\":{\"272\":1}}],[\"如果每条路径有成本或者权重\",{\"1\":{\"97\":1}}],[\"如果我们其他查询查询\",{\"1\":{\"318\":1}}],[\"如果我们将上面的函数组件替换为具有同样功能的类组件时\",{\"1\":{\"271\":1}}],[\"如果我们点击一次按钮\",{\"1\":{\"271\":1}}],[\"如果我们在小文件引入前\",{\"1\":{\"243\":1}}],[\"如果组件的props变化不频繁\",{\"1\":{\"236\":1}}],[\"如果现在将onclickmethod方法使用usecallback包裹起来\",{\"1\":{\"235\":1}}],[\"如果需要可以使用vite\",{\"1\":{\"241\":1}}],[\"如果需要\",{\"1\":{\"228\":1}}],[\"如果是\",{\"1\":{\"313\":2}}],[\"如果是偶数项\",{\"1\":{\"225\":1,\"226\":1}}],[\"如果是奇数项\",{\"1\":{\"225\":1,\"226\":1}}],[\"如果是不同的类型\",{\"1\":{\"132\":1}}],[\"如果浏览器计算和渲染的时间超过人眼可以感知卡顿的最短时间16\",{\"1\":{\"217\":1}}],[\"如果仅仅声明了但是没有在模板中使用\",{\"1\":{\"214\":1}}],[\"如果依赖项相同时\",{\"1\":{\"202\":1}}],[\"如果前后依赖相同时\",{\"1\":{\"201\":1}}],[\"如果一个页面有多个react应用\",{\"1\":{\"263\":1}}],[\"如果一个对象被引用\",{\"1\":{\"138\":1}}],[\"如果一致\",{\"1\":{\"201\":1,\"202\":1}}],[\"如果observer的update方法里是跟新对应的dom\",{\"1\":{\"160\":1}}],[\"如果觉得好用\",{\"1\":{\"154\":1,\"155\":1}}],[\"如果用命令模式打开西游记会发生什么\",{\"0\":{\"147\":1,\"155\":1}}],[\"如果同步代码里又包了别的同步代码\",{\"1\":{\"143\":1}}],[\"如果此时对象没有和gc\",{\"1\":{\"140\":1}}],[\"如果在增量标记的场景下\",{\"1\":{\"139\":1}}],[\"如果对象被使用就将其标记\",{\"1\":{\"138\":1}}],[\"如果要像javascript使用数组\",{\"1\":{\"133\":1}}],[\"如果都是引用类型\",{\"1\":{\"132\":1}}],[\"如果被问道这个问题\",{\"1\":{\"126\":1}}],[\"如果你的博客面向程序员\",{\"1\":{\"416\":1}}],[\"如果你的组件全是不会变化的\",{\"1\":{\"218\":1}}],[\"如果你选择了一个主题\",{\"1\":{\"407\":1}}],[\"如果你工作中还是写vue2\",{\"1\":{\"372\":1}}],[\"如果你期望这些属性是显示在根html元素上\",{\"1\":{\"349\":1}}],[\"如果你发现本文一些错误的地方\",{\"1\":{\"274\":1}}],[\"如果你有更好的思路\",{\"1\":{\"228\":1}}],[\"如果你有更好的书籍\",{\"1\":{\"121\":1}}],[\"如果你对源码感兴趣\",{\"1\":{\"200\":1}}],[\"如果你也有值得分享的库\",{\"1\":{\"177\":1}}],[\"如果你了解svelte\",{\"1\":{\"176\":1}}],[\"如果你使用typescript开发react\",{\"1\":{\"174\":1}}],[\"如果你是做运维相关的前端开发\",{\"1\":{\"119\":1}}],[\"如果你想联系我\",{\"1\":{\"43\":1}}],[\"如果没有被标记\",{\"1\":{\"110\":2}}],[\"如果没有标记\",{\"1\":{\"109\":1}}],[\"如果没有track\",{\"1\":{\"40\":1}}],[\"如果使图连通\",{\"1\":{\"99\":1}}],[\"如果图是有方向的\",{\"1\":{\"97\":1}}],[\"如果输入的内容是非法的\",{\"1\":{\"90\":1}}],[\"如果大家喜欢我一定会再出一篇介绍其它几个有意思的api的和编译相关的文章\",{\"1\":{\"43\":1}}],[\"如果客户端使用track订阅依赖了\",{\"1\":{\"40\":1}}],[\"如果发现错误\",{\"1\":{\"21\":1}}],[\"如果真的反响平平\",{\"1\":{\"4\":1}}],[\"因此react无需知道是哪个变量发生变化导致的更新\",{\"1\":{\"209\":1}}],[\"因此生成的应用程序文件大小更小\",{\"1\":{\"58\":1}}],[\"因为\",{\"1\":{\"400\":1,\"416\":1}}],[\"因为和vetur是冲突的\",{\"1\":{\"372\":1}}],[\"因为在props中声明了name\",{\"1\":{\"350\":1}}],[\"因为当父组件提供props的属性十分多时\",{\"1\":{\"350\":1}}],[\"因为我们客户单位会定期爬取版本信息进行汇总展示在大屏\",{\"1\":{\"294\":1}}],[\"因为每次当count变化\",{\"1\":{\"234\":1}}],[\"因为组件层次过深\",{\"1\":{\"217\":1}}],[\"因为事务的复杂度可能会出现很多的类\",{\"1\":{\"151\":1}}],[\"因为线程的通信也会消耗时间\",{\"1\":{\"139\":1}}],[\"因为子类有这个方法就不会沿着prototype属性向上查询\",{\"1\":{\"135\":1}}],[\"因为是基本类型\",{\"1\":{\"130\":1}}],[\"因为它们是包装类\",{\"1\":{\"130\":1}}],[\"因为它的响应式官方称为primitive\",{\"1\":{\"27\":1}}],[\"因为这两本对相同的知识讲解\",{\"1\":{\"118\":1}}],[\"因为这种编译时\",{\"1\":{\"48\":1}}],[\"因为最小生成树可以包含所有节点信息和最少的边\",{\"1\":{\"98\":1}}],[\"因为预编译\",{\"1\":{\"49\":1}}],[\"因为编译成js文件后就是javascript的势力圈了\",{\"1\":{\"48\":1}}],[\"因为所有的ts文件先被编译成js文件\",{\"1\":{\"48\":1}}],[\"因为qwik是基于jsx的框架\",{\"1\":{\"38\":1}}],[\"轻量级\",{\"1\":{\"58\":1}}],[\"响应式\",{\"1\":{\"58\":1}}],[\"响应式原理\",{\"0\":{\"5\":1},\"1\":{\"4\":1}}],[\"精彩文章回顾\",{\"0\":{\"55\":1}}],[\"精确到了原子级别\",{\"1\":{\"28\":1}}],[\"尤雨溪和dan合影\",{\"1\":{\"54\":1}}],[\"卷\",{\"1\":{\"54\":1}}],[\"框架之间\",{\"1\":{\"54\":1}}],[\"希望大佬们指点\",{\"1\":{\"386\":1}}],[\"希望大家理性看待这个问题\",{\"1\":{\"54\":1}}],[\"希望今天的分享可以帮助到你\",{\"1\":{\"338\":1}}],[\"希望你也不要跟我一样再用错usememo和usecallback了\",{\"1\":{\"236\":1}}],[\"希望可以帮到大家\",{\"1\":{\"295\":1}}],[\"希望可以帮你拓宽视野\",{\"1\":{\"177\":1}}],[\"希望可以给你的学习带来帮助\",{\"1\":{\"4\":1}}],[\"绘制了编译时到运行时\",{\"1\":{\"54\":1}}],[\"平衡大师vue\",{\"0\":{\"53\":1}}],[\"平平\",{\"1\":{\"4\":1}}],[\"而你只需要指定动画名\",{\"1\":{\"395\":1}}],[\"而是我们的想象力还不够\",{\"1\":{\"390\":1}}],[\"而是先进行编译\",{\"1\":{\"208\":1}}],[\"而这之外的所有的东西\",{\"1\":{\"360\":1}}],[\"而这些小文件是外层\",{\"1\":{\"243\":1}}],[\"而每个fiber节点alternate指向另一棵树中的自己\",{\"1\":{\"272\":1}}],[\"而react元素被编译之后的vnode都成为fibernode构造函数的实例\",{\"1\":{\"260\":1}}],[\"而不是直接定义translate\",{\"1\":{\"228\":1}}],[\"而不是count的原因\",{\"1\":{\"27\":1}}],[\"而有些变量是常驻变量\",{\"1\":{\"138\":1}}],[\"而java是标准的面向对象的编程语言\",{\"1\":{\"135\":1}}],[\"而java是强类型语言\",{\"1\":{\"129\":1}}],[\"而java中==是严格按地址比较\",{\"1\":{\"132\":1}}],[\"而java中\",{\"1\":{\"131\":1}}],[\"而java中数据类型字节数从小到大分为byte\",{\"1\":{\"131\":1}}],[\"而java基本类型无法调类方法\",{\"1\":{\"130\":1}}],[\"而http无疑是沟通的桥梁\",{\"1\":{\"119\":1}}],[\"而\",{\"1\":{\"118\":1,\"182\":1,\"242\":1}}],[\"而vue编译之后的结果是不可运行的vnode\",{\"1\":{\"53\":1}}],[\"而svelte的模板语法是基于javascript的\",{\"1\":{\"52\":1}}],[\"为我们提供了简单的登陆应用的功能\",{\"1\":{\"416\":1}}],[\"为分类和标签添加索引\",{\"1\":{\"414\":1}}],[\"为\",{\"1\":{\"408\":1}}],[\"为中心的静态网站生成器\",{\"1\":{\"399\":1}}],[\"为什么要这样做\",{\"0\":{\"329\":1}}],[\"为什么这么好用\",{\"0\":{\"190\":1}}],[\"为组件传递值时\",{\"1\":{\"312\":1}}],[\"为文件加上版本号\",{\"0\":{\"306\":1}}],[\"为了可以应对更多场景\",{\"1\":{\"313\":1}}],[\"为了可以让更多的人方便用\",{\"1\":{\"296\":1}}],[\"为了可以直接编译出可执行的javascript代码片段\",{\"1\":{\"52\":1}}],[\"为了使\",{\"1\":{\"240\":1}}],[\"为了更灵活的使用\",{\"1\":{\"223\":1}}],[\"为了让每个列表项的动画开错落有序\",{\"1\":{\"223\":1}}],[\"为啥会有这种差别呢\",{\"1\":{\"208\":1}}],[\"为啥这么简单易用\",{\"1\":{\"189\":1}}],[\"为啥这么简单易用🚀\",{\"0\":{\"180\":1}}],[\"为每个元素绑定对应的方法\",{\"1\":{\"28\":1}}],[\"重新撸了一遍vue官方文档\",{\"1\":{\"385\":1}}],[\"重新渲染数据有变化的组件vue\",{\"1\":{\"208\":1}}],[\"重新渲染整个应用\",{\"1\":{\"208\":1,\"215\":1}}],[\"重要的链表结构和双缓存技术🎉\",{\"1\":{\"328\":1}}],[\"重写\",{\"0\":{\"333\":1},\"1\":{\"135\":2}}],[\"重载\",{\"1\":{\"135\":1}}],[\"重编译时的solidjs和svelte\",{\"0\":{\"52\":1}}],[\"重运行时的react\",{\"0\":{\"51\":1}}],[\"完全放弃了公司的代码规范\",{\"1\":{\"283\":1}}],[\"完全是躺平的状态\",{\"1\":{\"283\":1}}],[\"完成广度优先算法后\",{\"1\":{\"112\":1}}],[\"完成代码的转换\",{\"1\":{\"50\":1}}],[\"完整的签名如下\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"完整的命令如下\",{\"1\":{\"286\":1}}],[\"完整参数签名\",{\"1\":{\"311\":1}}],[\"完整用法如下\",{\"1\":{\"17\":1}}],[\"完整源码公众号回复solid获得\",{\"1\":{\"3\":1}}],[\"总会遇到一个没有被标记的节点\",{\"1\":{\"112\":1}}],[\"总体来看\",{\"1\":{\"49\":1}}],[\"总结下\",{\"1\":{\"271\":1}}],[\"总结\",{\"0\":{\"43\":1,\"54\":1,\"84\":1,\"185\":1,\"203\":1,\"236\":1,\"265\":1,\"273\":1,\"307\":1,\"381\":1}}],[\"再从当前hook拿到上次的deps\",{\"1\":{\"201\":1,\"202\":1}}],[\"再给我来一个戒戒\",{\"1\":{\"154\":1}}],[\"再到活动对象\",{\"1\":{\"118\":1}}],[\"再次上香\",{\"1\":{\"49\":1}}],[\"再后来\",{\"1\":{\"47\":1}}],[\"预编译\",{\"1\":{\"49\":1}}],[\"使vue的开发更加丝滑🚀🚀🚀\",{\"0\":{\"317\":1}}],[\"使ui和逻辑更紧密\",{\"1\":{\"208\":1}}],[\"使得配置体验相比较与\",{\"1\":{\"417\":1}}],[\"使得输入框中的值能够与组件中的变量同步\",{\"1\":{\"82\":1}}],[\"使得数据的变化可以自动更新视图\",{\"1\":{\"58\":1}}],[\"使得代码可以更容易地重用和管理\",{\"1\":{\"58\":1}}],[\"使我们可以快速进行javascript和dom的交互\",{\"1\":{\"47\":1}}],[\"使用引入外部定义的接口\",{\"0\":{\"374\":1}}],[\"使用localstorage\",{\"1\":{\"336\":1}}],[\"使用hook封装几种的异步请求函数场景\",{\"1\":{\"322\":1}}],[\"使用html描述ui\",{\"1\":{\"208\":1}}],[\"使用插件时\",{\"1\":{\"303\":1}}],[\"使用第一个结果并返回\",{\"1\":{\"302\":1}}],[\"使用`\",{\"1\":{\"296\":1}}],[\"使用findstr代替\",{\"1\":{\"286\":1}}],[\"使用for标签代替for语法等\",{\"1\":{\"52\":1}}],[\"使用的git命令是\",{\"1\":{\"286\":1}}],[\"使用默认配置加上代码压缩\",{\"1\":{\"242\":1}}],[\"使用usememo是没有意义的\",{\"1\":{\"234\":1}}],[\"使用altername属性使每个真实dom对应\",{\"1\":{\"216\":1}}],[\"使用current属性连接\",{\"1\":{\"216\":1}}],[\"使用方法如下\",{\"1\":{\"191\":1}}],[\"使用区的内存清空作为空闲区\",{\"1\":{\"140\":1}}],[\"使用标记清除\",{\"1\":{\"140\":1}}],[\"使用了单独的变量visited标记深度优先\",{\"1\":{\"109\":1}}],[\"使用组件名来引用一个组件\",{\"1\":{\"64\":1}}],[\"使用双花括号\",{\"1\":{\"61\":1}}],[\"使用\",{\"0\":{\"90\":1,\"91\":1,\"92\":1,\"93\":1,\"240\":1,\"336\":1,\"358\":1,\"364\":1},\"1\":{\"28\":1,\"62\":1,\"63\":1,\"65\":1,\"66\":1,\"89\":1,\"182\":1,\"192\":1,\"296\":1}}],[\"使用window\",{\"1\":{\"15\":1}}],[\"用匹配到的行\",{\"1\":{\"284\":1}}],[\"用来承载整个组件树的渲染结果\",{\"1\":{\"263\":1}}],[\"用户体验\",{\"2\":{\"230\":1,\"398\":1}}],[\"用户与\",{\"1\":{\"182\":1}}],[\"用户可以在不刷新页面的情况下和服务端交互\",{\"1\":{\"47\":1}}],[\"用于传递消息\",{\"1\":{\"330\":1}}],[\"用于快速切换\",{\"1\":{\"272\":1}}],[\"用于创建输入字段的预定义选项列表\",{\"1\":{\"92\":1}}],[\"用于设置\",{\"1\":{\"82\":1}}],[\"用于监听\",{\"1\":{\"82\":1}}],[\"用于双向绑定表单元素的值\",{\"1\":{\"82\":1}}],[\"用法分析\",{\"0\":{\"199\":1}}],[\"用法\",{\"0\":{\"7\":1,\"12\":1,\"17\":1},\"1\":{\"278\":1}}],[\"早期\",{\"1\":{\"47\":1}}],[\"转码的过程就是编译时\",{\"1\":{\"47\":1}}],[\"大白话就是哪些栏目需要在侧边栏展示\",{\"1\":{\"409\":1}}],[\"大文件太多\",{\"1\":{\"241\":1}}],[\"大致的过程是将还在使用中\",{\"1\":{\"139\":1}}],[\"大量的图来解释枯燥的概念\",{\"1\":{\"119\":1}}],[\"大多数同学选择前端\",{\"1\":{\"120\":1}}],[\"大多数框架都采用了aot编译技术\",{\"1\":{\"49\":1}}],[\"大多数的编程语言\",{\"1\":{\"47\":1}}],[\"大家好\",{\"1\":{\"0\":1,\"246\":1,\"277\":1}}],[\"综上\",{\"1\":{\"42\":1}}],[\"帮它模拟完整的生命周期\",{\"0\":{\"42\":1}}],[\"渲染到\",{\"1\":{\"311\":1}}],[\"渲染完毕之后执行\",{\"1\":{\"41\":1}}],[\"渲染之后立马执行\",{\"1\":{\"41\":1}}],[\"会多一个部署gh\",{\"1\":{\"415\":1}}],[\"会依次触发这些\",{\"1\":{\"302\":1}}],[\"会通过钩子函数调用插件中的方法\",{\"1\":{\"301\":1}}],[\"会将组件里的每个usestate返回的状态记录在memoizedstate下的basestate属性上\",{\"1\":{\"271\":1}}],[\"会将新的上下文信息存储在\",{\"1\":{\"263\":1}}],[\"会存储在\",{\"1\":{\"263\":1}}],[\"会创建一个新的\",{\"1\":{\"263\":1}}],[\"会自动取消订阅\",{\"1\":{\"183\":1}}],[\"会自动触发警告\",{\"1\":{\"90\":1}}],[\"会消耗很大的性能\",{\"1\":{\"102\":1}}],[\"会在页面加载完毕立马执行\",{\"1\":{\"41\":1}}],[\"会执行render方法\",{\"1\":{\"29\":1}}],[\"仅仅如下图一样\",{\"1\":{\"312\":1}}],[\"仅仅对非引用类型有效\",{\"1\":{\"234\":1}}],[\"仅仅是prototype\",{\"1\":{\"135\":1}}],[\"仅仅被用来和服务器通信的工具\",{\"1\":{\"47\":1}}],[\"仅仅在浏览器执行\",{\"1\":{\"41\":1}}],[\"仅提供initialvalue时\",{\"1\":{\"7\":1}}],[\"首先安装\",{\"1\":{\"416\":1}}],[\"首先需要你创建一个空的仓库\",{\"1\":{\"416\":1}}],[\"首先我们需要重写localstorage下的所有方法\",{\"1\":{\"330\":1}}],[\"首先我们先看监听系统主题色的例子\",{\"1\":{\"318\":1}}],[\"首先创建媒体查询对象\",{\"1\":{\"318\":2}}],[\"首先是应用被建立\",{\"1\":{\"272\":1}}],[\"首先是定义graph类\",{\"1\":{\"104\":1}}],[\"首先\",{\"1\":{\"259\":1,\"400\":1}}],[\"首先使用\",{\"1\":{\"240\":1}}],[\"首先会在内存中和上次更新的vnode进行对比\",{\"1\":{\"216\":1}}],[\"首先将内存分为新生代区域和老生代区域\",{\"1\":{\"139\":1}}],[\"首先标记\",{\"1\":{\"138\":1}}],[\"首先想到的可能是display\",{\"1\":{\"88\":1}}],[\"首先qwik是个服务端渲染的框架\",{\"1\":{\"39\":1}}],[\"首页配置\",{\"0\":{\"408\":1}}],[\"首页\",{\"0\":{\"0\":1},\"1\":{\"408\":1}}],[\"虽然根据不同的节点类型\",{\"1\":{\"271\":1}}],[\"虽然源码里面有一些概念就像一座五指山困住了桀骜不驯的孙悟空\",{\"1\":{\"257\":1}}],[\"虽然\",{\"1\":{\"242\":1}}],[\"虽然是个简单的例子\",{\"1\":{\"182\":1}}],[\"虽然观察者模式可以轻松实现发布订阅模式的功能\",{\"1\":{\"161\":1}}],[\"虽然经常和后端打交道\",{\"1\":{\"126\":1}}],[\"虽然有点标题党\",{\"1\":{\"125\":1}}],[\"虽然从现在的情况看jquery已经凉了\",{\"1\":{\"121\":1}}],[\"虽然它看起来和useeffect类似\",{\"1\":{\"39\":1}}],[\"虽然让我想起来了熟悉地solidjs\",{\"1\":{\"35\":1}}],[\"好处是可以使用\",{\"1\":{\"399\":1}}],[\"好奇它和$root究竟是啥关系\",{\"1\":{\"353\":1}}],[\"好奇的翻开代码\",{\"1\":{\"191\":1}}],[\"好几个都是只有几\",{\"1\":{\"243\":1}}],[\"好的\",{\"1\":{\"154\":3,\"155\":2}}],[\"好了今天的分享的就到了\",{\"1\":{\"338\":1}}],[\"好了今天的分享就到这了\",{\"1\":{\"307\":1}}],[\"好了今天的分享到这了\",{\"1\":{\"236\":1,\"319\":1}}],[\"好了今天的文章分享到这了\",{\"1\":{\"185\":1}}],[\"好了\",{\"1\":{\"113\":1,\"164\":1,\"203\":1,\"279\":1}}],[\"好了现在可以按照树的形式表示图了\",{\"1\":{\"100\":1}}],[\"好了好了\",{\"1\":{\"29\":1}}],[\"好吧\",{\"1\":{\"38\":1}}],[\"抱歉\",{\"1\":{\"38\":1}}],[\"来书写内容文档或者博客\",{\"1\":{\"399\":1}}],[\"来使注入的数据是响应式的\",{\"1\":{\"365\":1}}],[\"来隐藏这些属性\",{\"1\":{\"349\":1}}],[\"来获取这些\",{\"1\":{\"312\":1}}],[\"来这里买几个徒弟\",{\"1\":{\"154\":1,\"155\":1}}],[\"来进行插值表达式\",{\"1\":{\"61\":1}}],[\"来了\",{\"1\":{\"37\":1}}],[\"来看看createsignal的大致逻辑\",{\"1\":{\"27\":1}}],[\"qp5lwu\",{\"1\":{\"338\":1}}],[\"queryselector\",{\"1\":{\"296\":2,\"313\":1,\"314\":1}}],[\"query=\",{\"1\":{\"250\":1}}],[\"query\",{\"1\":{\"250\":3,\"318\":2}}],[\"questions\",{\"0\":{\"170\":1},\"1\":{\"170\":1}}],[\"queue\",{\"1\":{\"110\":5,\"112\":5}}],[\"qrl<\",{\"1\":{\"36\":1,\"38\":1}}],[\"qrl\",{\"1\":{\"36\":1}}],[\"qwik上线一年不到已经17\",{\"1\":{\"43\":1}}],[\"qwik\",{\"0\":{\"32\":1},\"1\":{\"32\":1,\"36\":1}}],[\"对思想的理解\",{\"0\":{\"392\":1}}],[\"对比两次的fiber数据结构\",{\"1\":{\"271\":1}}],[\"对比两个版本\",{\"1\":{\"242\":1}}],[\"对应src\",{\"1\":{\"409\":1}}],[\"对应首页\",{\"1\":{\"409\":1}}],[\"对应\",{\"1\":{\"409\":3}}],[\"对应仓库地址\",{\"1\":{\"399\":1}}],[\"对应项目的版本号\",{\"1\":{\"294\":1}}],[\"对应git提交id\",{\"1\":{\"294\":1}}],[\"对应updated阶段\",{\"1\":{\"271\":1}}],[\"对应组件的类型\",{\"1\":{\"259\":1}}],[\"对应的插件hook为transform\",{\"1\":{\"284\":1}}],[\"对应的是如下代码\",{\"1\":{\"261\":1}}],[\"对应的观察者concreteobservver3\",{\"1\":{\"160\":1}}],[\"对应的观察者concreteobservver1\",{\"1\":{\"160\":1}}],[\"对应的接口如下\",{\"1\":{\"27\":1}}],[\"对\",{\"0\":{\"233\":1,\"235\":1}}],[\"对返回值做处理\",{\"1\":{\"199\":1}}],[\"对react语法大刀阔斧改良的工具库\",{\"1\":{\"176\":1}}],[\"对象插入信息\",{\"1\":{\"296\":1}}],[\"对象优先在eden区和from区\",{\"1\":{\"140\":1}}],[\"对象复制到在空闲区然后清理\",{\"1\":{\"139\":1}}],[\"对广度优先搜索改造\",{\"1\":{\"112\":1}}],[\"对于侧边栏的具体条目\",{\"1\":{\"411\":1}}],[\"对于刚刚准备转码的小伙伴来说\",{\"1\":{\"173\":1}}],[\"对于复杂的系统\",{\"1\":{\"161\":1}}],[\"对于上述中的老生代采用标记清除的方法\",{\"1\":{\"139\":1}}],[\"对于上述的新生代采用并行回收的方式\",{\"1\":{\"139\":1}}],[\"对于难懂的数据结构\",{\"1\":{\"120\":1}}],[\"对于类型转换tostring\",{\"1\":{\"118\":1}}],[\"对于开发者来说\",{\"1\":{\"70\":1}}],[\"对于非基本类型可以使用usestore\",{\"1\":{\"36\":1}}],[\"对我们开发者来说是好事\",{\"1\":{\"54\":1}}],[\"那个被叫做app\",{\"1\":{\"353\":1}}],[\"那到底应该何时使用usecallback呢\",{\"1\":{\"235\":1}}],[\"那它的语法你肯定不会觉得陌生\",{\"1\":{\"176\":1}}],[\"那恭喜你\",{\"1\":{\"160\":1}}],[\"那就自己动手开发一个吧\",{\"1\":{\"284\":1}}],[\"那就中断它\",{\"1\":{\"217\":1}}],[\"那就是\",{\"1\":{\"182\":1}}],[\"那就给这个对象的引用计数\",{\"1\":{\"138\":1}}],[\"那就标记它\",{\"1\":{\"110\":2}}],[\"那就放弃这条边\",{\"1\":{\"99\":1}}],[\"那就称为有序图\",{\"1\":{\"97\":1}}],[\"那么建议你不要下载\",{\"1\":{\"372\":1}}],[\"那么就不存在这样的麻烦了\",{\"1\":{\"353\":1}}],[\"那么就会作为第四块\",{\"1\":{\"214\":1}}],[\"那么仅展示\",{\"1\":{\"313\":1}}],[\"那么仅仅在客户端执行一次\",{\"1\":{\"40\":1}}],[\"那么渲染组件\",{\"1\":{\"313\":1}}],[\"那么多console我没法调试啊\",{\"1\":{\"283\":1}}],[\"那么会有多个实例\",{\"1\":{\"263\":1}}],[\"那么你可以使用react\",{\"1\":{\"218\":1}}],[\"那么有没有更简便的方案\",{\"1\":{\"182\":1}}],[\"那么这个仓库是值得一看的\",{\"1\":{\"174\":1}}],[\"那么它是怎么解耦的呢\",{\"1\":{\"161\":1}}],[\"那么图就是有权图\",{\"1\":{\"97\":1}}],[\"那么实际得到的值为空字符串\",{\"1\":{\"90\":1}}],[\"那么当客户端渲染之后触发更新时\",{\"1\":{\"40\":1}}],[\"那依赖注入有没有啊\",{\"1\":{\"38\":1}}],[\"那有没有类似reactive呢\",{\"1\":{\"35\":1}}],[\"那人却在\",{\"1\":{\"29\":1}}],[\"看了前面的例子\",{\"1\":{\"360\":1}}],[\"看了看文档和\",{\"1\":{\"311\":1}}],[\"看下面的代码\",{\"1\":{\"353\":1}}],[\"看下面的例子\",{\"1\":{\"350\":1}}],[\"看看双缓存机制的作用过程\",{\"1\":{\"272\":1}}],[\"看着每页的图片\",{\"1\":{\"154\":1}}],[\"看着solidjs朴素的运行时原理\",{\"1\":{\"29\":1}}],[\"看不懂你来打我\",{\"0\":{\"158\":1},\"1\":{\"121\":1}}],[\"看完模版语法\",{\"1\":{\"69\":1}}],[\"看起来很像\",{\"1\":{\"35\":1}}],[\"gh\",{\"1\":{\"415\":1}}],[\"globalthis\",{\"1\":{\"303\":1}}],[\"guide\",{\"1\":{\"301\":2}}],[\"g\",{\"1\":{\"287\":1,\"306\":1}}],[\"geometry\",{\"1\":{\"409\":1,\"411\":1}}],[\"generic=\",{\"1\":{\"379\":1}}],[\"generate\",{\"1\":{\"303\":1,\"416\":1}}],[\"geetdate\",{\"1\":{\"247\":1}}],[\"getitem\",{\"1\":{\"333\":2}}],[\"getnextport\",{\"1\":{\"305\":3}}],[\"getboundingclientrect\",{\"1\":{\"249\":1}}],[\"getdata\",{\"1\":{\"247\":1}}],[\"getserverstate\",{\"1\":{\"192\":1}}],[\"getstate\",{\"1\":{\"191\":1,\"192\":4}}],[\"getcontext\",{\"1\":{\"77\":2}}],[\"getcurrentlistener\",{\"1\":{\"27\":1}}],[\"getter\",{\"1\":{\"10\":1,\"15\":1,\"414\":2}}],[\"getelementbyid\",{\"1\":{\"8\":1,\"13\":1,\"18\":1,\"26\":1,\"28\":1,\"29\":1,\"271\":1,\"296\":1}}],[\"get\",{\"1\":{\"7\":1,\"160\":2,\"161\":2,\"162\":1,\"184\":2}}],[\"gz\",{\"1\":{\"241\":1}}],[\"gzip\",{\"1\":{\"241\":7}}],[\"grep\",{\"1\":{\"286\":2}}],[\"green\",{\"1\":{\"176\":1,\"312\":1,\"314\":1}}],[\"graph\",{\"1\":{\"104\":1,\"105\":1,\"106\":1,\"107\":11,\"111\":2,\"113\":1}}],[\"giscus\",{\"1\":{\"416\":5}}],[\"git\",{\"1\":{\"286\":2,\"295\":1,\"296\":5,\"407\":1}}],[\"github地址\",{\"1\":{\"289\":1,\"290\":1,\"297\":1}}],[\"github\",{\"1\":{\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"176\":1,\"177\":1,\"180\":1,\"185\":1,\"289\":1,\"290\":1,\"297\":1,\"399\":2,\"403\":1,\"407\":1,\"408\":2,\"415\":3,\"416\":3}}],[\"git地址\",{\"1\":{\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"176\":1,\"177\":1}}],[\"gif\",{\"1\":{\"35\":1,\"36\":2,\"37\":1,\"40\":1,\"41\":2,\"42\":1,\"91\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"313\":3,\"319\":2,\"323\":1,\"324\":1,\"325\":1,\"338\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":1}}],[\"golab\",{\"1\":{\"173\":1}}],[\"golang\",{\"1\":{\"125\":1}}],[\"goods\",{\"1\":{\"278\":4}}],[\"good\",{\"1\":{\"163\":1}}],[\"gc\",{\"0\":{\"138\":1},\"1\":{\"140\":4}}],[\"废话不多说\",{\"1\":{\"34\":1}}],[\"初始化目录结构如下\",{\"1\":{\"407\":1}}],[\"初始化项目\",{\"0\":{\"407\":1}}],[\"初始化一个请求函数\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"初始化options\",{\"1\":{\"10\":1,\"15\":1}}],[\"初识qwik\",{\"0\":{\"34\":1}}],[\"学不会\",{\"1\":{\"96\":1}}],[\"学不会你来打我\",{\"0\":{\"58\":1,\"96\":1},\"1\":{\"33\":1,\"49\":1,\"55\":1}}],[\"学不完的框架\",{\"0\":{\"24\":1,\"32\":1},\"1\":{\"4\":1,\"33\":1,\"55\":1}}],[\"真是个体力活\",{\"1\":{\"283\":1}}],[\"真实\",{\"1\":{\"311\":1}}],[\"真实效果可以运行源码\",{\"1\":{\"221\":1}}],[\"真实的源码里\",{\"1\":{\"19\":1}}],[\"真的很让人emo\",{\"1\":{\"283\":1}}],[\"真的干货满满\",{\"1\":{\"274\":1}}],[\"真的令人敬佩\",{\"1\":{\"121\":1}}],[\"真的是权威指南\",{\"1\":{\"118\":1}}],[\"真的没完没了了\",{\"1\":{\"32\":1}}],[\"真心希望不会有烧不断地锁这篇文章\",{\"1\":{\"33\":1}}],[\"活动\",{\"1\":{\"32\":1,\"116\":1,\"121\":1}}],[\"敬请期待\",{\"1\":{\"29\":1}}],[\"不是我们的能力差\",{\"1\":{\"390\":1}}],[\"不是成倍缩短\",{\"1\":{\"139\":1}}],[\"不冲突\",{\"1\":{\"372\":1}}],[\"不明显的缺点\",{\"0\":{\"365\":1}}],[\"不然它会在你看不到的地方继续执行而难以被发现\",{\"0\":{\"359\":1}}],[\"不符合直觉\",{\"1\":{\"323\":1}}],[\"不展示文本\",{\"1\":{\"313\":1}}],[\"不配置使用默认值\",{\"1\":{\"313\":1}}],[\"不显示\",{\"1\":{\"296\":3}}],[\"不同主题的之间的最明显的差异就是默认的样式不同\",{\"1\":{\"400\":1}}],[\"不同\",{\"1\":{\"208\":1}}],[\"不同的插件\",{\"1\":{\"416\":1}}],[\"不同的主题又组织了不同的插件集合来完成开箱即用的功能\",{\"1\":{\"400\":1}}],[\"不同的数据结构更新方式也不一样\",{\"1\":{\"271\":1}}],[\"不同的框架中\",{\"1\":{\"208\":1}}],[\"不同的是usememo可以缓存任何类型的值\",{\"1\":{\"203\":1}}],[\"不同的是当依赖项发生改变时\",{\"1\":{\"199\":1}}],[\"不同的是\",{\"1\":{\"140\":1}}],[\"不同环境处理\",{\"0\":{\"192\":1}}],[\"不会触发订阅的回调函数\",{\"1\":{\"191\":1}}],[\"不会再开发新功能了\",{\"1\":{\"177\":1}}],[\"不使用的对象直接清理掉\",{\"1\":{\"139\":1}}],[\"不用手写防抖函数了\",{\"1\":{\"250\":1}}],[\"不用对一些常驻的对象频繁的做回收扫描\",{\"1\":{\"139\":1}}],[\"不用任何修饰\",{\"1\":{\"70\":1}}],[\"不管iszero是否发生变化\",{\"1\":{\"235\":1}}],[\"不管是vue还是react\",{\"1\":{\"215\":1}}],[\"不管是jsx还是模板语法\",{\"1\":{\"208\":1}}],[\"不管是javascript还是nodejs\",{\"1\":{\"139\":1}}],[\"不管什么语言\",{\"1\":{\"138\":1}}],[\"不管什么框架\",{\"1\":{\"121\":1}}],[\"不懂的硬件直接百度吧\",{\"1\":{\"119\":1}}],[\"不做梦了\",{\"1\":{\"29\":1}}],[\"不过你尝试着给$root传递一个响应式的对象\",{\"1\":{\"355\":1}}],[\"不过我在部署时遇到问题\",{\"1\":{\"415\":1}}],[\"不过我们可以分解为两个动画\",{\"1\":{\"389\":1}}],[\"不过我打算使用自己实现的中介者模式作为通信方法\",{\"1\":{\"330\":1}}],[\"不过我也写了最新语法的部分笔记\",{\"1\":{\"121\":1}}],[\"不过都是直接生成\",{\"1\":{\"295\":1}}],[\"不过这个工具库仅仅是维护阶段\",{\"1\":{\"177\":1}}],[\"不过这本书目前还是es5语法版本实现\",{\"1\":{\"120\":1}}],[\"不过多线程都会涉及线程状态和消息同步的问题\",{\"1\":{\"143\":1}}],[\"不过也被我研读了多遍\",{\"1\":{\"117\":1}}],[\"不过vue的模板语法是基于html的\",{\"1\":{\"52\":1}}],[\"不过现在已经凉透了\",{\"1\":{\"49\":1}}],[\"不过typescript仅仅拥有编译时\",{\"1\":{\"48\":1}}],[\"不过比较复杂\",{\"1\":{\"36\":1}}],[\"不过作为\",{\"1\":{\"32\":1}}],[\"不过\",{\"1\":{\"26\":1,\"48\":1,\"52\":1}}],[\"不过本着给大家踩坑避雷的精神\",{\"1\":{\"24\":1}}],[\"灯火阑珊处\",{\"1\":{\"29\":1}}],[\"慕然回首\",{\"1\":{\"29\":1}}],[\"也就说$root也是app\",{\"1\":{\"353\":1}}],[\"也就是对应的钩子函数beforeentry\",{\"1\":{\"392\":1}}],[\"也就是\",{\"1\":{\"311\":1}}],[\"也就是说它就是响应式的了\",{\"1\":{\"355\":1}}],[\"也就是说它可以作为隔代组件通信的桥梁\",{\"1\":{\"350\":1}}],[\"也就是说\",{\"1\":{\"199\":1,\"261\":1}}],[\"也就是update方法\",{\"1\":{\"28\":1}}],[\"也适合隔代组件\",{\"1\":{\"350\":1}}],[\"也仔细用了vue3一些功能\",{\"1\":{\"328\":1}}],[\"也不是响应式的\",{\"1\":{\"347\":1}}],[\"也不用立即执行\",{\"1\":{\"324\":1}}],[\"也不会影响别人开发调试了\",{\"1\":{\"284\":1}}],[\"也可能是对象\",{\"1\":{\"313\":1}}],[\"也可以是对象\",{\"1\":{\"409\":1}}],[\"也可以是<app\",{\"1\":{\"259\":1}}],[\"也可以关注我的公众号\",{\"1\":{\"246\":1}}],[\"也是组件根节点的数据单元\",{\"1\":{\"265\":1}}],[\"也是一样的损耗性能\",{\"1\":{\"102\":1}}],[\"也没有并发\",{\"1\":{\"142\":1}}],[\"也为你准备完毕\",{\"1\":{\"29\":1}}],[\"才能更好的开发一个优秀的插件\",{\"1\":{\"307\":1}}],[\"才发现\",{\"1\":{\"191\":1}}],[\"才让javascript拥有了编译时\",{\"1\":{\"48\":1}}],[\"才会通过发布订阅模式创建响应式变量\",{\"1\":{\"29\":1}}],[\"才是响应式的\",{\"1\":{\"8\":1}}],[\"执行成功后\",{\"1\":{\"415\":1}}],[\"执行回调函数\",{\"1\":{\"201\":1}}],[\"执行顺序如下\",{\"1\":{\"80\":1}}],[\"执行render方法后\",{\"1\":{\"29\":1}}],[\"执行\",{\"1\":{\"29\":1,\"408\":1}}],[\"执行副作用\",{\"1\":{\"26\":1,\"27\":1,\"28\":1}}],[\"将选中的分支内容部署在\",{\"1\":{\"415\":1}}],[\"将相同的分类文章放在同一目录下\",{\"1\":{\"409\":1}}],[\"将父亲的属性通过自己传给自己的儿子\",{\"1\":{\"350\":1}}],[\"将结果处理交给开发者\",{\"1\":{\"318\":1}}],[\"将文件中的console智能的清除\",{\"1\":{\"284\":1}}],[\"将文件根据路由切割成多个子模块\",{\"1\":{\"243\":1}}],[\"将workinprogress对应的fiber\",{\"1\":{\"272\":1}}],[\"将有标记的地方更新\",{\"1\":{\"272\":1}}],[\"将不可中断的递归改进为可中断的递归\",{\"1\":{\"258\":1}}],[\"将小文件进行合并\",{\"1\":{\"243\":1}}],[\"将\",{\"1\":{\"240\":1,\"311\":1}}],[\"将练习了时长两年半的\",{\"1\":{\"240\":1}}],[\"将react项目脚手架webpack换成vite⚡⚡\",{\"0\":{\"239\":1}}],[\"将延时参数\",{\"1\":{\"223\":1}}],[\"将动画结束之后的样式应用在元素上\",{\"1\":{\"222\":1}}],[\"将动态的片段使用\",{\"1\":{\"28\":1}}],[\"将我们的代码转为宿主环境可以识别的代码\",{\"1\":{\"208\":1}}],[\"将ts转为js\",{\"1\":{\"208\":1}}],[\"将框架可以分为三类\",{\"1\":{\"208\":1}}],[\"将框架模板或者jsx编译成javascript代码的过程\",{\"1\":{\"48\":1}}],[\"将所有的变更通过event广播给所有订阅该topic的订阅者们\",{\"1\":{\"161\":1}}],[\"将目标具体的变化通知所有的观察者\",{\"1\":{\"160\":1}}],[\"将使用中的对象复制到空闲区\",{\"1\":{\"140\":1}}],[\"将使用中的对象移到内存的另一端\",{\"1\":{\"140\":1}}],[\"将内存一分为二\",{\"1\":{\"140\":1}}],[\"将未使用的对象标记为可清除\",{\"1\":{\"140\":1}}],[\"将清理后的内存空间重写分配整理\",{\"1\":{\"138\":1}}],[\"将起始节点放入队列\",{\"1\":{\"110\":2}}],[\"将边排序\",{\"1\":{\"99\":1}}],[\"将表达式的值插入到模板中\",{\"1\":{\"61\":1}}],[\"将组件包装成函数\",{\"1\":{\"28\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"1\":1}}],[\"创建完项目后记得下载最新的包\",{\"1\":{\"370\":1}}],[\"创建项目并运行\",{\"0\":{\"370\":1}}],[\"创建基础项目框架\",{\"1\":{\"240\":1}}],[\"创建的\",{\"1\":{\"192\":1}}],[\"创建\",{\"1\":{\"191\":1,\"192\":1,\"370\":1}}],[\"创建状态存储\",{\"1\":{\"182\":1}}],[\"创建上下文\",{\"1\":{\"182\":1}}],[\"创建一个上下文对象类型\",{\"1\":{\"182\":1}}],[\"创建了线程\",{\"1\":{\"143\":1}}],[\"创建全局的上下文\",{\"1\":{\"38\":1}}],[\"创建纯静态的jsx模板\",{\"1\":{\"28\":1}}],[\"创建内部signal\",{\"1\":{\"10\":1,\"15\":1}}],[\"3多使用settiemout函数给不同dom依次设置动画延迟\",{\"0\":{\"396\":1}}],[\"3已经发布一个月了\",{\"1\":{\"368\":1}}],[\"3所有新功能🎉\",{\"0\":{\"368\":1}}],[\"360deg\",{\"1\":{\"312\":2,\"314\":2}}],[\"36种不同姿势钢管舞\",{\"1\":{\"154\":1,\"155\":1}}],[\"3k\",{\"1\":{\"185\":1}}],[\"34\",{\"1\":{\"185\":1}}],[\"33\",{\"1\":{\"163\":2}}],[\"300px\",{\"1\":{\"313\":3,\"314\":1}}],[\"300\",{\"1\":{\"223\":2,\"225\":2,\"226\":2,\"227\":4,\"228\":1}}],[\"300ms\",{\"1\":{\"223\":1}}],[\"3000\",{\"1\":{\"177\":1,\"354\":1,\"355\":1,\"365\":1}}],[\"30\",{\"1\":{\"72\":1,\"73\":1}}],[\"3\",{\"0\":{\"62\":1,\"90\":1,\"131\":1,\"214\":1,\"224\":1,\"225\":1,\"226\":1,\"227\":2,\"347\":1,\"348\":1,\"355\":1,\"360\":1,\"389\":1},\"1\":{\"28\":1,\"92\":1,\"99\":2,\"100\":4,\"107\":6,\"110\":1,\"111\":2,\"113\":1,\"135\":1,\"136\":3,\"163\":4,\"191\":1,\"233\":1,\"235\":2,\"296\":2,\"311\":1,\"364\":1,\"370\":2,\"374\":1,\"400\":1,\"409\":1}}],[\"$off\",{\"1\":{\"358\":2}}],[\"$on\",{\"1\":{\"358\":2}}],[\"$options\",{\"1\":{\"210\":1}}],[\"$root也有它的缺点\",{\"1\":{\"354\":1}}],[\"$root用来方位根实例属性\",{\"1\":{\"352\":1}}],[\"$root\",{\"0\":{\"352\":1},\"1\":{\"353\":3,\"354\":4,\"355\":4}}],[\"$refs\",{\"0\":{\"347\":1},\"1\":{\"347\":1}}],[\"$parent用来访问父组件实例\",{\"1\":{\"345\":1}}],[\"$parent\",{\"0\":{\"345\":1},\"1\":{\"345\":3,\"347\":1}}],[\"$props\",{\"1\":{\"210\":1}}],[\"$localstorage\",{\"1\":{\"333\":1,\"337\":1}}],[\"$attrs还有个妙用就是将父组件所有未在props声明的属性通过v\",{\"1\":{\"350\":1}}],[\"$attrs包含所有未在props中声明的父组件传递的属性\",{\"1\":{\"350\":1}}],[\"$attrs\",{\"0\":{\"350\":1},\"1\":{\"312\":3,\"314\":2,\"350\":3}}],[\"$age\",{\"1\":{\"73\":1}}],[\"$2\",{\"1\":{\"306\":1}}],[\"$flowfixme\",{\"1\":{\"259\":1,\"263\":2}}],[\"$$invalidate\",{\"1\":{\"211\":2}}],[\"$$props\",{\"1\":{\"211\":1}}],[\"$$self\",{\"1\":{\"211\":1}}],[\"$$click\",{\"1\":{\"28\":1}}],[\"$eventbus\",{\"1\":{\"357\":1,\"358\":3}}],[\"$event\",{\"1\":{\"210\":1}}],[\"$emit事件接口后\",{\"1\":{\"330\":1}}],[\"$emit\",{\"1\":{\"161\":1,\"343\":1,\"358\":2}}],[\"$data\",{\"1\":{\"210\":1}}],[\"$delegateevents\",{\"1\":{\"28\":2}}],[\"$setup\",{\"1\":{\"210\":1}}],[\"$content\",{\"1\":{\"414\":2}}],[\"$count\",{\"1\":{\"78\":3}}],[\"$children用来访问子组件实例\",{\"1\":{\"346\":1}}],[\"$children\",{\"0\":{\"346\":1},\"1\":{\"346\":2}}],[\"$createcomponent\",{\"1\":{\"28\":2,\"29\":1}}],[\"$name\",{\"1\":{\"73\":1}}],[\"$\",{\"0\":{\"72\":1},\"1\":{\"36\":2,\"38\":1,\"72\":3,\"73\":4,\"161\":2,\"177\":2,\"223\":8,\"228\":3,\"233\":1,\"235\":1,\"286\":6}}],[\"$insert更新dom\",{\"1\":{\"29\":1}}],[\"$insert方法插入模板中\",{\"1\":{\"28\":1}}],[\"$insert\",{\"1\":{\"28\":5}}],[\"$template\",{\"1\":{\"28\":3}}],[\"编译完成之后在宿主环境中执行\",{\"1\":{\"49\":1}}],[\"编译时\",{\"0\":{\"50\":1}}],[\"编译时的概念被分为即时编译\",{\"1\":{\"49\":1}}],[\"编译时也有饭圈\",{\"0\":{\"49\":1}}],[\"编译结果可以在官网的演练场output查看\",{\"1\":{\"28\":1}}],[\"编译原理和运行时原理\",{\"1\":{\"4\":1}}],[\"上线内容描述\",{\"1\":{\"294\":1}}],[\"上线日期\",{\"1\":{\"294\":1}}],[\"上次的文章已经介绍了vite的插件开发了\",{\"1\":{\"284\":1}}],[\"上次没有更新时\",{\"1\":{\"216\":1}}],[\"上图我已经把敏感信息屏蔽掉了\",{\"1\":{\"283\":1}}],[\"上图中加入边的顺序以此为\",{\"1\":{\"99\":1}}],[\"上述整个过程主要是render阶段地内容\",{\"1\":{\"272\":1}}],[\"上述例子的编译结果如下\",{\"1\":{\"28\":1}}],[\"上文提到\",{\"1\":{\"270\":1}}],[\"上下交错\",{\"0\":{\"226\":1}}],[\"上面提到\",{\"1\":{\"272\":1}}],[\"上面三块代码功能都是一样的\",{\"1\":{\"208\":1}}],[\"上面的示例中\",{\"1\":{\"235\":1}}],[\"上面的代码会执行成功\",{\"1\":{\"199\":1}}],[\"上面的例子中\",{\"1\":{\"39\":1}}],[\"上的\",{\"1\":{\"139\":1}}],[\"上香\",{\"1\":{\"58\":1}}],[\"上篇文章中提到过\",{\"1\":{\"272\":1}}],[\"上篇文章中讲述了几个容易给源码阅读造成困扰的几个fiber相关的变量名称\",{\"1\":{\"270\":1}}],[\"上篇文章中主要介绍了solid\",{\"1\":{\"4\":1}}],[\"上篇\",{\"1\":{\"24\":1}}],[\"可能也没有那么难\",{\"1\":{\"390\":1}}],[\"可能是我ts太菜了\",{\"1\":{\"323\":1}}],[\"可没有这步\",{\"1\":{\"325\":1}}],[\"可怜可怜我吧\",{\"1\":{\"277\":1}}],[\"可选\",{\"1\":{\"241\":1}}],[\"可选边为\",{\"1\":{\"100\":5}}],[\"可达性分析是从gc\",{\"1\":{\"140\":1}}],[\"可达性分析\",{\"1\":{\"140\":1}}],[\"可达性分析确定的\",{\"1\":{\"139\":1}}],[\"可以通过设置children\",{\"1\":{\"411\":1}}],[\"可以通过设置herofullscreen\",{\"1\":{\"408\":1}}],[\"可以通过提供一个响应式的对象\",{\"1\":{\"365\":1}}],[\"可以关注我哦~\",{\"1\":{\"384\":1}}],[\"可以关注我的公众号\",{\"1\":{\"21\":1}}],[\"可以形象的把它理解成为它们共同的祖先\",{\"1\":{\"353\":1}}],[\"可以评论区告诉我\",{\"1\":{\"314\":1}}],[\"可以满足我的需求的插件基本上没有\",{\"1\":{\"295\":1}}],[\"可以看到博客的首页如下\",{\"1\":{\"408\":1}}],[\"可以看文章末尾\",{\"1\":{\"282\":1}}],[\"可以看出默认为\",{\"1\":{\"192\":1}}],[\"可以是calss\",{\"1\":{\"259\":1}}],[\"可以是class\",{\"1\":{\"259\":1}}],[\"可以比\",{\"1\":{\"242\":1}}],[\"可以正常进行\",{\"1\":{\"240\":1}}],[\"可以有效提高页面性能\",{\"1\":{\"236\":1}}],[\"可以中断的更新原理是\",{\"1\":{\"217\":1}}],[\"可以跳过代码往下看\",{\"1\":{\"211\":1}}],[\"可以用来分析\",{\"1\":{\"208\":1}}],[\"可以阅读这块\",{\"1\":{\"200\":1}}],[\"可以模拟出不同的效果\",{\"1\":{\"199\":1}}],[\"可以随时取消订阅\",{\"1\":{\"161\":1}}],[\"可以很好的解决观察者模式耦合问题\",{\"1\":{\"161\":1}}],[\"可以告诉我\",{\"1\":{\"121\":1}}],[\"可以及时查漏补缺\",{\"1\":{\"118\":1}}],[\"可以使计算量缩减到最小\",{\"1\":{\"98\":1}}],[\"可以使用usememo缓存计算结果\",{\"1\":{\"236\":1}}],[\"可以使用memo包裹组件\",{\"1\":{\"236\":2}}],[\"可以使用如下方式\",{\"1\":{\"183\":1}}],[\"可以使用策略模式\",{\"1\":{\"163\":1}}],[\"可以使用$emit方法和$on\",{\"1\":{\"161\":1}}],[\"可以使用\",{\"1\":{\"82\":3,\"183\":1}}],[\"可以将代码打包成高效的javascript代码\",{\"1\":{\"84\":1}}],[\"可以说和vue时一脉相承\",{\"1\":{\"69\":1}}],[\"可以对开发者的代码做充分的分析\",{\"1\":{\"49\":1}}],[\"可以理解为javascript的运行时和编译时是交织在一起的\",{\"1\":{\"47\":1}}],[\"可以加我sunboy\",{\"1\":{\"43\":1}}],[\"可当你走近它的心\",{\"1\":{\"27\":1}}],[\"欢迎大家指正不足的地方\",{\"1\":{\"325\":1}}],[\"欢迎交流\",{\"1\":{\"228\":1}}],[\"欢迎star⭐\",{\"1\":{\"290\":1}}],[\"欢迎star\",{\"1\":{\"221\":1}}],[\"欢迎指正\",{\"1\":{\"164\":1,\"288\":1,\"307\":1}}],[\"欢迎指正出现的问题\",{\"1\":{\"113\":1}}],[\"欢迎关注和骚扰\",{\"1\":{\"381\":1}}],[\"欢迎关注了解\",{\"1\":{\"328\":1}}],[\"欢迎关注\",{\"1\":{\"87\":1,\"168\":1,\"180\":1,\"195\":1,\"231\":1,\"239\":1,\"257\":1,\"269\":1,\"282\":1,\"293\":1,\"310\":1,\"317\":1,\"322\":1,\"368\":1,\"399\":1}}],[\"欢迎关注我\",{\"1\":{\"0\":1,\"29\":1}}],[\"欢欣之后\",{\"1\":{\"27\":1}}],[\"都只是一种繁琐的铺垫\",{\"1\":{\"360\":1}}],[\"都带有\",{\"1\":{\"241\":1}}],[\"都是非响应式的数据模式\",{\"1\":{\"365\":1}}],[\"都是指运行在内存中的对象\",{\"1\":{\"272\":1}}],[\"都是基于object\",{\"1\":{\"234\":1}}],[\"都是运行在v8引擎\",{\"1\":{\"139\":1}}],[\"都是运行在浏览器环境或者v8环境的编程语言\",{\"1\":{\"47\":1}}],[\"都会从当前组件开始一直到所有叶子节点组件重新渲染\",{\"1\":{\"234\":1}}],[\"都会调用组件的render函数\",{\"1\":{\"210\":1}}],[\"都会重新编译\",{\"1\":{\"208\":1}}],[\"都会重新执行\",{\"1\":{\"27\":1}}],[\"都会对应的观察者会接受到变化\",{\"1\":{\"160\":1}}],[\"都会执行上次任务的cleanup\",{\"1\":{\"41\":1}}],[\"都算不上\",{\"1\":{\"4\":1}}],[\"下滑之后文章的列表如下\",{\"1\":{\"408\":1}}],[\"下载最新的vue\",{\"0\":{\"372\":1}}],[\"下载依赖\",{\"1\":{\"370\":1}}],[\"下载完代码和依赖\",{\"1\":{\"283\":1}}],[\"下篇我们继续聊hook\",{\"1\":{\"203\":1}}],[\"下篇文章我们从源码的角度进一步的认识\",{\"1\":{\"185\":1}}],[\"下篇文章会介绍下solidjs别的用法以及响应式原理\",{\"1\":{\"29\":1}}],[\"下篇文章会做详细的对比\",{\"1\":{\"27\":1}}],[\"下一小段增量标记开始时无法得知标记状态\",{\"1\":{\"139\":1}}],[\"下面会介绍各个参数的细节\",{\"1\":{\"311\":1}}],[\"下面我们看看插件的机制原理\",{\"1\":{\"301\":1}}],[\"下面我们还会讲到\",{\"1\":{\"271\":1}}],[\"下面我们实现creatememo\",{\"1\":{\"15\":1}}],[\"下面的所有方法的分类不是唯一的\",{\"1\":{\"350\":1}}],[\"下面的关键请求链显示了哪些资源是以高优先级加载的\",{\"1\":{\"243\":1}}],[\"下面的例子中\",{\"1\":{\"160\":1}}],[\"下面展示下组合动画的\",{\"1\":{\"223\":1}}],[\"下面演示下java的自动装箱和拆箱\",{\"1\":{\"130\":1}}],[\"下面就是你需要提前准备并且熟悉的知识点\",{\"1\":{\"126\":1}}],[\"下面是我本地的初始版本\",{\"1\":{\"296\":1}}],[\"下面是核心代码实现\",{\"1\":{\"191\":1}}],[\"下面是一个有趣的例子\",{\"1\":{\"177\":1}}],[\"下面是以跟节点为例的实现\",{\"1\":{\"112\":1}}],[\"下面是具体的区别\",{\"1\":{\"39\":1}}],[\"下面这个例子仅仅在新的值大于旧的值\",{\"1\":{\"8\":1}}],[\"通信最关键的地方其实就在上面的updatemsg函数里\",{\"1\":{\"360\":1}}],[\"通信机制就不能不重新建立了\",{\"1\":{\"353\":1}}],[\"通用的钩子\",{\"1\":{\"301\":1}}],[\"通常父组件都是唯一确定的\",{\"1\":{\"345\":1}}],[\"通常状况下\",{\"1\":{\"263\":1}}],[\"通常\",{\"1\":{\"183\":1}}],[\"通常会采用\",{\"1\":{\"182\":1}}],[\"通知\",{\"1\":{\"182\":1}}],[\"通知每个listener更新数据\",{\"1\":{\"27\":1}}],[\"通俗易懂\",{\"1\":{\"158\":1}}],[\"通过设置article\",{\"1\":{\"408\":1}}],[\"通过alternate属性比对\",{\"1\":{\"272\":1}}],[\"通过压缩文件优化后\",{\"1\":{\"241\":1}}],[\"通过分析\",{\"1\":{\"241\":1}}],[\"通过广播事件\",{\"1\":{\"160\":1}}],[\"通过\",{\"1\":{\"89\":1,\"182\":1,\"296\":1}}],[\"通过clonenode方法\",{\"1\":{\"28\":1}}],[\"通宵达旦研究了一番\",{\"1\":{\"24\":1}}],[\"的工作流\",{\"1\":{\"407\":1}}],[\"的场景\",{\"1\":{\"354\":1}}],[\"的更新会向下流动到子组件中\",{\"1\":{\"343\":1}}],[\"的函数\",{\"1\":{\"311\":1}}],[\"的数组中如下\",{\"1\":{\"303\":1}}],[\"的巧妙之处\",{\"0\":{\"303\":1}}],[\"的构建过程\",{\"1\":{\"301\":1}}],[\"的插件机制\",{\"1\":{\"304\":1}}],[\"的插件机制实现主要基于两点\",{\"1\":{\"302\":1}}],[\"的插件机制实现的\",{\"1\":{\"301\":1}}],[\"的插件机制是通过钩子函数实现的\",{\"1\":{\"301\":1}}],[\"的插件机制是基于\",{\"1\":{\"301\":1}}],[\"的节点都有以下几个和fiber架构相关的重要属性\",{\"1\":{\"271\":1}}],[\"的方式\",{\"1\":{\"243\":1}}],[\"的小文件\",{\"1\":{\"243\":1}}],[\"的优势很明显\",{\"1\":{\"242\":1}}],[\"的性能得分\",{\"1\":{\"241\":1,\"242\":1}}],[\"的误解\",{\"0\":{\"233\":1,\"235\":1}}],[\"的组件\",{\"0\":{\"214\":1}}],[\"的返回值是使用\",{\"1\":{\"192\":1}}],[\"的环境使用如下\",{\"1\":{\"192\":1}}],[\"的\",{\"1\":{\"185\":1,\"192\":1,\"242\":2,\"311\":2,\"312\":1}}],[\"的参数就\",{\"1\":{\"184\":1}}],[\"的需求\",{\"1\":{\"182\":1}}],[\"的流行\",{\"1\":{\"182\":1}}],[\"的消息传递\",{\"1\":{\"143\":1}}],[\"的内存共享和使用wait\",{\"1\":{\"143\":1}}],[\"的区别\",{\"0\":{\"132\":1}}],[\"的书\",{\"1\":{\"121\":1}}],[\"的特点\",{\"1\":{\"49\":1,\"182\":1}}],[\"的框架啊\",{\"1\":{\"29\":1}}],[\"的时候作为发布者\",{\"1\":{\"27\":1}}],[\"的地方收集listener\",{\"1\":{\"27\":1}}],[\"在评论仓库查看\",{\"1\":{\"416\":1}}],[\"在启用栏目复制以下几个信息\",{\"1\":{\"416\":1}}],[\"在配置详情页中选择对应的生效仓库\",{\"1\":{\"416\":1}}],[\"在开始之前你需要明确\",{\"1\":{\"409\":1}}],[\"在开发环境只展示开发者自己的console\",{\"1\":{\"284\":1}}],[\"在明确你的目标之后\",{\"1\":{\"399\":1}}],[\"在script标签上用generic属性定义泛型\",{\"1\":{\"379\":1}}],[\"在父组件中监听最新的变化值\",{\"1\":{\"376\":1}}],[\"在父组件使用v\",{\"1\":{\"343\":1}}],[\"在inject选项中使用共享的数据\",{\"1\":{\"363\":1}}],[\"在iszero的没有变的情况下\",{\"1\":{\"233\":1}}],[\"在子组件默认添加inheritattrs选项\",{\"1\":{\"349\":1}}],[\"在子组件使用$emit定义监听事件名称\",{\"1\":{\"343\":1}}],[\"在事件中改变父组件的状态\",{\"1\":{\"343\":1}}],[\"在vue3移除了$on\",{\"1\":{\"330\":1}}],[\"在元素被插入到\",{\"1\":{\"311\":1}}],[\"在绑定元素的父组件\",{\"1\":{\"311\":2}}],[\"在绑定元素的\",{\"1\":{\"311\":1}}],[\"在执行对应过程时\",{\"1\":{\"302\":1}}],[\"在每个文件中匹配console语句\",{\"1\":{\"284\":1}}],[\"在每次read\",{\"1\":{\"27\":1}}],[\"在线demo看这里\",{\"1\":{\"279\":1}}],[\"在app组件解析成vmnode后\",{\"1\":{\"272\":1}}],[\"在函数组件对应的链表结构中\",{\"1\":{\"271\":1}}],[\"在fiber架构中\",{\"1\":{\"265\":1}}],[\"在进行组件更新时\",{\"1\":{\"263\":1}}],[\"在源码中\",{\"1\":{\"259\":1}}],[\"在没有任何优化情况下\",{\"1\":{\"241\":1}}],[\"在上面的代码基础上添加如下代码\",{\"1\":{\"235\":1}}],[\"在动画执行之前和之后不会应用任何样式到目标元素\",{\"1\":{\"222\":1}}],[\"在不可中断的情况下\",{\"1\":{\"217\":1}}],[\"在内存中全部更新\",{\"1\":{\"216\":1}}],[\"在编译之后返回的都是vnode\",{\"1\":{\"215\":1}}],[\"在编译前所有变量类型都是确定的\",{\"1\":{\"129\":1}}],[\"在页面首次进入或者watcheffect的依赖项发生变化时\",{\"1\":{\"210\":1}}],[\"在\",{\"1\":{\"192\":1,\"263\":1}}],[\"在很长时间里\",{\"1\":{\"182\":1}}],[\"在打开西游记之前\",{\"1\":{\"147\":1}}],[\"在广度优先算法中\",{\"1\":{\"112\":1}}],[\"在四通八达的北京\",{\"1\":{\"112\":1}}],[\"在遍历子节点的兄弟节点\",{\"1\":{\"110\":1}}],[\"在所有连接的可选值只保留代价最小的边\",{\"1\":{\"100\":1}}],[\"在描述图时\",{\"1\":{\"98\":1}}],[\"在任意的html元素中使用contenteditable=\",{\"1\":{\"91\":1}}],[\"在组件销毁时一起销毁监听事件不失为一种良好的编程习惯\",{\"0\":{\"359\":1}}],[\"在组件销毁后执行\",{\"1\":{\"80\":1}}],[\"在组件的数据更新后执行\",{\"1\":{\"80\":1}}],[\"在组件的数据更新前执行\",{\"1\":{\"80\":1}}],[\"在组件挂载到\",{\"1\":{\"80\":1}}],[\"在运行时\",{\"1\":{\"53\":1}}],[\"在运行时完成编译结果的渲染\",{\"1\":{\"50\":1}}],[\"在运行时阶段\",{\"1\":{\"29\":1}}],[\"在宿主环境中边编译边执行\",{\"1\":{\"49\":1}}],[\"在客户端可能多次渲染\",{\"1\":{\"39\":1}}],[\"在options设置equals为false时不管何时都是响应式\",{\"1\":{\"7\":1}}],[\"r\",{\"0\":{\"344\":1}}],[\"raetable\",{\"1\":{\"408\":2}}],[\"radius\",{\"1\":{\"312\":1,\"314\":1}}],[\"rawuserplugins\",{\"1\":{\"303\":2}}],[\"random\",{\"1\":{\"233\":1,\"235\":1,\"248\":1}}],[\"range\",{\"1\":{\"92\":1}}],[\"righttoleft>\",{\"1\":{\"225\":1,\"227\":1}}],[\"right\",{\"1\":{\"225\":1,\"227\":1,\"228\":1,\"389\":2}}],[\"rich\",{\"1\":{\"91\":1}}],[\"rotate\",{\"1\":{\"312\":2,\"314\":2}}],[\"rollup\",{\"0\":{\"289\":1,\"302\":1},\"1\":{\"289\":2,\"301\":1,\"302\":4,\"303\":5}}],[\"rollupoptions\",{\"1\":{\"241\":1,\"303\":4}}],[\"row\",{\"1\":{\"287\":3}}],[\"rows\",{\"1\":{\"287\":1}}],[\"roadmap\",{\"1\":{\"173\":2}}],[\"root的适用性是最好的\",{\"1\":{\"353\":1}}],[\"root\",{\"1\":{\"271\":3,\"296\":6}}],[\"rootfiber\",{\"0\":{\"262\":1}}],[\"root相连通\",{\"1\":{\"140\":1}}],[\"roots作为起始对象\",{\"1\":{\"140\":1}}],[\"runners\",{\"1\":{\"415\":1}}],[\"run\",{\"1\":{\"27\":1,\"143\":1,\"303\":1,\"370\":1,\"408\":1}}],[\"repoid\",{\"1\":{\"416\":1}}],[\"repo\",{\"1\":{\"416\":1}}],[\"repository\",{\"1\":{\"415\":1}}],[\"replace\",{\"1\":{\"287\":1,\"306\":1}}],[\"replacement\",{\"1\":{\"240\":1}}],[\"reject\",{\"1\":{\"323\":2,\"324\":2,\"325\":2}}],[\"result\",{\"1\":{\"302\":3,\"323\":3,\"324\":3,\"325\":3}}],[\"resolveconfig\",{\"1\":{\"303\":2}}],[\"resolve\",{\"1\":{\"240\":1,\"303\":1,\"305\":3,\"323\":4,\"324\":4,\"325\":4}}],[\"rev\",{\"1\":{\"296\":2}}],[\"reversed>\",{\"1\":{\"89\":1}}],[\"reversed\",{\"1\":{\"89\":1}}],[\"removeitem\",{\"1\":{\"333\":2}}],[\"removechild\",{\"1\":{\"313\":2,\"314\":1}}],[\"removeconsole\",{\"1\":{\"284\":1}}],[\"removeline\",{\"1\":{\"286\":1,\"287\":1}}],[\"remove\",{\"0\":{\"289\":1,\"290\":1},\"1\":{\"284\":1,\"289\":2,\"290\":2,\"313\":1,\"314\":1,\"408\":1}}],[\"removeeventlistener\",{\"1\":{\"79\":1,\"318\":2,\"319\":1}}],[\"ref属性作为组件属性时\",{\"1\":{\"347\":1}}],[\"refname访问\",{\"1\":{\"347\":1}}],[\"refs\",{\"1\":{\"347\":1}}],[\"refs需要使用ref属性在子组件上设置标识\",{\"1\":{\"347\":1}}],[\"refcleanup\",{\"1\":{\"259\":1}}],[\"ref=\",{\"1\":{\"252\":1,\"253\":1,\"278\":1,\"347\":2}}],[\"ref\",{\"1\":{\"208\":1,\"249\":2,\"253\":2,\"259\":1,\"278\":7,\"313\":1,\"314\":2,\"318\":3,\"319\":1,\"334\":2,\"337\":2,\"374\":1,\"377\":1}}],[\"re\",{\"0\":{\"344\":1},\"1\":{\"201\":1}}],[\"reco\",{\"0\":{\"403\":1,\"404\":1},\"1\":{\"400\":1,\"405\":1,\"417\":1}}],[\"recompose\",{\"1\":{\"177\":1}}],[\"receiver\",{\"1\":{\"79\":1,\"153\":2,\"154\":10}}],[\"redux\",{\"1\":{\"182\":4,\"184\":1,\"192\":1}}],[\"reducer\",{\"1\":{\"251\":2}}],[\"reduce\",{\"1\":{\"8\":2}}],[\"red\",{\"1\":{\"90\":1}}],[\"react系列\",{\"1\":{\"409\":1,\"411\":1}}],[\"reactive\",{\"1\":{\"323\":1,\"324\":1,\"325\":2,\"375\":1}}],[\"reactive<fetch<t>>\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"reactive有了\",{\"1\":{\"37\":1}}],[\"react为不同的节点类型构建了不同的fiber结构和更新机制\",{\"1\":{\"273\":1}}],[\"react还在内存中维护了一棵fiber\",{\"1\":{\"272\":1}}],[\"react还将一些优化的任务交给了开发者\",{\"1\":{\"218\":1}}],[\"react会为不同类型的fiber\",{\"1\":{\"271\":1}}],[\"react每次将更新的内容渲染在页面之后\",{\"1\":{\"271\":1}}],[\"react每次当组件状态发生改变时\",{\"1\":{\"234\":1}}],[\"reactdom\",{\"1\":{\"271\":1}}],[\"react允许你创建最多个hostrootfiber\",{\"1\":{\"261\":1}}],[\"react元素可以是<div>hello\",{\"1\":{\"259\":1}}],[\"react进入了fiber架构时代\",{\"1\":{\"258\":1}}],[\"react被重新设计为可以中断的更新ui\",{\"1\":{\"216\":1}}],[\"react在运行时解析vnode\",{\"1\":{\"272\":1}}],[\"react在运行时阶段\",{\"1\":{\"215\":1}}],[\"react在拿到编译之后的vnode\",{\"1\":{\"216\":1}}],[\"react性能\",{\"0\":{\"215\":1}}],[\"react都会从应用根节点重新加载整个应用\",{\"1\":{\"209\":1}}],[\"react经过编译之后返回的是createelement函数\",{\"1\":{\"209\":1}}],[\"react技术揭秘\",{\"1\":{\"206\":1}}],[\"react技巧\",{\"0\":{\"172\":1}}],[\"reactl\",{\"1\":{\"186\":1}}],[\"react状态管理库\",{\"0\":{\"180\":1}}],[\"react成员开发的工具库\",{\"1\":{\"177\":1}}],[\"react工具库\",{\"0\":{\"175\":1}}],[\"react+typescript备忘录\",{\"0\":{\"174\":1}}],[\"react开发路线图\",{\"0\":{\"173\":1}}],[\"react\",{\"0\":{\"176\":1,\"209\":1,\"422\":1},\"1\":{\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"176\":2,\"177\":2,\"182\":9,\"183\":2,\"186\":5,\"189\":1,\"192\":7,\"197\":1,\"208\":2,\"209\":1,\"233\":1,\"235\":1,\"240\":2,\"247\":2,\"248\":1,\"249\":1,\"263\":3,\"271\":1,\"278\":2,\"279\":4,\"296\":6,\"408\":1,\"409\":4,\"411\":2,\"412\":1},\"2\":{\"188\":1,\"194\":1,\"205\":1,\"220\":1,\"230\":1,\"238\":1,\"245\":1,\"255\":1,\"267\":1,\"276\":1,\"281\":1}}],[\"react设计原理\",{\"0\":{\"206\":1,\"256\":1,\"268\":1},\"1\":{\"196\":1,\"232\":2,\"257\":1,\"269\":1,\"274\":5,\"328\":2}}],[\"react设计\",{\"0\":{\"171\":1}}],[\"reactjs\",{\"0\":{\"170\":1},\"1\":{\"170\":1}}],[\"react学习库\",{\"0\":{\"169\":1}}],[\"react将很多工作放在了运行时阶段\",{\"1\":{\"51\":1}}],[\"react可以做的优化有限\",{\"1\":{\"51\":1}}],[\"react采用jsx方案编译\",{\"1\":{\"51\":1}}],[\"readme\",{\"1\":{\"408\":1,\"409\":3}}],[\"ready立马执行\",{\"1\":{\"41\":1}}],[\"ready\",{\"1\":{\"41\":2,\"42\":1}}],[\"read\",{\"1\":{\"27\":2}}],[\"readsignal\",{\"1\":{\"10\":2,\"15\":2}}],[\"reead是个方法\",{\"1\":{\"27\":1}}],[\"return\",{\"1\":{\"8\":1,\"10\":4,\"13\":1,\"15\":4,\"18\":1,\"20\":1,\"26\":2,\"27\":2,\"28\":3,\"29\":1,\"35\":1,\"36\":2,\"37\":1,\"38\":2,\"40\":1,\"41\":1,\"79\":1,\"112\":1,\"159\":3,\"161\":4,\"162\":2,\"164\":2,\"176\":1,\"182\":5,\"183\":2,\"191\":2,\"192\":2,\"197\":2,\"201\":3,\"202\":3,\"209\":1,\"210\":1,\"211\":2,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"233\":2,\"235\":3,\"247\":3,\"248\":1,\"249\":1,\"250\":1,\"251\":3,\"252\":1,\"253\":1,\"259\":2,\"271\":3,\"278\":3,\"279\":4,\"284\":2,\"286\":1,\"287\":3,\"296\":4,\"302\":1,\"305\":2,\"306\":2,\"313\":1,\"314\":1,\"318\":3,\"319\":2,\"323\":1,\"324\":1,\"325\":1,\"332\":2,\"333\":1,\"334\":1,\"343\":1,\"347\":3,\"349\":1,\"353\":1,\"354\":1,\"355\":1,\"365\":1}}],[\"rendervnode\",{\"1\":{\"313\":2,\"314\":2}}],[\"renderloading\",{\"1\":{\"313\":5,\"314\":3}}],[\"render函数\",{\"1\":{\"311\":1}}],[\"render函数的返回值是本次更新的vnode\",{\"1\":{\"210\":1}}],[\"render阶段又可以分为三个小阶段\",{\"1\":{\"272\":1}}],[\"render相关\",{\"1\":{\"259\":1}}],[\"render方法如下\",{\"1\":{\"29\":1}}],[\"render\",{\"1\":{\"8\":2,\"13\":2,\"18\":2,\"26\":2,\"28\":2,\"29\":1,\"39\":1,\"210\":2,\"271\":2,\"313\":3,\"314\":3}}],[\"和type类似的属性\",{\"1\":{\"259\":1}}],[\"和to\",{\"1\":{\"140\":1}}],[\"和styled\",{\"0\":{\"223\":1}}],[\"和简单易用的特性\",{\"1\":{\"185\":1}}],[\"和我上篇的分享不谋而合了\",{\"1\":{\"176\":1}}],[\"和notify\",{\"1\":{\"143\":1}}],[\"和红宝书一起买的\",{\"1\":{\"121\":1}}],[\"和预编译\",{\"1\":{\"49\":1}}],[\"和根节点一起作为render方法的参数\",{\"1\":{\"28\":1}}],[\"和react不同的是\",{\"1\":{\"27\":1}}],[\"和react类似的hook写法\",{\"1\":{\"26\":1}}],[\"和\",{\"0\":{\"344\":2},\"1\":{\"27\":1,\"62\":1,\"82\":2,\"192\":2,\"313\":1}}],[\"熟悉吧\",{\"1\":{\"26\":1}}],[\"一款开箱即用的antd表格组件库\",{\"1\":{\"408\":1}}],[\"一些类型检查增强的功能\",{\"0\":{\"378\":1}}],[\"一般这种方式每个都会经历三个阶段\",{\"1\":{\"358\":1}}],[\"一般通过调用者执行客户端想要做的事情\",{\"1\":{\"153\":1}}],[\"一直显示mmdjj\",{\"1\":{\"354\":1}}],[\"一直被我珍藏至今\",{\"1\":{\"117\":1}}],[\"一大波僵尸来袭\",{\"1\":{\"312\":1,\"313\":1,\"314\":1}}],[\"一方面\",{\"1\":{\"216\":1}}],[\"一本完全免费的介绍react设计的电子书\",{\"1\":{\"171\":1}}],[\"一半作为空闲区\",{\"1\":{\"139\":1,\"140\":1}}],[\"一半作为使用区\",{\"1\":{\"139\":1,\"140\":1}}],[\"一点也不推荐\",{\"1\":{\"119\":1}}],[\"一路走来\",{\"1\":{\"116\":1}}],[\"一\",{\"0\":{\"59\":1,\"125\":1,\"256\":1,\"342\":1,\"385\":1},\"1\":{\"186\":1,\"232\":1,\"269\":1,\"274\":1,\"328\":1}}],[\"一样的jsx模板语法\",{\"1\":{\"26\":1}}],[\"一个缺点\",{\"0\":{\"354\":1}}],[\"一个登陆页面就这么多log\",{\"1\":{\"283\":1}}],[\"一个简单的例子如下\",{\"1\":{\"182\":1}}],[\"一个简单的计数器功能\",{\"1\":{\"34\":1}}],[\"一个运行状态的线程完成任务或者其他终止条件发生时\",{\"1\":{\"143\":1}}],[\"一个线程被创建后成为初始\",{\"1\":{\"143\":1}}],[\"一个非const声明的变量可以保存多种类型的值\",{\"1\":{\"129\":1}}],[\"一个接一个的框架啥时候是个头啊\",{\"1\":{\"24\":1}}],[\"一个例子如下\",{\"1\":{\"18\":1}}],[\"一个较为完整的关系如下\",{\"1\":{\"14\":1}}],[\"它也和props一样可以设置默认值\",{\"1\":{\"364\":1}}],[\"它也是官方首推在不使用vuex时隔代组件通信方式\",{\"1\":{\"363\":1}}],[\"它只适合通用化\",{\"1\":{\"354\":1}}],[\"它表示一个包含\",{\"1\":{\"311\":1}}],[\"它有个current属性用于指向渲染在页面中的fiber\",{\"1\":{\"272\":1}}],[\"它和hootrootfiber实例rootfiber是一一对应关系\",{\"1\":{\"265\":1}}],[\"它和marked一样\",{\"1\":{\"109\":1}}],[\"它一般是一个\",{\"1\":{\"263\":1}}],[\"它保存着应用的状态信息和组件信息\",{\"1\":{\"263\":1}}],[\"它保存了基本的react元素信息\",{\"1\":{\"259\":1}}],[\"它包含整棵组件树的信息\",{\"1\":{\"261\":1}}],[\"它包含了许多属性\",{\"1\":{\"259\":1}}],[\"它提供了调度时的一些依据\",{\"1\":{\"259\":1}}],[\"它因为组件渲染的时候不可中断的特点\",{\"1\":{\"217\":1}}],[\"它无法模拟unmounted生命周期函数\",{\"1\":{\"199\":1}}],[\"它不会像useeffect一样\",{\"1\":{\"199\":1}}],[\"它不会修改底层代码\",{\"1\":{\"164\":1}}],[\"它useeffect和部分功能是等效的\",{\"1\":{\"199\":1}}],[\"它usecallback和是完全等效的\",{\"1\":{\"199\":1}}],[\"它首先介绍了基础的ts开发介绍\",{\"1\":{\"174\":1}}],[\"它仍然是stw的\",{\"1\":{\"139\":1}}],[\"它以每个节点的id为key\",{\"1\":{\"102\":1}}],[\"它通常与input\",{\"1\":{\"92\":1}}],[\"它是使用vue实例的$emit接口建立全局的事件监听机制\",{\"1\":{\"356\":1}}],[\"它是这样的\",{\"1\":{\"349\":1}}],[\"它是html语法扩展\",{\"1\":{\"208\":1}}],[\"它是es语法糖\",{\"1\":{\"208\":1}}],[\"它是通过队列实现的\",{\"1\":{\"110\":1}}],[\"它是\",{\"1\":{\"92\":1}}],[\"它的树状链表结构如下\",{\"1\":{\"271\":1}}],[\"它的数据结构如下\",{\"1\":{\"263\":1}}],[\"它的相关属性如下\",{\"1\":{\"259\":1}}],[\"它的值还可以是hidden=\",{\"1\":{\"88\":1}}],[\"它的内部是使用createsignal实现的\",{\"1\":{\"19\":1}}],[\"它们的关系已经不是父子组件了\",{\"1\":{\"353\":1}}],[\"它们的fiber\",{\"1\":{\"271\":1}}],[\"它们具有同样的链表结构\",{\"1\":{\"273\":1}}],[\"它们都是组织逻辑和ui的关系\",{\"1\":{\"208\":1}}],[\"它们都是用来注册任务的钩子函数\",{\"1\":{\"39\":1}}],[\"它们还有一个特别重要的参数cleanup\",{\"1\":{\"41\":1}}],[\"它天生支持服务端渲染的前端框架\",{\"1\":{\"39\":1}}],[\"它就是usecomputed$\",{\"1\":{\"37\":1}}],[\"它却早已隐入了那灯影里\",{\"1\":{\"29\":1}}],[\"它早已拥有\",{\"1\":{\"29\":1}}],[\"它会让你感觉既熟悉又现代\",{\"1\":{\"26\":1}}],[\"难道这是react被抄袭的最惨的一次吗\",{\"1\":{\"26\":1}}],[\"dra\",{\"1\":{\"405\":2}}],[\"dd\",{\"1\":{\"296\":3}}],[\"duration=\",{\"1\":{\"225\":2,\"226\":2,\"227\":4}}],[\"duration\",{\"1\":{\"222\":1,\"223\":3,\"228\":1}}],[\"d方法\",{\"1\":{\"212\":1}}],[\"dateformat\",{\"1\":{\"296\":4}}],[\"date\",{\"1\":{\"296\":2,\"408\":1}}],[\"dataset\",{\"1\":{\"389\":2}}],[\"datalist>\",{\"1\":{\"92\":3}}],[\"datalist\",{\"1\":{\"92\":2}}],[\"data\",{\"1\":{\"28\":1,\"36\":6,\"38\":5,\"160\":5,\"161\":10,\"162\":6,\"211\":2,\"247\":2,\"279\":2,\"323\":12,\"324\":12,\"325\":12,\"343\":1,\"347\":3,\"349\":1,\"353\":1,\"354\":1,\"355\":1,\"365\":1}}],[\"dark\",{\"0\":{\"168\":1},\"1\":{\"318\":4}}],[\"d\",{\"1\":{\"131\":1,\"211\":1,\"240\":1,\"407\":1}}],[\"dfs\",{\"1\":{\"108\":1,\"109\":4,\"111\":7}}],[\"down33\",{\"1\":{\"338\":1}}],[\"done\",{\"1\":{\"177\":1,\"389\":2}}],[\"dog\",{\"1\":{\"135\":6}}],[\"double类型\",{\"1\":{\"131\":1}}],[\"dom\",{\"1\":{\"80\":1,\"82\":2,\"263\":1,\"296\":7,\"311\":5,\"312\":1}}],[\"docs\",{\"1\":{\"408\":1}}],[\"doctype\",{\"1\":{\"15\":1}}],[\"document\",{\"1\":{\"8\":1,\"13\":1,\"18\":1,\"26\":1,\"28\":1,\"29\":1,\"41\":3,\"42\":1,\"271\":1,\"296\":6,\"311\":1}}],[\"debounce\",{\"1\":{\"319\":2}}],[\"desc\",{\"1\":{\"408\":2}}],[\"description\",{\"1\":{\"296\":10}}],[\"destroy\",{\"1\":{\"191\":3}}],[\"destroyed\",{\"1\":{\"80\":1}}],[\"deploy\",{\"1\":{\"415\":1}}],[\"dependencies\",{\"1\":{\"259\":1,\"278\":1,\"415\":1}}],[\"deps\",{\"1\":{\"199\":1,\"201\":6,\"202\":6}}],[\"delay=\",{\"1\":{\"225\":2,\"226\":2,\"227\":4}}],[\"delay\",{\"1\":{\"222\":1,\"223\":7,\"228\":2,\"319\":2,\"389\":2}}],[\"deletions\",{\"1\":{\"259\":2}}],[\"deleteoriginfile\",{\"1\":{\"241\":1}}],[\"delete元素div的操作\",{\"1\":{\"212\":1}}],[\"delete\",{\"1\":{\"191\":1}}],[\"delegateevents\",{\"1\":{\"28\":1}}],[\"detaching\",{\"1\":{\"211\":2}}],[\"detach\",{\"1\":{\"211\":2}}],[\"detail\",{\"1\":{\"79\":1}}],[\"dev\",{\"1\":{\"241\":1,\"296\":2,\"301\":2,\"370\":1,\"371\":1,\"408\":1}}],[\"devtools\",{\"1\":{\"184\":1}}],[\"developer\",{\"1\":{\"173\":1}}],[\"declare\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"decrement\",{\"1\":{\"182\":6,\"183\":4,\"251\":2}}],[\"decorater\",{\"1\":{\"164\":8}}],[\"deferredquery\",{\"1\":{\"250\":2}}],[\"deflateraw\",{\"1\":{\"241\":1}}],[\"deflate\",{\"1\":{\"241\":1}}],[\"defineslots<\",{\"1\":{\"380\":1}}],[\"defineslots\",{\"0\":{\"380\":1}}],[\"defineemits<\",{\"1\":{\"376\":1}}],[\"defineemits\",{\"0\":{\"376\":1}}],[\"defineprops<\",{\"1\":{\"379\":1}}],[\"defineprops<command\",{\"1\":{\"374\":1,\"375\":1}}],[\"defineprops\",{\"0\":{\"374\":1},\"1\":{\"374\":1}}],[\"defineproperty\",{\"1\":{\"136\":1,\"160\":2,\"161\":2,\"162\":1}}],[\"definemodel<string>\",{\"1\":{\"377\":1}}],[\"definemodel\",{\"0\":{\"377\":1},\"1\":{\"371\":1}}],[\"defineconfig\",{\"1\":{\"240\":1,\"241\":1,\"296\":4,\"371\":2}}],[\"defined\",{\"1\":{\"201\":1}}],[\"defaultoption\",{\"1\":{\"313\":2,\"314\":3}}],[\"default\",{\"1\":{\"177\":1,\"182\":2,\"192\":2,\"197\":1,\"211\":1,\"233\":1,\"235\":1,\"240\":1,\"241\":1,\"250\":1,\"251\":1,\"278\":2,\"296\":3,\"305\":1,\"306\":1,\"314\":1,\"332\":1,\"343\":2,\"345\":1,\"346\":1,\"347\":3,\"349\":2,\"350\":2,\"353\":3,\"354\":2,\"355\":2,\"357\":1,\"358\":3,\"364\":2,\"371\":1,\"380\":1,\"409\":3,\"411\":1,\"412\":1}}],[\"demo\",{\"1\":{\"177\":2,\"370\":2}}],[\"deepsweet\",{\"1\":{\"177\":1}}],[\"digest\",{\"1\":{\"306\":1}}],[\"discussions\",{\"1\":{\"416\":1}}],[\"disable\",{\"1\":{\"241\":1}}],[\"dist\",{\"1\":{\"240\":1,\"415\":1}}],[\"displaydemo>\",{\"1\":{\"176\":1}}],[\"display\",{\"0\":{\"88\":1},\"1\":{\"407\":2}}],[\"displaycount\",{\"1\":{\"78\":1}}],[\"dispatch机制和事件系统🎉\",{\"1\":{\"274\":1}}],[\"dispatcher\",{\"1\":{\"182\":1}}],[\"dispatch\",{\"1\":{\"79\":2,\"251\":3}}],[\"dispose\",{\"1\":{\"29\":2,\"211\":2}}],[\"disposer\",{\"1\":{\"29\":3}}],[\"directive\",{\"1\":{\"314\":1}}],[\"directive<htmlelement\",{\"1\":{\"313\":2,\"314\":1}}],[\"direction\",{\"1\":{\"222\":1}}],[\"dirty\",{\"1\":{\"28\":2,\"211\":2}}],[\"div<animationprops>`\",{\"1\":{\"223\":1,\"228\":1}}],[\"div`\",{\"1\":{\"223\":1}}],[\"div\",{\"1\":{\"209\":1,\"211\":7,\"259\":1,\"311\":4,\"312\":1,\"314\":1}}],[\"div>基本html元素\",{\"1\":{\"259\":1}}],[\"div>`\",{\"1\":{\"28\":1}}],[\"div>\",{\"1\":{\"26\":1,\"35\":1,\"40\":1,\"41\":1,\"68\":1,\"69\":1,\"88\":1,\"91\":1,\"182\":2,\"183\":2,\"197\":1,\"208\":3,\"233\":2,\"235\":3,\"261\":3,\"278\":1,\"279\":2,\"312\":2,\"313\":3,\"314\":3,\"325\":1,\"337\":1,\"343\":2,\"347\":2,\"349\":3,\"350\":3,\"354\":1,\"355\":1,\"365\":1,\"374\":1}}],[\"定义接口并暴露出去\",{\"1\":{\"374\":1}}],[\"定义请求回调\",{\"1\":{\"323\":1}}],[\"定义基础的数据格式\",{\"1\":{\"323\":1}}],[\"定义具体的数据返回值签名\",{\"1\":{\"323\":1}}],[\"定义一个值的引用\",{\"1\":{\"252\":1}}],[\"定义一个从底往上进入的动画\",{\"1\":{\"223\":1}}],[\"定义边\",{\"0\":{\"102\":1}}],[\"定义变量\",{\"1\":{\"26\":1,\"27\":1,\"28\":1}}],[\"定义setter\",{\"1\":{\"10\":1,\"15\":1}}],[\"还请在评论中告诉我\",{\"1\":{\"417\":1}}],[\"还请见谅啊\",{\"1\":{\"154\":1,\"155\":1}}],[\"还请见谅\",{\"1\":{\"4\":1}}],[\"还不错\",{\"1\":{\"396\":1}}],[\"还在测试阶段\",{\"1\":{\"400\":1}}],[\"还在内存workinprogress中时\",{\"1\":{\"272\":1}}],[\"还在状态管理的功能上提供了中间件功能\",{\"1\":{\"184\":1}}],[\"还需要将项目默认打包默认目录从\",{\"1\":{\"240\":1}}],[\"还需要将动画的延时时间做下处理\",{\"1\":{\"223\":1}}],[\"还可以尝试下其余的动画属性\",{\"1\":{\"228\":1}}],[\"还可以这样用\",{\"1\":{\"186\":1}}],[\"还是十分推荐的\",{\"1\":{\"173\":1}}],[\"还是上面的例子\",{\"1\":{\"161\":1}}],[\"还是彩色图片\",{\"1\":{\"119\":1}}],[\"还是编译时🚀\",{\"0\":{\"46\":1}}],[\"还有一个被大家诟病的就是每个事件都必需起一个独一无二的名字\",{\"1\":{\"360\":1}}],[\"还有一个重要的配置项\",{\"1\":{\"41\":1}}],[\"还有fargement\",{\"1\":{\"271\":1}}],[\"还有usestate\",{\"1\":{\"218\":1}}],[\"还有完没完了\",{\"1\":{\"24\":1}}],[\"经过一番深入交流才知道\",{\"1\":{\"24\":1}}],[\"当设置structure时\",{\"1\":{\"412\":1}}],[\"当前源\",{\"1\":{\"407\":1}}],[\"当对象中的数据改变时\",{\"1\":{\"355\":1}}],[\"当对应的值发生变化时\",{\"1\":{\"184\":1}}],[\"当参数发生变化时\",{\"1\":{\"325\":1}}],[\"当我使用\",{\"1\":{\"312\":1}}],[\"当将vnode渲染在浏览器时\",{\"1\":{\"272\":1}}],[\"当发生变更时\",{\"1\":{\"272\":1}}],[\"当发布者发生变化时\",{\"1\":{\"161\":1}}],[\"当组件完成更新后的回调函数\",{\"1\":{\"263\":1}}],[\"当组件的上下文发生变化时\",{\"1\":{\"263\":1}}],[\"当更新完成后\",{\"1\":{\"263\":1}}],[\"当变量依赖一个可能会变的值\",{\"1\":{\"236\":1}}],[\"当动画完成时\",{\"1\":{\"222\":1}}],[\"当数据变化\",{\"1\":{\"214\":1}}],[\"当count发生变化时使用触发该事件\",{\"1\":{\"376\":1}}],[\"当count发生变化时\",{\"1\":{\"208\":1}}],[\"当createeffect依赖项发生改变时\",{\"1\":{\"14\":1}}],[\"当然也可以使用extends关键字继承其他属性\",{\"1\":{\"379\":1}}],[\"当然不管是不是在多个组件监听\",{\"0\":{\"359\":1}}],[\"当然你也可以直接使用组件库的\",{\"1\":{\"312\":1}}],[\"当然\",{\"1\":{\"184\":1,\"228\":1,\"394\":1}}],[\"当然有啊\",{\"1\":{\"36\":1}}],[\"当\",{\"1\":{\"183\":1,\"301\":1}}],[\"当data的age属性变化\",{\"1\":{\"160\":1}}],[\"当data的name属性变化\",{\"1\":{\"160\":1}}],[\"当data对象的name或者age属性发生变化时\",{\"1\":{\"160\":1}}],[\"当目标发生变化时\",{\"1\":{\"160\":1}}],[\"当一个线程对一个变量进行写操作时\",{\"1\":{\"143\":1}}],[\"当一小段增量标记完\",{\"1\":{\"139\":1}}],[\"当线程失去系统分配的资源\",{\"1\":{\"143\":1}}],[\"当线程拿到系统分配的资源会调用run\",{\"1\":{\"143\":1}}],[\"当调用start\",{\"1\":{\"143\":1}}],[\"当eden区没有足够空间进行分配时\",{\"1\":{\"140\":1}}],[\"当时经济实力有限\",{\"1\":{\"117\":1}}],[\"当时我心想\",{\"1\":{\"24\":1}}],[\"当输入的值为非法的内容时\",{\"1\":{\"90\":1}}],[\"当使用配置时效果如下\",{\"1\":{\"296\":1}}],[\"当使用区内存不足时\",{\"1\":{\"140\":1}}],[\"当使用区的剩余容量不足一存放新对象时\",{\"1\":{\"139\":1}}],[\"当使用\",{\"1\":{\"90\":1}}],[\"当你需要隐藏一个元素时\",{\"1\":{\"88\":1}}],[\"当你揭开它神秘的面纱\",{\"1\":{\"26\":1}}],[\"当订阅的参数发生改变时\",{\"1\":{\"41\":1}}],[\"本质就是实例化一个空vue实例\",{\"1\":{\"357\":1}}],[\"本质也是实现了runable接口\",{\"1\":{\"143\":1}}],[\"本文需要了解的知识点如下\",{\"1\":{\"385\":1}}],[\"本文重点介绍了类组件和函数组件的一些字段区别\",{\"1\":{\"273\":1}}],[\"本文重点\",{\"1\":{\"270\":1}}],[\"本文到此就结束了\",{\"1\":{\"144\":1}}],[\"本文主要以java为例\",{\"1\":{\"125\":1}}],[\"本文为原创文章\",{\"1\":{\"125\":1}}],[\"本系列未来的计划\",{\"1\":{\"21\":1}}],[\"本篇只讨论最原始的memo\",{\"1\":{\"17\":1}}],[\"最新文章发布在公众号\",{\"1\":{\"368\":1,\"381\":1}}],[\"最大的痛点是需要手动创建\",{\"1\":{\"311\":1}}],[\"最大的缺点就是代码里的错误只能在运行时抛出异常\",{\"1\":{\"48\":1}}],[\"最先想到就是\",{\"1\":{\"182\":1}}],[\"最短路径\",{\"0\":{\"112\":1}}],[\"最常见的是深度优先\",{\"1\":{\"108\":1}}],[\"最小生成树\",{\"0\":{\"98\":1}}],[\"最近忙完工作\",{\"1\":{\"385\":1}}],[\"最近公众号有🎁\",{\"1\":{\"328\":1}}],[\"最近想体验下自定义指令功能\",{\"1\":{\"311\":1}}],[\"最近群里有抽奖\",{\"1\":{\"300\":1}}],[\"最近三次commit内容\",{\"1\":{\"296\":1}}],[\"最近一次渲染的结果\",{\"1\":{\"263\":1}}],[\"最近在研究框架\",{\"1\":{\"328\":1}}],[\"最近在研究react的源码\",{\"1\":{\"195\":1}}],[\"最近在努力研究react源码\",{\"1\":{\"257\":1}}],[\"最近会送五本书\",{\"1\":{\"116\":1}}],[\"最近关注有🎁\",{\"1\":{\"46\":1,\"195\":1,\"231\":1,\"257\":1,\"269\":1,\"368\":1}}],[\"最近关注有抽五本书送给大家\",{\"1\":{\"32\":1}}],[\"最近我又又双学习了一个新框架\",{\"1\":{\"32\":1}}],[\"最近刚刚整明白点svelte感觉整个世界都清净了\",{\"1\":{\"24\":1}}],[\"最近有🎁\",{\"1\":{\"3\":1,\"21\":1}}],[\"最后一次提交commit的id\",{\"1\":{\"296\":1}}],[\"最后一次提交commitid\",{\"1\":{\"296\":1}}],[\"最后序列化为字符串返回即可\",{\"1\":{\"296\":1}}],[\"最后附上我的插件和loader\",{\"1\":{\"288\":1}}],[\"最后再给我来一个沙沙\",{\"1\":{\"154\":1}}],[\"最后你不禁感叹\",{\"1\":{\"29\":1}}],[\"最后\",{\"0\":{\"21\":1,\"274\":1,\"297\":1,\"314\":1,\"417\":1},\"1\":{\"54\":1}}],[\"md中配置\",{\"1\":{\"408\":1}}],[\"md\",{\"1\":{\"408\":1,\"409\":4}}],[\"md即为博客或者文档的首页\",{\"1\":{\"408\":1}}],[\"md5\",{\"1\":{\"306\":1}}],[\"mmdjj\",{\"1\":{\"345\":2,\"347\":1,\"349\":2,\"354\":1,\"355\":1,\"365\":2}}],[\"mmdctjj\",{\"1\":{\"0\":1,\"37\":1,\"43\":1,\"160\":1,\"161\":4,\"162\":3,\"271\":2,\"286\":1,\"289\":1,\"290\":1,\"297\":1,\"300\":1,\"368\":1,\"381\":1,\"399\":2,\"403\":1,\"408\":2,\"415\":1,\"416\":1}}],[\"mm\",{\"1\":{\"296\":6}}],[\"mutablereadlanes\",{\"1\":{\"263\":1}}],[\"msg=\",{\"1\":{\"374\":1}}],[\"msg\",{\"1\":{\"312\":3,\"313\":3,\"314\":6,\"323\":1,\"324\":1,\"325\":1,\"353\":4,\"358\":6,\"374\":2,\"380\":1}}],[\"ms\",{\"1\":{\"223\":5,\"228\":2}}],[\"m方法\",{\"1\":{\"212\":1}}],[\"m\",{\"1\":{\"211\":1,\"405\":2}}],[\"mit\",{\"1\":{\"407\":1}}],[\"mitt\",{\"1\":{\"330\":1}}],[\"missing\",{\"1\":{\"263\":1}}],[\"mixed\",{\"1\":{\"259\":1}}],[\"mini\",{\"1\":{\"343\":1}}],[\"min\",{\"1\":{\"241\":1}}],[\"min=\",{\"1\":{\"92\":1}}],[\"middleware\",{\"1\":{\"184\":5}}],[\"man\",{\"1\":{\"347\":1,\"349\":2,\"350\":2}}],[\"match\",{\"1\":{\"318\":3}}],[\"matches\",{\"1\":{\"318\":5}}],[\"matchmedia\",{\"1\":{\"318\":2}}],[\"math\",{\"1\":{\"233\":1,\"235\":1}}],[\"margin\",{\"1\":{\"312\":1,\"314\":1,\"387\":1,\"388\":1}}],[\"markdown\",{\"1\":{\"399\":2,\"408\":1}}],[\"mark\",{\"1\":{\"295\":1}}],[\"marked\",{\"1\":{\"104\":1,\"105\":1,\"110\":3,\"112\":4}}],[\"master\",{\"1\":{\"173\":1}}],[\"map\",{\"1\":{\"154\":1,\"160\":1,\"161\":1,\"162\":1,\"163\":2,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"240\":1,\"287\":1,\"296\":1,\"303\":1,\"332\":1,\"333\":1}}],[\"main\",{\"1\":{\"135\":1,\"357\":1}}],[\"main>\",{\"1\":{\"77\":1}}],[\"max=\",{\"1\":{\"92\":1}}],[\"mydirective\",{\"1\":{\"311\":1}}],[\"myplugin\",{\"1\":{\"302\":1}}],[\"mypubsub\",{\"1\":{\"161\":8}}],[\"myinput\",{\"1\":{\"278\":1}}],[\"mysing2\",{\"1\":{\"159\":1}}],[\"mysing1\",{\"1\":{\"159\":1}}],[\"mysingleton2\",{\"1\":{\"159\":1}}],[\"mysingleton1\",{\"1\":{\"159\":1}}],[\"my\",{\"1\":{\"79\":3,\"233\":1,\"235\":1,\"240\":1}}],[\"mycomponent>\",{\"1\":{\"68\":1,\"69\":1}}],[\"mycomponent\",{\"1\":{\"64\":1,\"68\":1,\"69\":1}}],[\"methods\",{\"1\":{\"343\":2,\"358\":1,\"389\":1}}],[\"meta\",{\"1\":{\"295\":1}}],[\"mediaquerylistevent\",{\"1\":{\"318\":2}}],[\"mediatorprops\",{\"1\":{\"332\":2}}],[\"mediator\",{\"1\":{\"162\":4,\"279\":3,\"332\":3,\"333\":3,\"334\":3}}],[\"me<\",{\"1\":{\"233\":1,\"235\":2}}],[\"meno\",{\"1\":{\"218\":1}}],[\"message\",{\"1\":{\"79\":2}}],[\"me\",{\"1\":{\"65\":1,\"79\":1}}],[\"memoizedprops\",{\"1\":{\"259\":1,\"271\":1}}],[\"memoizedstate\",{\"1\":{\"201\":3,\"202\":3,\"259\":1}}],[\"memo依然会频繁渲染组件\",{\"1\":{\"236\":1}}],[\"memo和usememo类似\",{\"1\":{\"234\":1}}],[\"memo\",{\"1\":{\"20\":2,\"27\":1,\"235\":2}}],[\"modal\",{\"1\":{\"377\":2}}],[\"model\",{\"1\":{\"377\":1}}],[\"model=\",{\"1\":{\"377\":2}}],[\"modelvalue\",{\"1\":{\"376\":1,\"377\":3}}],[\"mode规定当动画不播放时\",{\"1\":{\"222\":1}}],[\"mode\",{\"1\":{\"222\":1,\"223\":2,\"228\":1,\"259\":3}}],[\"mode🎉\",{\"1\":{\"55\":1,\"234\":1}}],[\"moment日期格式\",{\"1\":{\"296\":1}}],[\"moment\",{\"1\":{\"296\":6}}],[\"mount\",{\"1\":{\"216\":1}}],[\"mountcallback<t>\",{\"1\":{\"202\":1}}],[\"mountworkinprogresshook\",{\"1\":{\"201\":1,\"202\":1}}],[\"mountmemo<t>\",{\"1\":{\"201\":1}}],[\"mounted时执行将创建的div插入\",{\"1\":{\"212\":1}}],[\"mounted\",{\"1\":{\"42\":3,\"80\":1,\"211\":4,\"311\":1,\"313\":4,\"314\":1,\"347\":2,\"350\":2,\"353\":3,\"354\":1,\"355\":1,\"358\":2}}],[\"是一个以\",{\"1\":{\"399\":1}}],[\"是一种对象子类继承的替代方案\",{\"1\":{\"164\":1}}],[\"是否在文章列表中显示\",{\"1\":{\"408\":1}}],[\"是否在控制台中输出压缩结果\",{\"1\":{\"241\":1}}],[\"是否初始化\",{\"1\":{\"407\":1}}],[\"是否需要一个自动部署文档到\",{\"1\":{\"407\":1}}],[\"是否清除源文件\",{\"1\":{\"241\":1}}],[\"是时候放弃\",{\"1\":{\"186\":1}}],[\"是可能造成冲突的\",{\"1\":{\"143\":1}}],[\"是我读过最容易理解的版本了\",{\"1\":{\"120\":1}}],[\"是指每次兄弟节点优先遍历\",{\"1\":{\"110\":1}}],[\"是指每次优先遍历子节点\",{\"1\":{\"109\":1}}],[\"是将基于前端框架的编译时\",{\"1\":{\"48\":1}}],[\"是不是这样更简洁了\",{\"1\":{\"318\":1}}],[\"是不是很低效啊\",{\"1\":{\"215\":1}}],[\"是不是很熟悉啊\",{\"1\":{\"140\":1}}],[\"是不是很熟悉\",{\"1\":{\"26\":1}}],[\"是不是觉得\",{\"1\":{\"27\":1}}],[\"是基于\",{\"1\":{\"182\":1}}],[\"是基于proxy的发布订阅模式的api\",{\"1\":{\"27\":1}}],[\"是基于createcomputation实现的\",{\"1\":{\"19\":1}}],[\"是的\",{\"1\":{\"26\":1,\"35\":1}}],[\"是响应式的\",{\"1\":{\"7\":1}}],[\"21\",{\"1\":{\"400\":1}}],[\"2多用动画属性\",{\"0\":{\"395\":1}}],[\"233\",{\"1\":{\"407\":3}}],[\"23\",{\"1\":{\"354\":1,\"355\":1}}],[\"2023\",{\"1\":{\"408\":1}}],[\"2022\",{\"1\":{\"129\":2,\"130\":4}}],[\"200\",{\"1\":{\"319\":1,\"323\":1,\"324\":1,\"325\":1}}],[\"2000\",{\"1\":{\"313\":1,\"314\":1}}],[\"25px\",{\"1\":{\"312\":1,\"314\":1}}],[\"256\",{\"1\":{\"241\":1}}],[\"2px\",{\"1\":{\"312\":1,\"314\":1}}],[\"24\",{\"1\":{\"233\":1,\"235\":1}}],[\"2kb\",{\"1\":{\"185\":1}}],[\"2k的⭐\",{\"1\":{\"171\":1}}],[\"266\",{\"1\":{\"164\":1}}],[\"22\",{\"1\":{\"163\":2}}],[\"2222\",{\"1\":{\"41\":1}}],[\"2\",{\"0\":{\"61\":1,\"73\":1,\"80\":1,\"83\":1,\"89\":1,\"130\":1,\"213\":1,\"223\":1,\"226\":1,\"344\":1,\"346\":1,\"350\":1,\"354\":1,\"356\":1,\"358\":1,\"365\":1,\"388\":1,\"393\":1,\"394\":1,\"395\":1,\"396\":1,\"404\":1},\"1\":{\"18\":1,\"20\":1,\"26\":1,\"27\":1,\"28\":1,\"92\":1,\"99\":2,\"100\":7,\"107\":6,\"110\":1,\"111\":2,\"113\":2,\"133\":3,\"135\":2,\"163\":4,\"164\":1,\"191\":1,\"225\":1,\"226\":1,\"227\":1,\"228\":1,\"349\":2,\"364\":1,\"389\":1,\"400\":1,\"407\":4,\"409\":1}}],[\"h3>\",{\"1\":{\"343\":1}}],[\"h4>\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"h\",{\"1\":{\"311\":5,\"312\":1,\"313\":2,\"314\":2}}],[\"h函数用法如下\",{\"1\":{\"311\":1}}],[\"h函数\",{\"1\":{\"311\":1}}],[\"hh\",{\"1\":{\"296\":3}}],[\"hydrate\",{\"1\":{\"263\":1}}],[\"h1\",{\"1\":{\"210\":1,\"311\":2}}],[\"h1>\",{\"1\":{\"15\":1,\"61\":1,\"62\":1,\"72\":1,\"73\":1,\"76\":1,\"77\":1,\"78\":2,\"80\":2,\"177\":1,\"313\":3,\"314\":1,\"319\":2,\"323\":2,\"324\":2,\"325\":2,\"374\":1}}],[\"home\",{\"1\":{\"408\":3,\"415\":1}}],[\"hope推荐的方式\",{\"1\":{\"416\":1}}],[\"hope\",{\"0\":{\"402\":1},\"1\":{\"400\":1,\"405\":1,\"407\":6,\"408\":1,\"409\":4,\"411\":1,\"412\":1,\"417\":1}}],[\"hope2\",{\"0\":{\"399\":1}}],[\"hodgkin\",{\"1\":{\"338\":1}}],[\"hootrootfiber\",{\"1\":{\"263\":1}}],[\"hookname\",{\"1\":{\"302\":2}}],[\"hooklists\",{\"1\":{\"302\":3}}],[\"hook组件通信👈\",{\"0\":{\"277\":1}}],[\"hook\",{\"0\":{\"334\":1},\"1\":{\"182\":1,\"201\":5,\"202\":5,\"302\":9,\"336\":1,\"337\":1}}],[\"hooks🎉\",{\"1\":{\"186\":1}}],[\"hooks\",{\"0\":{\"176\":1},\"1\":{\"176\":2,\"186\":1,\"301\":2,\"303\":1,\"323\":1,\"324\":1,\"325\":1}}],[\"hocs\",{\"1\":{\"177\":2}}],[\"hostrootfiber是源码里使用createhostrootfiber创建的fiber根节点\",{\"1\":{\"261\":1}}],[\"hostrootfiber\",{\"0\":{\"261\":1}}],[\"hos\",{\"0\":{\"177\":1}}],[\"highlight\",{\"0\":{\"168\":1}}],[\"hidden>\",{\"1\":{\"88\":1}}],[\"hidden\",{\"1\":{\"88\":2}}],[\"hardcore\",{\"1\":{\"338\":1}}],[\"hash\",{\"1\":{\"306\":2}}],[\"hateonion\",{\"1\":{\"172\":1}}],[\"have\",{\"1\":{\"135\":2}}],[\"handler\",{\"1\":{\"211\":3,\"214\":1}}],[\"handleevent\",{\"1\":{\"79\":3}}],[\"handleclick\",{\"1\":{\"65\":1,\"70\":2,\"79\":2,\"278\":2}}],[\"herofullscreen\",{\"1\":{\"408\":1}}],[\"herotext\",{\"1\":{\"408\":1}}],[\"heroimage\",{\"1\":{\"408\":1}}],[\"hero\",{\"1\":{\"408\":2}}],[\"hex\",{\"1\":{\"306\":1}}],[\"height\",{\"1\":{\"233\":1,\"235\":1,\"249\":2,\"312\":2,\"314\":2,\"387\":2,\"389\":4}}],[\"he\",{\"1\":{\"132\":2}}],[\"head\",{\"1\":{\"296\":2}}],[\"header>\",{\"1\":{\"77\":1}}],[\"header\",{\"1\":{\"77\":1}}],[\"head>\",{\"1\":{\"15\":1}}],[\"hello\",{\"1\":{\"68\":1,\"69\":1,\"79\":1,\"132\":2,\"311\":1,\"353\":2,\"354\":1,\"355\":1,\"374\":1,\"377\":1}}],[\"h2>\",{\"1\":{\"68\":1,\"69\":1,\"77\":1,\"250\":1}}],[\"htmlelement\",{\"1\":{\"313\":4,\"314\":3}}],[\"html文件\",{\"1\":{\"306\":1}}],[\"html5\",{\"1\":{\"92\":1}}],[\"html实用小技巧🚀🚀\",{\"0\":{\"87\":1}}],[\"html\",{\"1\":{\"64\":1,\"296\":4,\"301\":2,\"306\":3,\"408\":1},\"2\":{\"95\":1}}],[\"html>\",{\"1\":{\"15\":2}}],[\"http协议和tcp\",{\"1\":{\"119\":1}}],[\"http\",{\"1\":{\"15\":1,\"93\":1}}],[\"https\",{\"1\":{\"4\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"176\":1,\"177\":1,\"241\":1,\"289\":2,\"290\":2,\"295\":2,\"296\":2,\"297\":2,\"301\":2,\"338\":1,\"371\":1,\"399\":2,\"402\":1,\"403\":1,\"404\":1,\"405\":1,\"408\":3,\"409\":1,\"415\":1,\"416\":1}}],[\"03\",{\"1\":{\"408\":1}}],[\"07\",{\"1\":{\"408\":1}}],[\"0px\",{\"1\":{\"387\":1,\"389\":1}}],[\"0\",{\"0\":{\"404\":1},\"1\":{\"15\":1,\"26\":1,\"27\":1,\"28\":2,\"35\":1,\"36\":2,\"38\":1,\"40\":1,\"41\":1,\"60\":1,\"70\":1,\"73\":2,\"78\":1,\"90\":1,\"112\":1,\"132\":2,\"133\":1,\"143\":1,\"161\":1,\"162\":1,\"164\":1,\"176\":1,\"182\":2,\"184\":1,\"191\":1,\"197\":1,\"201\":1,\"202\":1,\"208\":3,\"209\":1,\"210\":2,\"211\":4,\"222\":1,\"223\":10,\"225\":1,\"226\":1,\"227\":1,\"228\":4,\"233\":1,\"235\":1,\"241\":1,\"247\":1,\"249\":1,\"251\":1,\"259\":2,\"271\":2,\"279\":2,\"286\":1,\"313\":2,\"314\":1,\"332\":1,\"333\":1,\"337\":1,\"374\":1,\"387\":1,\"388\":1,\"389\":9,\"400\":1,\"407\":8}}],[\"xxxx\",{\"1\":{\"416\":2}}],[\"xml+rss\",{\"1\":{\"241\":1}}],[\"xml\",{\"1\":{\"241\":2}}],[\"x\",{\"1\":{\"15\":1}}],[\"8开始\",{\"1\":{\"258\":1}}],[\"8080了\",{\"1\":{\"305\":1}}],[\"8080\",{\"0\":{\"305\":1},\"1\":{\"305\":1}}],[\"80\",{\"1\":{\"223\":1}}],[\"8\",{\"0\":{\"67\":1,\"138\":1},\"1\":{\"15\":1,\"228\":1,\"286\":2,\"296\":4}}],[\"up\",{\"1\":{\"416\":1}}],[\"updata数据的操作\",{\"1\":{\"212\":1}}],[\"updatemsg\",{\"1\":{\"358\":3}}],[\"updatememo<t>\",{\"1\":{\"201\":1}}],[\"updates🎉\",{\"1\":{\"274\":1}}],[\"updatequeue\",{\"1\":{\"259\":1}}],[\"updatecallback<t>\",{\"1\":{\"202\":1}}],[\"updateworkinprogresshook\",{\"1\":{\"201\":1,\"202\":1}}],[\"update会在组件销毁时和unmount一起执行一次\",{\"1\":{\"42\":1}}],[\"update\",{\"1\":{\"42\":1,\"160\":2,\"306\":1,\"313\":2,\"358\":6}}],[\"updated\",{\"1\":{\"42\":1,\"80\":1,\"311\":1,\"313\":1,\"314\":1}}],[\"us\",{\"1\":{\"407\":1}}],[\"useautofetch<unknown\",{\"1\":{\"325\":1}}],[\"useautofetch\",{\"1\":{\"325\":2}}],[\"usefetchfn<unknown>\",{\"1\":{\"324\":1}}],[\"usefetchfn\",{\"1\":{\"324\":2}}],[\"usefetch<unknown\",{\"1\":{\"323\":1}}],[\"usefetch\",{\"1\":{\"323\":3,\"324\":1,\"325\":1}}],[\"usenetwork\",{\"1\":{\"319\":2}}],[\"usetheme\",{\"1\":{\"318\":3}}],[\"usetask$首先在服务端执行一次\",{\"1\":{\"40\":1}}],[\"usetask$\",{\"0\":{\"39\":1,\"40\":1},\"1\":{\"39\":1,\"40\":1}}],[\"useeventlistener\",{\"1\":{\"319\":5}}],[\"useevent\",{\"1\":{\"279\":2}}],[\"useeffect\",{\"1\":{\"183\":4,\"279\":4}}],[\"usegetevent\",{\"1\":{\"279\":3}}],[\"useimperativehandle\",{\"0\":{\"253\":1,\"278\":1},\"1\":{\"253\":1,\"278\":3}}],[\"useid\",{\"0\":{\"248\":1},\"1\":{\"248\":2}}],[\"usedeferredvalue\",{\"0\":{\"250\":1},\"1\":{\"250\":1}}],[\"usedebugvalue\",{\"1\":{\"192\":1}}],[\"uselayouteffect\",{\"0\":{\"249\":1},\"1\":{\"249\":2}}],[\"usexxx\",{\"1\":{\"199\":1}}],[\"usematchmedia\",{\"1\":{\"318\":2}}],[\"usememo都会被重新计算\",{\"1\":{\"234\":1}}],[\"usememo和usecallback主要作用是缓存中间状态\",{\"1\":{\"231\":1}}],[\"usememo在依赖项发生变化时会缓存回调函数的返回值\",{\"1\":{\"202\":1}}],[\"usememo\",{\"0\":{\"201\":1,\"233\":1},\"1\":{\"197\":3,\"218\":1,\"233\":2,\"235\":2}}],[\"usemutablestate\",{\"1\":{\"176\":4}}],[\"useboundstore\",{\"1\":{\"192\":3}}],[\"usecallback等\",{\"1\":{\"218\":1}}],[\"usecallback仅仅缓存函数\",{\"1\":{\"203\":1}}],[\"usecallback和usememo都是缓存中间状态\",{\"1\":{\"203\":1}}],[\"usecallback和usememo的实现十分类似\",{\"1\":{\"202\":1}}],[\"usecallback\",{\"0\":{\"195\":1,\"202\":1,\"235\":1},\"1\":{\"186\":1,\"233\":2,\"235\":3}}],[\"usecountstore\",{\"1\":{\"182\":2,\"183\":4,\"184\":1}}],[\"usecontextprovider\",{\"1\":{\"38\":1}}],[\"usecontext\",{\"0\":{\"38\":1},\"1\":{\"38\":1,\"182\":2}}],[\"usecomputed$\",{\"0\":{\"37\":1},\"1\":{\"37\":1}}],[\"use\",{\"1\":{\"83\":1,\"177\":1,\"192\":3,\"416\":1}}],[\"userplugins\",{\"1\":{\"303\":1}}],[\"usereducer\",{\"0\":{\"251\":1},\"1\":{\"251\":1}}],[\"useref\",{\"0\":{\"252\":1},\"1\":{\"249\":2,\"252\":1,\"253\":1,\"278\":2}}],[\"userinfo\",{\"1\":{\"161\":2}}],[\"username\",{\"1\":{\"161\":1,\"286\":3,\"415\":1}}],[\"user\",{\"1\":{\"62\":1,\"286\":1}}],[\"uses\",{\"1\":{\"415\":2}}],[\"usesetevent\",{\"1\":{\"279\":3}}],[\"usesyncexternalstorewithselector\",{\"1\":{\"192\":1}}],[\"usesyncexternalstoreexports\",{\"1\":{\"192\":1}}],[\"usesyncexternalstore\",{\"0\":{\"247\":1},\"1\":{\"192\":1,\"247\":1}}],[\"usestorage\",{\"0\":{\"334\":1},\"1\":{\"334\":2,\"336\":2}}],[\"usestore<tstate\",{\"1\":{\"192\":1}}],[\"usestore<store>\",{\"1\":{\"36\":1,\"38\":1}}],[\"usestore可以听提供方法\",{\"1\":{\"36\":1}}],[\"usestore\",{\"0\":{\"36\":1},\"1\":{\"36\":1,\"192\":3}}],[\"usestate\",{\"1\":{\"182\":2,\"186\":1,\"197\":2,\"208\":1,\"209\":1,\"233\":2,\"235\":2,\"249\":2,\"250\":1,\"271\":2,\"278\":2,\"279\":4}}],[\"usespecialskill\",{\"1\":{\"154\":2}}],[\"usesignal是针对基本变量的\",{\"1\":{\"36\":1}}],[\"usesignal\",{\"0\":{\"35\":1},\"1\":{\"35\":2,\"40\":1,\"41\":1}}],[\"usevisibletask$\",{\"0\":{\"39\":1,\"41\":1},\"1\":{\"35\":1,\"37\":1,\"39\":1,\"41\":5,\"42\":3}}],[\"u\",{\"1\":{\"379\":2}}],[\"ui延时更新\",{\"1\":{\"250\":1}}],[\"ui跟着变化\",{\"1\":{\"208\":1}}],[\"ui=fn\",{\"1\":{\"208\":1}}],[\"unknown\",{\"1\":{\"324\":5,\"332\":4}}],[\"unwrapref是vue的深层响应式类型的声明\",{\"1\":{\"323\":1}}],[\"unref\",{\"1\":{\"305\":1}}],[\"universal\",{\"1\":{\"301\":1}}],[\"unsubscribe\",{\"1\":{\"191\":2}}],[\"unmounted\",{\"1\":{\"311\":1}}],[\"unmount\",{\"1\":{\"42\":1}}],[\"undefined>\",{\"1\":{\"182\":1}}],[\"undefined\",{\"1\":{\"10\":1,\"15\":1,\"29\":1,\"182\":1,\"201\":2,\"202\":2,\"303\":1,\"323\":2,\"324\":2,\"325\":2,\"333\":3,\"376\":1}}],[\"uuid++\",{\"1\":{\"161\":1,\"332\":1}}],[\"uuid\",{\"1\":{\"38\":1,\"101\":3,\"105\":4,\"107\":2,\"109\":4,\"110\":6,\"112\":13,\"161\":5,\"162\":6,\"248\":2,\"332\":6}}],[\"ua\",{\"1\":{\"15\":1}}],[\"utf\",{\"1\":{\"15\":1,\"286\":2,\"296\":4}}],[\"每点击下页面就会蹦出好几行console\",{\"1\":{\"283\":1}}],[\"每个目录对应一个导航栏目\",{\"1\":{\"409\":1}}],[\"每个复杂的动画其实都是很多简单小动画的拼接\",{\"1\":{\"390\":1}}],[\"每个组件在销毁时连同事件也要销毁\",{\"0\":{\"359\":1}}],[\"每个应用都会有唯一的fiberrootnode实例用来维护整个应用的状态和组件信息\",{\"1\":{\"272\":1}}],[\"每个应用程序只会有一个实例\",{\"1\":{\"263\":1}}],[\"每个fiber结构的alternate都指向了上次的自己\",{\"1\":{\"271\":1}}],[\"每个fibernode\",{\"1\":{\"271\":1}}],[\"每个模块的文件来自于不同的依赖包的子集\",{\"1\":{\"243\":1}}],[\"每个订阅者的唯一标识\",{\"1\":{\"161\":1}}],[\"每执行一小段就继续执行javascript代码\",{\"1\":{\"139\":1}}],[\"每次当我们改变参数时自动发送请求\",{\"1\":{\"325\":1}}],[\"每次上线前端页面需要在html里给定版本信息\",{\"1\":{\"294\":1}}],[\"每次更新\",{\"1\":{\"208\":1}}],[\"每次运行gc时是扫描所有的变量\",{\"1\":{\"138\":1}}],[\"每次触发为gc流程时\",{\"1\":{\"138\":1}}],[\"每次触发gc流程时清除引用计数为零的对象\",{\"1\":{\"138\":1}}],[\"每次触发依赖项listener的更新时\",{\"1\":{\"27\":1}}],[\"每次从边中选择权重最小的边\",{\"1\":{\"99\":1}}],[\"每次任务触发都是先打印last\",{\"1\":{\"41\":1}}],[\"每次新的任务被触发时\",{\"1\":{\"41\":1}}],[\"每次调用write\",{\"1\":{\"29\":1}}],[\"每次write\",{\"1\":{\"27\":1}}],[\"每次写入时执行对应的订阅者\",{\"1\":{\"15\":1}}],[\"每当count变化时\",{\"1\":{\"18\":1}}],[\"每当它依赖的状态发生改变时\",{\"1\":{\"12\":1}}],[\"l2\",{\"1\":{\"286\":1}}],[\"l1\",{\"1\":{\"286\":1}}],[\"l\",{\"1\":{\"247\":2,\"271\":2,\"286\":3}}],[\"lll\",{\"1\":{\"235\":2}}],[\"llo\",{\"1\":{\"132\":2}}],[\"load\",{\"1\":{\"302\":7}}],[\"loader地址\",{\"1\":{\"290\":1}}],[\"loader\",{\"0\":{\"290\":2},\"1\":{\"290\":2,\"408\":2}}],[\"loadingdom\",{\"1\":{\"311\":2}}],[\"loading\",{\"0\":{\"312\":1},\"1\":{\"177\":1,\"311\":1,\"312\":10,\"313\":23,\"314\":20,\"323\":7,\"324\":6,\"325\":6}}],[\"loading=laoding>\",{\"1\":{\"313\":1}}],[\"loading=\",{\"0\":{\"93\":1},\"1\":{\"93\":2,\"313\":2,\"314\":1}}],[\"localstorage\",{\"0\":{\"333\":1,\"336\":1,\"337\":1},\"1\":{\"333\":7,\"337\":1}}],[\"localstroge\",{\"1\":{\"184\":3}}],[\"local\",{\"1\":{\"263\":1}}],[\"lock\",{\"1\":{\"143\":5,\"415\":3}}],[\"long\",{\"1\":{\"131\":1}}],[\"logo\",{\"1\":{\"408\":1}}],[\"log语句\",{\"1\":{\"287\":1}}],[\"login\",{\"1\":{\"62\":1,\"161\":2}}],[\"loggedin\",{\"1\":{\"62\":1}}],[\"log\",{\"1\":{\"13\":1,\"15\":1,\"18\":2,\"20\":1,\"26\":2,\"27\":1,\"28\":2,\"35\":1,\"37\":1,\"40\":1,\"41\":6,\"42\":5,\"72\":2,\"73\":2,\"79\":1,\"80\":8,\"107\":1,\"109\":1,\"110\":2,\"111\":1,\"112\":4,\"129\":1,\"154\":16,\"159\":1,\"160\":1,\"161\":4,\"162\":2,\"163\":6,\"164\":4,\"177\":1,\"183\":3,\"184\":1,\"191\":1,\"197\":1,\"235\":2,\"279\":1,\"286\":1,\"287\":1,\"296\":2,\"318\":1,\"319\":3,\"325\":1,\"336\":1,\"345\":2,\"346\":1,\"347\":1,\"350\":2,\"353\":2,\"354\":1,\"355\":1,\"358\":1,\"364\":1,\"365\":2,\"375\":1,\"376\":2,\"377\":1}}],[\"link代码外链地址\",{\"1\":{\"409\":1}}],[\"link\",{\"1\":{\"408\":2,\"409\":11}}],[\"linear\",{\"1\":{\"312\":1,\"314\":1}}],[\"line\",{\"1\":{\"286\":1}}],[\"line+1\",{\"1\":{\"286\":4}}],[\"liboptions\",{\"1\":{\"303\":1}}],[\"lifecycle\",{\"1\":{\"177\":1}}],[\"listen\",{\"1\":{\"211\":2,\"305\":1}}],[\"listeners\",{\"1\":{\"191\":5,\"247\":5}}],[\"listener\",{\"1\":{\"27\":3,\"191\":5,\"247\":3,\"319\":3}}],[\"list<object>\",{\"1\":{\"133\":1}}],[\"list=\",{\"1\":{\"92\":3}}],[\"list\",{\"1\":{\"92\":1,\"133\":3,\"379\":1}}],[\"lighthouse\",{\"1\":{\"241\":1,\"242\":1}}],[\"light\",{\"1\":{\"77\":1,\"318\":6}}],[\"li>\",{\"1\":{\"63\":1,\"89\":10}}],[\"layout\",{\"1\":{\"408\":1}}],[\"laoding3\",{\"1\":{\"313\":1}}],[\"laoding2\",{\"1\":{\"313\":1}}],[\"laoding1\",{\"1\":{\"313\":1}}],[\"laoding\",{\"1\":{\"313\":1,\"323\":1,\"324\":1,\"325\":1}}],[\"label=\",{\"1\":{\"278\":1}}],[\"label>\",{\"1\":{\"92\":3,\"250\":1}}],[\"latest\",{\"1\":{\"240\":1}}],[\"language\",{\"0\":{\"372\":1},\"1\":{\"407\":2}}],[\"lang=\",{\"1\":{\"15\":1,\"314\":2,\"323\":1,\"324\":1,\"325\":1,\"337\":1,\"374\":2,\"375\":1,\"376\":2,\"377\":2,\"379\":1}}],[\"lanu模型和batched\",{\"1\":{\"274\":1}}],[\"lanes\",{\"1\":{\"259\":2}}],[\"lane\",{\"1\":{\"186\":1}}],[\"lazy\",{\"0\":{\"93\":1},\"1\":{\"93\":2}}],[\"last\",{\"1\":{\"41\":1}}],[\"level\",{\"1\":{\"241\":1}}],[\"left也可以实现这个动画\",{\"1\":{\"388\":1}}],[\"left为100\",{\"1\":{\"388\":1}}],[\"lefttoright>\",{\"1\":{\"225\":1,\"227\":1}}],[\"left\",{\"1\":{\"225\":1,\"227\":1,\"228\":1,\"312\":1,\"314\":1,\"388\":2,\"389\":2}}],[\"let\",{\"1\":{\"29\":1,\"60\":1,\"70\":1,\"72\":2,\"73\":2,\"76\":2,\"80\":1,\"112\":1,\"129\":2,\"130\":1,\"159\":3,\"161\":1,\"162\":1,\"163\":2,\"191\":1,\"208\":1,\"211\":4,\"247\":2,\"296\":1,\"305\":1,\"319\":1,\"332\":1,\"389\":2}}],[\"length\",{\"1\":{\"15\":1,\"110\":1,\"112\":1,\"241\":1,\"296\":1,\"333\":3}}],[\"副作用函数立即执行\",{\"1\":{\"15\":1}}],[\"副作用会也会发生改变\",{\"1\":{\"14\":1}}],[\"释放\",{\"1\":{\"15\":1}}],[\"emit\",{\"1\":{\"376\":1}}],[\"emits\",{\"1\":{\"376\":2}}],[\"emitter\",{\"1\":{\"330\":1}}],[\"emo了一会\",{\"1\":{\"284\":1}}],[\"emo时间的思考\",{\"0\":{\"284\":1}}],[\"ev\",{\"1\":{\"319\":1}}],[\"events\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"event\",{\"1\":{\"79\":5,\"161\":6}}],[\"eventbus并不是vue官方的名称\",{\"1\":{\"356\":1}}],[\"eventbus\",{\"0\":{\"79\":1,\"356\":1},\"1\":{\"357\":3,\"358\":3}}],[\"edit\",{\"1\":{\"278\":1}}],[\"edgeto\",{\"1\":{\"112\":4}}],[\"edge\",{\"1\":{\"109\":3,\"110\":5,\"112\":6}}],[\"edges\",{\"1\":{\"104\":1,\"105\":1,\"106\":2,\"107\":1,\"109\":1,\"110\":1,\"112\":1}}],[\"e\",{\"0\":{\"344\":1},\"1\":{\"143\":1,\"250\":2,\"318\":4}}],[\"error\",{\"1\":{\"130\":1,\"251\":1,\"305\":1,\"323\":6,\"324\":5,\"325\":5}}],[\"each\",{\"1\":{\"63\":3}}],[\"execsync\",{\"1\":{\"286\":2,\"296\":4}}],[\"execute\",{\"1\":{\"15\":3,\"163\":2}}],[\"expiredlanes\",{\"1\":{\"263\":1}}],[\"expirationtimes\",{\"1\":{\"263\":1}}],[\"export\",{\"1\":{\"76\":1,\"77\":1,\"78\":1,\"177\":1,\"182\":2,\"184\":5,\"192\":7,\"197\":1,\"209\":1,\"211\":1,\"223\":3,\"228\":1,\"233\":1,\"235\":1,\"240\":1,\"241\":1,\"247\":2,\"250\":1,\"278\":2,\"279\":3,\"296\":3,\"302\":1,\"303\":2,\"305\":1,\"306\":1,\"314\":1,\"318\":3,\"319\":3,\"323\":2,\"324\":2,\"325\":2,\"332\":2,\"333\":1,\"334\":1,\"343\":2,\"345\":1,\"346\":1,\"347\":3,\"349\":2,\"350\":2,\"353\":3,\"354\":2,\"355\":2,\"357\":1,\"358\":3,\"371\":1,\"374\":1,\"409\":3,\"411\":1,\"412\":1}}],[\"ext\",{\"1\":{\"241\":1}}],[\"extension\",{\"1\":{\"303\":1}}],[\"extensions\",{\"1\":{\"240\":1}}],[\"extendinfo\",{\"1\":{\"296\":5}}],[\"extends\",{\"1\":{\"135\":2,\"143\":1,\"211\":1,\"271\":1,\"319\":1,\"379\":2}}],[\"external\",{\"1\":{\"192\":3,\"303\":1}}],[\"excute\",{\"1\":{\"154\":2}}],[\"excutecommand\",{\"1\":{\"154\":2}}],[\"excuted\",{\"1\":{\"41\":1}}],[\"example\",{\"1\":{\"60\":1,\"64\":1}}],[\"el\",{\"1\":{\"311\":9,\"313\":18,\"314\":12,\"343\":2,\"389\":9}}],[\"else>\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"else>offline<\",{\"1\":{\"319\":1}}],[\"else\",{\"1\":{\"62\":2,\"163\":2,\"313\":1,\"314\":1}}],[\"elementtype\",{\"1\":{\"259\":2}}],[\"element\",{\"1\":{\"29\":5,\"211\":2}}],[\"el$3\",{\"1\":{\"28\":1}}],[\"el$4\",{\"1\":{\"28\":4}}],[\"el$2\",{\"1\":{\"28\":2}}],[\"el$\",{\"1\":{\"28\":8}}],[\"equal\",{\"1\":{\"211\":2}}],[\"equalityfn\",{\"1\":{\"192\":4}}],[\"equals设置为函数\",{\"1\":{\"7\":1}}],[\"equals\",{\"1\":{\"7\":1,\"8\":1,\"10\":2,\"15\":2,\"17\":1}}],[\"equiv=\",{\"1\":{\"15\":1}}],[\"english\",{\"1\":{\"407\":1}}],[\"encoding\",{\"1\":{\"286\":2,\"296\":4}}],[\"enforce\",{\"1\":{\"284\":2}}],[\"entryto\",{\"1\":{\"392\":1}}],[\"entry\",{\"1\":{\"392\":1}}],[\"entries\",{\"1\":{\"240\":1}}],[\"enter\",{\"1\":{\"278\":1,\"389\":1}}],[\"en\",{\"1\":{\"15\":1}}],[\"effects\",{\"1\":{\"259\":1,\"325\":3}}],[\"effect\",{\"1\":{\"15\":2,\"27\":1}}],[\"这对起名废的同学来说是灾难啊\",{\"1\":{\"360\":1}}],[\"这对我很重要\",{\"1\":{\"274\":1}}],[\"这时候聪明的你肯定联想到了根组件\",{\"1\":{\"353\":1}}],[\"这让我怎么调试啊\",{\"1\":{\"283\":1}}],[\"这其实是双缓存机制的实现\",{\"1\":{\"271\":1}}],[\"这篇我将介绍下fiber架构的链表结构和双缓存机制\",{\"1\":{\"270\":1}}],[\"这才是usecallback的正确用法\",{\"1\":{\"235\":1}}],[\"这种思想来源于android事件发布\",{\"1\":{\"356\":1}}],[\"这种可中断的更新架构就是firbe架构\",{\"1\":{\"217\":1}}],[\"这种如果需要优化\",{\"1\":{\"163\":1}}],[\"这部分是选读\",{\"1\":{\"200\":1}}],[\"这仅仅是冰山一角\",{\"1\":{\"176\":1}}],[\"这和vue的基思路理是一样的了\",{\"1\":{\"160\":1}}],[\"这和svelte的编译结果有两个十分类似的地方\",{\"1\":{\"28\":1}}],[\"这些做的都不错\",{\"1\":{\"405\":1}}],[\"这些属性可以根据fibernode的不同身份进行划分\",{\"1\":{\"259\":1}}],[\"这些个挺不错的\",{\"1\":{\"154\":1,\"155\":1}}],[\"这些我先看看他们的本领怎么样\",{\"1\":{\"154\":1,\"155\":1}}],[\"这些特点使得svelte在国外得到了广泛的关注和应用\",{\"1\":{\"84\":1}}],[\"这么写\",{\"1\":{\"186\":1}}],[\"这么做的好处是可以避免因为高复杂度的更新因为耗时长使用户感知到页面的卡顿\",{\"1\":{\"216\":1}}],[\"这么做的好处一方面使系统变得松藕\",{\"1\":{\"150\":1}}],[\"这么做的好处就是\",{\"1\":{\"139\":1}}],[\"这么回答\",{\"0\":{\"127\":1}}],[\"这么说不严谨\",{\"1\":{\"48\":1}}],[\"这本书的缺点也是语法版本较旧\",{\"1\":{\"121\":1}}],[\"这本书是你入门中级后继续提升的有利法宝\",{\"1\":{\"121\":1}}],[\"这本书作为第三本推荐\",{\"1\":{\"119\":1}}],[\"这本书见证了我的前端之路\",{\"1\":{\"117\":1}}],[\"这本书在我大学的时候就已经买了\",{\"1\":{\"117\":1}}],[\"这里通过实践简单说下vue动画钩子函数思想以及我的使用心得\",{\"1\":{\"385\":1}}],[\"这里需要特别强调的一点是当一个事件在多个组件里监听时\",{\"0\":{\"359\":1}}],[\"这里需要借助之前提到的中介者模式\",{\"1\":{\"279\":1}}],[\"这里导致我无法默认的类型赋值\",{\"1\":{\"323\":1}}],[\"这里会报错\",{\"1\":{\"323\":1}}],[\"这里就不赘述了\",{\"1\":{\"284\":1}}],[\"这里我选择仅仅对评论仓库生效\",{\"1\":{\"416\":1}}],[\"这里我们不用担心\",{\"1\":{\"416\":1}}],[\"这里我们发现类组件和函数组件不一样的地方\",{\"1\":{\"271\":1}}],[\"这里我小小地剧透下\",{\"1\":{\"272\":1}}],[\"这里的依次以插入为例指动画开始前\",{\"1\":{\"392\":1}}],[\"这里的更新我们以后会详细讲到的\",{\"1\":{\"271\":1}}],[\"这里的模板是指基于javascript的解析的模板\",{\"1\":{\"48\":1}}],[\"这里说明一下react元素\",{\"1\":{\"259\":1}}],[\"这里args为set\",{\"1\":{\"184\":1}}],[\"这里只列举了两个特别的\",{\"1\":{\"177\":1}}],[\"这里请自行斟酌买哪个版本\",{\"1\":{\"121\":1}}],[\"这里为了避免标记混乱\",{\"1\":{\"109\":1}}],[\"这样就相当于是全局的侧边栏\",{\"1\":{\"411\":1}}],[\"这样就将发布者和订阅者完全隔离开了\",{\"1\":{\"161\":1}}],[\"这样可以减少很多配置上的麻烦\",{\"1\":{\"407\":1}}],[\"这样在每个方法被使用的时候就可以被监听到了\",{\"1\":{\"330\":1}}],[\"这样好难受啊\",{\"1\":{\"311\":1}}],[\"这样既不会干扰我开发\",{\"1\":{\"284\":1}}],[\"这样动画就更加有灵性了\",{\"1\":{\"223\":1}}],[\"这样每段的增量标记都可以接着上段的标记继续工作了\",{\"1\":{\"139\":1}}],[\"这样粗中有细\",{\"1\":{\"126\":1}}],[\"这样的是可以的\",{\"1\":{\"102\":1}}],[\"这样方便后续对每个节点的操作\",{\"1\":{\"101\":1}}],[\"这使得代码更易于理解和维护\",{\"1\":{\"58\":1}}],[\"这就导致了svete可以直接编译出javascript代码片段\",{\"1\":{\"52\":1}}],[\"这就是边解释边执行的含义\",{\"1\":{\"47\":1}}],[\"这也是vuepress\",{\"1\":{\"416\":1}}],[\"这也是前面模板使用count\",{\"1\":{\"27\":1}}],[\"这也就是官网这个图的含义\",{\"1\":{\"392\":1}}],[\"这也就是为什么会出现typescript\",{\"1\":{\"48\":1}}],[\"这个方案为我们解决了前面提到的缺点\",{\"1\":{\"361\":1}}],[\"这个的实现和立即请求函数类似\",{\"1\":{\"325\":1}}],[\"这个的实现和上面类似\",{\"1\":{\"324\":1}}],[\"这个例子里\",{\"1\":{\"318\":1}}],[\"这个文件中有多个console语句\",{\"1\":{\"288\":1}}],[\"这个系列的目的通过分析一些理论知识\",{\"1\":{\"274\":1}}],[\"这个机制叫做双缓存机制\",{\"1\":{\"216\":1}}],[\"这个回调函数就是instance函数返回值里的click\",{\"1\":{\"214\":1}}],[\"这个大致如下\",{\"1\":{\"210\":1}}],[\"这个仓库罗列了一系列react开发需要学习的技能点\",{\"1\":{\"173\":1}}],[\"这个仓库介绍了300+个常见的面试问题\",{\"1\":{\"170\":1}}],[\"这个表述是有争论的\",{\"1\":{\"47\":1}}],[\"这个任务在服务端仅仅执行一次\",{\"1\":{\"39\":1}}],[\"这个副作用都被执行一次\",{\"1\":{\"12\":1}}],[\"这得从qwik的架构说起\",{\"1\":{\"39\":1}}],[\"这不就是vue3的ref吗\",{\"1\":{\"35\":1}}],[\"这不就是react和vue的结合体嘛\",{\"1\":{\"27\":1}}],[\"这不就是react吗\",{\"1\":{\"26\":1}}],[\"这太简单了吧\",{\"1\":{\"27\":1}}],[\"这又是啥玩意啊\",{\"1\":{\"24\":1}}],[\"这是我替换博客主题最大的体验\",{\"1\":{\"417\":1}}],[\"这是我们发现的第二条链状结构\",{\"1\":{\"271\":1}}],[\"这是文档部署到的分支名称\",{\"1\":{\"415\":1}}],[\"这是文件流中配置的\",{\"1\":{\"415\":1}}],[\"这是单独文件的版本\",{\"1\":{\"358\":3}}],[\"这是挂载到全局的版本\",{\"1\":{\"358\":4}}],[\"这是\",{\"1\":{\"349\":1}}],[\"这是本系列的第二篇了\",{\"1\":{\"274\":1}}],[\"这是因为此时的onclickmethod方法被做为child组件的onclick属性了\",{\"1\":{\"235\":1}}],[\"这是因为不管onclick的回调函数的缓存是否发生改变\",{\"1\":{\"235\":1}}],[\"这是因为不同的框架\",{\"1\":{\"208\":1}}],[\"这是因为\",{\"1\":{\"199\":1}}],[\"这是因为createsignal是基于发布订阅模式的响应式\",{\"1\":{\"14\":1}}],[\"这是一个在recompose库\",{\"1\":{\"177\":1}}],[\"这是个很常见的例子\",{\"1\":{\"13\":1}}],[\"返回一个对象\",{\"1\":{\"364\":1}}],[\"返回请求回调函数\",{\"1\":{\"324\":1}}],[\"返回请求结果\",{\"1\":{\"323\":1}}],[\"返回的dispatch方法有queue属性上\",{\"1\":{\"271\":1}}],[\"返回回调函数\",{\"1\":{\"202\":1}}],[\"返回返回值\",{\"1\":{\"201\":1}}],[\"返回当前内部signal的value\",{\"1\":{\"10\":1,\"15\":1}}],[\"返回\",{\"1\":{\"10\":1,\"15\":1}}],[\"welcome\",{\"1\":{\"354\":2,\"355\":2,\"365\":2}}],[\"webkit\",{\"1\":{\"312\":1,\"314\":1}}],[\"webpack\",{\"0\":{\"290\":1},\"1\":{\"241\":1,\"242\":4}}],[\"web\",{\"1\":{\"8\":1,\"13\":1,\"18\":1,\"26\":1,\"28\":5}}],[\"work>npm\",{\"1\":{\"407\":1}}],[\"workinprogress置空操作\",{\"1\":{\"272\":1}}],[\"worktag\",{\"1\":{\"259\":1}}],[\"world\",{\"1\":{\"79\":1,\"138\":1,\"377\":1}}],[\"warning\",{\"1\":{\"303\":2}}],[\"warn\",{\"1\":{\"201\":1,\"303\":2}}],[\"watchsynceffect\",{\"1\":{\"323\":1,\"325\":1}}],[\"watcheffect\",{\"1\":{\"210\":1,\"318\":3,\"319\":2,\"375\":1,\"376\":1}}],[\"watch\",{\"0\":{\"73\":1},\"1\":{\"73\":2,\"303\":1,\"325\":3,\"336\":2,\"377\":1}}],[\"while\",{\"1\":{\"110\":1,\"112\":1,\"143\":1}}],[\"www\",{\"1\":{\"93\":1,\"289\":1,\"290\":1,\"295\":2,\"297\":1,\"402\":1,\"404\":1}}],[\"writable\",{\"1\":{\"78\":2,\"136\":1}}],[\"write\",{\"1\":{\"27\":2,\"303\":1}}],[\"writesignal\",{\"1\":{\"10\":2,\"15\":2}}],[\"win不支持grep\",{\"1\":{\"286\":1}}],[\"windoweventmap\",{\"1\":{\"319\":1}}],[\"windoweventmap>\",{\"1\":{\"319\":1}}],[\"window\",{\"1\":{\"15\":1,\"79\":2,\"136\":1,\"296\":2,\"333\":6}}],[\"will\",{\"1\":{\"201\":1}}],[\"withreact<storeapi<tstate>>\",{\"1\":{\"192\":1}}],[\"with\",{\"1\":{\"177\":1,\"192\":2,\"303\":1,\"415\":2}}],[\"withlifecycle\",{\"1\":{\"177\":2}}],[\"withstate\",{\"1\":{\"177\":2}}],[\"width\",{\"1\":{\"15\":1,\"312\":2,\"313\":3,\"314\":3}}],[\"width=device\",{\"1\":{\"15\":1}}],[\"attrs简单的说就是props的加强版\",{\"1\":{\"350\":1}}],[\"attribute\",{\"1\":{\"311\":1}}],[\"atom\",{\"0\":{\"168\":1}}],[\"autocatalog\",{\"1\":{\"413\":1}}],[\"autoversionplugin\",{\"1\":{\"306\":1}}],[\"auto\",{\"1\":{\"305\":1,\"306\":1,\"312\":1,\"314\":1,\"323\":1,\"324\":1,\"325\":2}}],[\"autoswitchportplugin\",{\"1\":{\"305\":2}}],[\"authorinfo\",{\"1\":{\"286\":5}}],[\"author\",{\"1\":{\"286\":3}}],[\"await\",{\"1\":{\"303\":4,\"305\":1}}],[\"allow\",{\"1\":{\"303\":1}}],[\"alternate\",{\"1\":{\"259\":2}}],[\"albums\",{\"1\":{\"250\":1}}],[\"algorithm\",{\"1\":{\"241\":1}}],[\"alias\",{\"1\":{\"240\":2}}],[\"alice\",{\"1\":{\"72\":1,\"73\":1}}],[\"api\",{\"1\":{\"184\":2,\"192\":10,\"301\":3}}],[\"apps\",{\"1\":{\"416\":1}}],[\"apply\",{\"1\":{\"319\":1}}],[\"apple\",{\"1\":{\"278\":1,\"409\":2}}],[\"application\",{\"1\":{\"241\":4}}],[\"app组件还未还未加载\",{\"1\":{\"272\":1}}],[\"app组件注定都会被渲染\",{\"1\":{\"235\":1}}],[\"app3\",{\"1\":{\"261\":1}}],[\"app2\",{\"1\":{\"261\":1}}],[\"app是个类组件或者函数组件等\",{\"1\":{\"259\":1}}],[\"append\",{\"1\":{\"211\":2,\"311\":1}}],[\"app\",{\"1\":{\"8\":1,\"13\":1,\"18\":1,\"26\":1,\"28\":1,\"29\":1,\"35\":1,\"36\":2,\"38\":1,\"40\":1,\"41\":1,\"68\":1,\"69\":1,\"77\":2,\"80\":1,\"182\":4,\"197\":3,\"209\":1,\"211\":2,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"233\":2,\"235\":3,\"240\":1,\"247\":1,\"248\":1,\"250\":1,\"261\":1,\"271\":2,\"279\":2,\"353\":1,\"374\":2,\"376\":1,\"377\":1,\"416\":1}}],[\"ahooks的工具库还有很多\",{\"1\":{\"177\":1}}],[\"ahead\",{\"1\":{\"49\":1}}],[\"adam\",{\"1\":{\"173\":1}}],[\"addhook\",{\"1\":{\"302\":3}}],[\"addcommitinfo\",{\"1\":{\"296\":4}}],[\"addcommitandversion\",{\"1\":{\"296\":1}}],[\"addcommand\",{\"1\":{\"154\":4}}],[\"addstrategy\",{\"1\":{\"163\":4}}],[\"addobserver\",{\"1\":{\"160\":5}}],[\"addedges\",{\"0\":{\"106\":1},\"1\":{\"106\":1,\"107\":6}}],[\"addeventlistener\",{\"1\":{\"79\":1,\"83\":1,\"318\":2,\"319\":1}}],[\"addnodes\",{\"0\":{\"105\":1},\"1\":{\"105\":1,\"107\":1}}],[\"add\",{\"1\":{\"15\":1,\"27\":1,\"36\":3,\"38\":3,\"133\":2,\"191\":1,\"247\":2,\"296\":4,\"297\":2}}],[\"article\",{\"1\":{\"409\":1}}],[\"arehookinputsequal\",{\"1\":{\"201\":2,\"202\":1}}],[\"are\",{\"1\":{\"201\":1}}],[\"args\",{\"1\":{\"135\":1,\"163\":3,\"184\":3,\"319\":3,\"323\":2,\"324\":2,\"325\":2,\"332\":5}}],[\"array\",{\"1\":{\"223\":1,\"225\":1,\"226\":1,\"227\":1}}],[\"array<mixed>\",{\"1\":{\"201\":3,\"202\":3}}],[\"arraylist<object>\",{\"1\":{\"133\":1}}],[\"arr\",{\"1\":{\"133\":5,\"163\":4}}],[\"announcements\",{\"1\":{\"416\":1}}],[\"annot\",{\"1\":{\"263\":1}}],[\"and\",{\"1\":{\"225\":1,\"226\":1,\"227\":2,\"228\":1,\"296\":1,\"416\":1}}],[\"animationprops\",{\"1\":{\"223\":1}}],[\"animation动画参数\",{\"1\":{\"223\":1}}],[\"animation\",{\"1\":{\"222\":1,\"223\":11,\"228\":4,\"312\":1,\"314\":1,\"389\":4}}],[\"animal\",{\"1\":{\"135\":3}}],[\"anchor\",{\"1\":{\"211\":2}}],[\"any\",{\"1\":{\"192\":1,\"263\":4,\"284\":1,\"305\":1,\"319\":3,\"323\":1,\"324\":1,\"325\":1,\"333\":1,\"376\":1,\"380\":2,\"414\":2}}],[\"antd\",{\"1\":{\"176\":1}}],[\"antonioru\",{\"1\":{\"176\":1}}],[\"angular的编译器同时提供了两种编译方案\",{\"1\":{\"49\":1}}],[\"a\",{\"0\":{\"344\":2},\"1\":{\"130\":2,\"131\":2,\"163\":6,\"192\":1,\"311\":1,\"336\":2,\"337\":1,\"407\":3}}],[\"action\",{\"1\":{\"251\":2,\"415\":1}}],[\"actions\",{\"1\":{\"182\":3,\"415\":1}}],[\"active\",{\"1\":{\"82\":2}}],[\"ac45fa\",{\"1\":{\"92\":1}}],[\"afterupdate\",{\"1\":{\"80\":9}}],[\"age=\",{\"1\":{\"349\":2,\"350\":2}}],[\"age++\",{\"1\":{\"325\":1}}],[\"age发生变化了\",{\"1\":{\"161\":2}}],[\"age\",{\"1\":{\"72\":3,\"73\":2,\"135\":7,\"160\":5,\"161\":7,\"162\":1,\"325\":2,\"347\":1,\"349\":2,\"350\":4,\"354\":1,\"355\":1}}],[\"aot的好处是可以拥有更短的运行时间\",{\"1\":{\"49\":1}}],[\"aot\",{\"1\":{\"49\":3}}],[\"am\",{\"1\":{\"41\":1,\"135\":2}}],[\"asyncflatten\",{\"1\":{\"303\":1}}],[\"async\",{\"1\":{\"303\":2,\"305\":1,\"306\":1}}],[\"assume\",{\"1\":{\"201\":1}}],[\"assign\",{\"1\":{\"10\":1,\"15\":1,\"192\":1,\"313\":1,\"314\":1}}],[\"as\",{\"1\":{\"28\":4,\"63\":1,\"192\":1,\"303\":2,\"305\":1,\"323\":2,\"324\":2,\"325\":2,\"414\":2}}],[\"branch\",{\"1\":{\"415\":1}}],[\"brotliccompress\",{\"1\":{\"241\":1}}],[\"browser\",{\"1\":{\"39\":2}}],[\"bwrong大佬指正\",{\"1\":{\"372\":1}}],[\"btn\",{\"1\":{\"343\":1}}],[\"bloghome\",{\"1\":{\"408\":1}}],[\"blog\",{\"1\":{\"404\":1,\"407\":1,\"408\":1}}],[\"blogs\",{\"1\":{\"403\":1,\"407\":1,\"416\":1}}],[\"blogs2\",{\"1\":{\"399\":2,\"407\":2,\"415\":1}}],[\"blob\",{\"1\":{\"173\":1}}],[\"blame\",{\"1\":{\"286\":3}}],[\"beta\",{\"1\":{\"407\":3}}],[\"beginwork阶段\",{\"1\":{\"272\":1}}],[\"beautiful\",{\"0\":{\"176\":1},\"1\":{\"176\":2}}],[\"beforeenter\",{\"1\":{\"389\":1}}],[\"beforedestroy\",{\"1\":{\"358\":1}}],[\"beforeunmount\",{\"1\":{\"311\":1}}],[\"beforeupdate\",{\"1\":{\"80\":10,\"311\":1}}],[\"beforemount\",{\"1\":{\"311\":1,\"354\":1,\"355\":1}}],[\"before\",{\"1\":{\"42\":2}}],[\"bits\",{\"1\":{\"172\":1}}],[\"bind=\",{\"1\":{\"350\":1}}],[\"bind传给自己的内部子组件\",{\"1\":{\"350\":1}}],[\"binding\",{\"1\":{\"311\":7,\"313\":6,\"314\":4}}],[\"bind\",{\"1\":{\"10\":1,\"15\":1,\"66\":2,\"82\":2}}],[\"by=\",{\"1\":{\"161\":1}}],[\"by\",{\"1\":{\"161\":1}}],[\"byte\",{\"1\":{\"131\":3}}],[\"b\",{\"1\":{\"131\":1,\"192\":1}}],[\"bfs\",{\"1\":{\"108\":1,\"110\":4,\"111\":7,\"112\":3}}],[\"bar\",{\"1\":{\"364\":3}}],[\"bad\",{\"1\":{\"163\":1}}],[\"baidu\",{\"1\":{\"93\":1}}],[\"background\",{\"1\":{\"233\":1,\"235\":1}}],[\"back\",{\"1\":{\"62\":1}}],[\"bundle\",{\"1\":{\"303\":1}}],[\"buy\",{\"1\":{\"278\":2}}],[\"build\",{\"1\":{\"240\":3,\"241\":2,\"303\":4}}],[\"builder\",{\"1\":{\"36\":1}}],[\"button所在的fiber结构中\",{\"1\":{\"271\":1}}],[\"button>\",{\"1\":{\"8\":3,\"13\":1,\"18\":1,\"35\":1,\"36\":2,\"38\":1,\"40\":1,\"41\":1,\"60\":1,\"62\":1,\"65\":1,\"70\":1,\"74\":1,\"78\":1,\"79\":1,\"80\":1,\"161\":1,\"176\":2,\"182\":4,\"183\":4,\"197\":1,\"233\":1,\"235\":2,\"247\":1,\"251\":2,\"252\":1,\"271\":2,\"278\":1,\"279\":1,\"323\":1,\"324\":1,\"325\":1,\"337\":1,\"343\":1,\"374\":1}}],[\"button\",{\"1\":{\"8\":3,\"13\":1,\"18\":1,\"176\":1,\"278\":1,\"337\":1,\"343\":1}}],[\"book\",{\"1\":{\"409\":1}}],[\"boolean\",{\"1\":{\"7\":1,\"17\":1,\"192\":1,\"313\":7,\"314\":5,\"323\":1}}],[\"body\",{\"1\":{\"296\":1}}],[\"body标签\",{\"1\":{\"296\":1}}],[\"body>\",{\"1\":{\"15\":1,\"261\":1}}],[\"bottom\",{\"1\":{\"226\":1}}],[\"bottomtotop>\",{\"1\":{\"223\":1,\"226\":1,\"227\":2}}],[\"bottomtotop\",{\"1\":{\"223\":8}}],[\"bone\",{\"1\":{\"135\":5}}],[\"border\",{\"1\":{\"90\":1,\"312\":4,\"314\":4}}],[\"<el\",{\"1\":{\"343\":1}}],[\"<k\",{\"1\":{\"319\":1}}],[\"<form>\",{\"1\":{\"278\":1}}],[\"<father\",{\"1\":{\"80\":1}}],[\"<app\",{\"1\":{\"271\":1}}],[\"<<\",{\"1\":{\"233\":1,\"235\":1}}],[\"<righttoleft\",{\"1\":{\"225\":1,\"227\":1}}],[\"<yourcomponents\",{\"1\":{\"223\":1,\"225\":2,\"226\":2,\"227\":2}}],[\"<t>\",{\"1\":{\"324\":2}}],[\"<t\",{\"1\":{\"323\":2,\"325\":2}}],[\"<template>\",{\"1\":{\"312\":1,\"313\":3,\"314\":2,\"323\":1,\"324\":1,\"325\":1,\"337\":1,\"343\":2,\"347\":2,\"349\":1,\"350\":3,\"354\":1,\"355\":1,\"374\":2,\"376\":1,\"377\":2}}],[\"<toptobottom\",{\"1\":{\"226\":1}}],[\"<tag\",{\"1\":{\"176\":1}}],[\"<typography\",{\"1\":{\"176\":1}}],[\"<title>solidjs<\",{\"1\":{\"15\":1}}],[\"<=========>\",{\"1\":{\"111\":1}}],[\"<iframe\",{\"1\":{\"93\":1}}],[\"<img\",{\"1\":{\"93\":1}}],[\"<input\",{\"1\":{\"66\":1,\"83\":1,\"90\":1,\"92\":3,\"250\":1,\"252\":1,\"253\":1,\"377\":1}}],[\"<option\",{\"1\":{\"92\":13}}],[\"<ol\",{\"1\":{\"89\":2}}],[\"<lefttoright\",{\"1\":{\"225\":1,\"227\":1}}],[\"<label>\",{\"1\":{\"92\":3,\"250\":1}}],[\"<li>fifth\",{\"1\":{\"89\":2}}],[\"<li>first\",{\"1\":{\"89\":2}}],[\"<li>fourth\",{\"1\":{\"89\":2}}],[\"<li>third\",{\"1\":{\"89\":2}}],[\"<li>second\",{\"1\":{\"89\":2}}],[\"<li>\",{\"1\":{\"63\":1}}],[\"<displaydemo\",{\"1\":{\"176\":1}}],[\"<div><\",{\"1\":{\"279\":1,\"312\":1,\"314\":1}}],[\"<div>萌萌哒草头将军<\",{\"1\":{\"88\":1}}],[\"<div>\",{\"1\":{\"35\":1,\"40\":1,\"41\":1,\"68\":1,\"69\":1,\"182\":2,\"183\":2,\"278\":1,\"279\":1,\"325\":1,\"337\":1,\"343\":2,\"347\":2,\"350\":2,\"354\":1,\"355\":1,\"365\":1,\"374\":1}}],[\"<div\",{\"1\":{\"26\":1,\"91\":1,\"197\":1,\"208\":3,\"233\":2,\"235\":3,\"261\":3,\"312\":1,\"313\":3,\"314\":2,\"349\":3,\"350\":1}}],[\"<datalist\",{\"1\":{\"92\":3}}],[\"<datalist>\",{\"0\":{\"92\":1},\"1\":{\"92\":1}}],[\"<p\",{\"1\":{\"69\":1}}],[\"<p>count\",{\"1\":{\"182\":2,\"183\":2}}],[\"<p>子组件内容<\",{\"1\":{\"74\":1}}],[\"<p>world\",{\"1\":{\"68\":1}}],[\"<p>\",{\"1\":{\"36\":2,\"38\":1,\"72\":1,\"73\":1}}],[\"<mybutton\",{\"1\":{\"161\":1}}],[\"<mycomponent\",{\"1\":{\"64\":1,\"68\":1,\"69\":1}}],[\"<main>\",{\"1\":{\"77\":1}}],[\"<meta\",{\"1\":{\"15\":3}}],[\"<span\",{\"1\":{\"312\":1,\"314\":1}}],[\"<space>\",{\"1\":{\"176\":1}}],[\"<searchresults\",{\"1\":{\"250\":1}}],[\"<section\",{\"1\":{\"88\":1}}],[\"<suspense\",{\"1\":{\"250\":1}}],[\"<svelte\",{\"1\":{\"77\":1}}],[\"<slot\",{\"1\":{\"69\":1}}],[\"<slot><\",{\"1\":{\"68\":1}}],[\"<style>\",{\"1\":{\"60\":1,\"90\":1,\"312\":1,\"314\":1}}],[\"<script>\",{\"1\":{\"15\":1,\"60\":1,\"64\":1,\"70\":1,\"72\":1,\"73\":1,\"74\":2,\"76\":2,\"77\":2,\"78\":2,\"79\":2,\"80\":3,\"83\":1,\"343\":2,\"345\":1,\"346\":1,\"347\":3,\"349\":2,\"350\":2,\"353\":3,\"354\":2,\"355\":2,\"358\":3}}],[\"<script\",{\"1\":{\"15\":1,\"314\":2,\"323\":1,\"324\":1,\"325\":1,\"337\":1,\"374\":2,\"375\":1,\"376\":2,\"377\":2,\"379\":1}}],[\"<countprovider>\",{\"1\":{\"182\":1}}],[\"<countcontext\",{\"1\":{\"182\":1}}],[\"<counter\",{\"1\":{\"8\":1,\"13\":1,\"18\":1,\"26\":1,\"182\":2}}],[\"<children\",{\"1\":{\"343\":1,\"347\":2,\"349\":1,\"350\":2}}],[\"<child\",{\"1\":{\"38\":1,\"74\":1,\"76\":1,\"80\":1,\"233\":2,\"235\":4,\"278\":1,\"279\":1,\"350\":1,\"374\":1,\"376\":1,\"377\":1}}],[\"<br\",{\"1\":{\"279\":1}}],[\"<bottomtotop\",{\"1\":{\"223\":1,\"226\":1,\"227\":2}}],[\"<body>\",{\"1\":{\"15\":1,\"261\":1}}],[\"<button>父组件内容<\",{\"1\":{\"74\":1}}],[\"<button>\",{\"1\":{\"60\":1}}],[\"<button\",{\"1\":{\"8\":3,\"13\":1,\"18\":1,\"35\":1,\"36\":2,\"38\":1,\"40\":1,\"41\":1,\"62\":1,\"65\":1,\"70\":1,\"78\":1,\"79\":1,\"80\":1,\"161\":1,\"176\":2,\"182\":4,\"183\":4,\"197\":1,\"233\":1,\"235\":2,\"247\":1,\"251\":2,\"252\":1,\"271\":2,\"278\":1,\"279\":1,\"323\":1,\"324\":1,\"325\":1,\"337\":1,\"374\":1}}],[\"<h3>\",{\"1\":{\"343\":1}}],[\"<h4>公众号\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"<h1\",{\"1\":{\"319\":2,\"323\":2,\"324\":2,\"325\":2}}],[\"<h1>加载成功<\",{\"1\":{\"313\":3,\"314\":1}}],[\"<h1>world\",{\"1\":{\"80\":1}}],[\"<h1>welcome\",{\"1\":{\"62\":1}}],[\"<h1>count\",{\"1\":{\"78\":2}}],[\"<h1>app<\",{\"1\":{\"77\":1}}],[\"<h1>\",{\"1\":{\"72\":1,\"73\":1,\"177\":1,\"374\":1}}],[\"<h1>hello\",{\"1\":{\"61\":1,\"76\":1,\"80\":1}}],[\"<h1>打开控制台查看结果<\",{\"1\":{\"15\":1}}],[\"<header\",{\"1\":{\"77\":1}}],[\"<head>\",{\"1\":{\"15\":1}}],[\"<h2>loading\",{\"1\":{\"250\":1}}],[\"<h2>header<\",{\"1\":{\"77\":1}}],[\"<h2>\",{\"1\":{\"68\":1,\"69\":1}}],[\"<html\",{\"1\":{\"15\":1}}],[\"<\",{\"1\":{\"8\":4,\"13\":1,\"15\":5,\"18\":1,\"26\":1,\"28\":2,\"35\":2,\"36\":4,\"38\":3,\"40\":2,\"41\":2,\"60\":4,\"61\":1,\"62\":1,\"63\":1,\"64\":1,\"65\":1,\"68\":6,\"69\":6,\"70\":2,\"72\":3,\"73\":3,\"74\":4,\"76\":5,\"77\":8,\"78\":6,\"79\":5,\"80\":9,\"83\":1,\"88\":1,\"89\":2,\"90\":1,\"91\":1,\"92\":6,\"161\":1,\"176\":4,\"177\":1,\"182\":7,\"183\":4,\"197\":2,\"208\":3,\"223\":2,\"225\":3,\"226\":3,\"227\":5,\"233\":2,\"235\":3,\"247\":1,\"248\":1,\"250\":4,\"251\":2,\"252\":1,\"259\":1,\"261\":1,\"271\":4,\"278\":3,\"279\":1,\"312\":4,\"313\":7,\"314\":8,\"323\":6,\"324\":6,\"325\":7,\"337\":4,\"343\":7,\"345\":1,\"346\":1,\"347\":7,\"349\":6,\"350\":8,\"353\":3,\"354\":4,\"355\":4,\"358\":3,\"365\":1,\"374\":6,\"375\":1,\"376\":3,\"377\":4,\"379\":1}}],[\"<><\",{\"1\":{\"249\":1}}],[\"<>\",{\"1\":{\"8\":1,\"35\":1,\"36\":2,\"38\":2,\"40\":1,\"41\":1,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"247\":1,\"248\":1,\"250\":1,\"251\":1,\"252\":1,\"271\":2}}],[\"+|\",{\"1\":{\"287\":1}}],[\"+<\",{\"1\":{\"279\":1}}],[\"++\",{\"1\":{\"143\":4,\"162\":1,\"164\":1,\"247\":1,\"374\":1}}],[\"+=\",{\"1\":{\"70\":1,\"78\":1,\"161\":1,\"176\":1}}],[\"+\",{\"1\":{\"8\":2,\"13\":1,\"15\":1,\"18\":2,\"20\":1,\"26\":2,\"27\":1,\"28\":2,\"37\":1,\"132\":2,\"135\":8,\"143\":9,\"164\":2,\"182\":2,\"197\":1,\"233\":1,\"235\":2,\"251\":1,\"271\":4,\"279\":1,\"286\":2,\"305\":1,\"347\":1}}],[\">change\",{\"1\":{\"374\":1}}],[\">click\",{\"1\":{\"65\":1,\"79\":1,\"233\":1,\"235\":2}}],[\">销毁事件\",{\"1\":{\"358\":1}}],[\">监听事件\",{\"1\":{\"358\":1}}],[\">loading\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\">log\",{\"1\":{\"62\":1}}],[\">online<\",{\"1\":{\"319\":1}}],[\">add\",{\"1\":{\"279\":1}}],[\">add+<\",{\"1\":{\"247\":1}}],[\">这样的组件\",{\"1\":{\"259\":1}}],[\">focus\",{\"1\":{\"252\":1}}],[\">fib\",{\"1\":{\"28\":1}}],[\">decrement<\",{\"1\":{\"182\":2,\"183\":2}}],[\">decrease<\",{\"1\":{\"176\":1}}],[\">increase<\",{\"1\":{\"176\":1}}],[\">increment<\",{\"1\":{\"78\":1,\"182\":2,\"183\":2}}],[\">2\",{\"1\":{\"100\":7,\"113\":1}}],[\">4\",{\"1\":{\"99\":1,\"100\":2}}],[\">1\",{\"1\":{\"99\":1,\"113\":1}}],[\">3\",{\"1\":{\"99\":1,\"100\":4}}],[\">6\",{\"1\":{\"99\":1,\"100\":3}}],[\">5\",{\"1\":{\"99\":1,\"100\":2,\"113\":1}}],[\">萌萌哒草头将军\",{\"1\":{\"91\":1}}],[\">world\",{\"1\":{\"69\":1}}],[\">+<\",{\"1\":{\"35\":1,\"36\":2,\"38\":1,\"40\":1,\"41\":1,\"251\":1}}],[\"><child\",{\"1\":{\"350\":1}}],[\"><children\",{\"1\":{\"343\":1,\"347\":2,\"349\":1,\"350\":2}}],[\"><\",{\"1\":{\"15\":1,\"69\":1,\"92\":10,\"261\":3,\"343\":1}}],[\">\",{\"1\":{\"8\":6,\"13\":2,\"15\":4,\"18\":2,\"26\":2,\"35\":1,\"36\":2,\"38\":3,\"39\":2,\"40\":1,\"41\":1,\"60\":1,\"64\":1,\"66\":1,\"68\":3,\"69\":3,\"70\":1,\"74\":3,\"76\":3,\"77\":6,\"78\":2,\"79\":2,\"80\":6,\"83\":1,\"89\":1,\"90\":1,\"92\":9,\"93\":2,\"107\":7,\"112\":1,\"161\":2,\"176\":2,\"182\":4,\"197\":2,\"208\":3,\"223\":3,\"225\":5,\"226\":5,\"227\":7,\"233\":4,\"235\":7,\"247\":1,\"248\":1,\"249\":1,\"250\":4,\"251\":2,\"252\":2,\"253\":1,\"271\":5,\"278\":2,\"279\":2,\"312\":2,\"313\":2,\"314\":5,\"323\":3,\"324\":3,\"325\":3,\"337\":2,\"343\":1,\"347\":2,\"349\":4,\"350\":4,\"374\":4,\"375\":2,\"376\":4,\"377\":4,\"379\":2,\"380\":1}}],[\"own\",{\"1\":{\"416\":1}}],[\"owner\",{\"1\":{\"29\":1}}],[\"ok\",{\"1\":{\"407\":3}}],[\"opacity\",{\"1\":{\"223\":2,\"228\":2,\"389\":3}}],[\"openblock\",{\"1\":{\"210\":1}}],[\"option\",{\"1\":{\"296\":2,\"312\":2,\"313\":13,\"314\":8}}],[\"optionprops\",{\"1\":{\"296\":1}}],[\"option>\",{\"1\":{\"92\":10}}],[\"options\",{\"1\":{\"7\":1,\"10\":5,\"15\":5,\"17\":1,\"29\":2,\"77\":1,\"83\":1,\"211\":2,\"303\":1}}],[\"others\",{\"0\":{\"289\":1,\"290\":1},\"1\":{\"289\":2,\"290\":2,\"408\":1}}],[\"other\",{\"1\":{\"164\":2}}],[\"outdir\",{\"1\":{\"240\":1,\"241\":1}}],[\"out\",{\"1\":{\"129\":1,\"135\":2,\"143\":6}}],[\"ol>\",{\"1\":{\"89\":2}}],[\"ol\",{\"0\":{\"89\":1}}],[\"on监听该事件\",{\"1\":{\"343\":1}}],[\"onunmounted\",{\"1\":{\"325\":1}}],[\"online\",{\"1\":{\"319\":2}}],[\"online的变化\",{\"1\":{\"319\":1}}],[\"onrollupwarning\",{\"1\":{\"303\":1}}],[\"onrecoverableerror\",{\"1\":{\"263\":1}}],[\"onreceiveprops\",{\"1\":{\"177\":1}}],[\"onwarn\",{\"1\":{\"303\":1}}],[\"onbuttonclick\",{\"1\":{\"252\":2}}],[\"oncleanup\",{\"1\":{\"318\":4,\"319\":2}}],[\"onclick属性\",{\"1\":{\"271\":1}}],[\"onclickmethod\",{\"1\":{\"235\":4}}],[\"onclick\",{\"1\":{\"197\":2,\"209\":1,\"210\":1,\"233\":3,\"235\":5}}],[\"onclick$=\",{\"1\":{\"35\":1,\"36\":2,\"38\":1,\"40\":1,\"41\":1}}],[\"onclick=\",{\"1\":{\"8\":2,\"13\":1,\"18\":1,\"26\":1,\"176\":2,\"182\":4,\"183\":4,\"197\":1,\"208\":1,\"233\":1,\"235\":4,\"247\":1,\"251\":2,\"252\":1,\"271\":2,\"278\":1,\"279\":1}}],[\"onchange\",{\"1\":{\"318\":6}}],[\"onchange=\",{\"1\":{\"250\":1}}],[\"ondidmount\",{\"1\":{\"177\":1}}],[\"ondestroy\",{\"1\":{\"80\":9}}],[\"one\",{\"0\":{\"168\":1},\"1\":{\"336\":1,\"387\":1,\"388\":1,\"389\":3}}],[\"onmoute\",{\"1\":{\"80\":4}}],[\"onmount\",{\"1\":{\"79\":2,\"80\":5}}],[\"on\",{\"1\":{\"62\":1,\"65\":2,\"70\":1,\"78\":1,\"79\":1,\"80\":1,\"82\":2,\"161\":1,\"208\":1,\"241\":1,\"305\":1}}],[\"or\",{\"0\":{\"39\":1},\"1\":{\"39\":1,\"303\":1}}],[\"offline\",{\"1\":{\"319\":1}}],[\"of\",{\"1\":{\"27\":1,\"49\":1,\"302\":1,\"407\":1}}],[\"obj\",{\"1\":{\"162\":5,\"332\":5,\"365\":2}}],[\"object>\",{\"1\":{\"323\":1,\"325\":1}}],[\"object\",{\"1\":{\"10\":1,\"15\":1,\"136\":1,\"143\":1,\"159\":1,\"160\":2,\"161\":2,\"162\":1,\"192\":1,\"240\":1,\"296\":1,\"311\":1,\"313\":1,\"314\":1}}],[\"observerlist\",{\"1\":{\"160\":3}}],[\"observer\",{\"1\":{\"160\":11}}],[\"observers\",{\"1\":{\"15\":5}}],[\"o\",{\"1\":{\"8\":2}}],[\"navbar\",{\"1\":{\"409\":7}}],[\"navigator\",{\"1\":{\"319\":1}}],[\"name`\",{\"1\":{\"286\":1}}],[\"name发生变化了\",{\"1\":{\"161\":4}}],[\"name\",{\"1\":{\"61\":1,\"66\":1,\"72\":3,\"73\":2,\"76\":4,\"135\":9,\"143\":2,\"154\":6,\"160\":5,\"161\":8,\"162\":8,\"163\":4,\"222\":2,\"271\":8,\"278\":1,\"284\":2,\"296\":2,\"305\":1,\"306\":1,\"343\":4,\"345\":2,\"346\":1,\"347\":6,\"349\":2,\"350\":4,\"354\":2,\"355\":5,\"365\":5,\"408\":2,\"415\":3}}],[\"name=\",{\"1\":{\"15\":1,\"69\":1,\"76\":1,\"343\":1,\"345\":1,\"349\":2,\"350\":2}}],[\"n`\",{\"1\":{\"287\":1}}],[\"nginx\",{\"1\":{\"241\":2}}],[\"npm地址\",{\"1\":{\"297\":1}}],[\"npmjs\",{\"1\":{\"289\":1,\"290\":1,\"295\":2,\"297\":1}}],[\"npm\",{\"1\":{\"240\":1,\"370\":4,\"407\":1,\"408\":1,\"415\":2}}],[\"num3是没法调用任何方法的\",{\"1\":{\"130\":1}}],[\"num3\",{\"1\":{\"130\":1}}],[\"num2是可以调用integer类型方法的\",{\"1\":{\"130\":1}}],[\"num2\",{\"1\":{\"130\":1}}],[\"num1\",{\"1\":{\"130\":3}}],[\"num\",{\"1\":{\"129\":4,\"130\":2}}],[\"numeric\",{\"0\":{\"90\":1},\"1\":{\"90\":2}}],[\"number类型的差异\",{\"0\":{\"131\":1}}],[\"number\",{\"0\":{\"90\":1},\"1\":{\"36\":1,\"38\":1,\"90\":1,\"164\":8,\"182\":3,\"223\":3,\"305\":2,\"319\":1,\"332\":1,\"374\":1,\"375\":1,\"376\":1,\"379\":1,\"380\":1}}],[\"nuxt\",{\"1\":{\"39\":1}}],[\"null\",{\"1\":{\"28\":2,\"29\":1,\"143\":1,\"201\":6,\"202\":6,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"249\":1,\"252\":1,\"259\":23,\"263\":7,\"271\":3,\"278\":2,\"296\":1,\"311\":1,\"334\":1}}],[\"no\",{\"1\":{\"407\":1}}],[\"normalplugins\",{\"1\":{\"303\":2}}],[\"nolanes\",{\"1\":{\"259\":4,\"263\":6}}],[\"noflags\",{\"1\":{\"259\":4}}],[\"noop\",{\"1\":{\"211\":1}}],[\"notimestamp\",{\"1\":{\"263\":1}}],[\"notify\",{\"1\":{\"160\":3}}],[\"not\",{\"1\":{\"201\":1,\"211\":2,\"415\":1}}],[\"none\",{\"0\":{\"88\":1},\"1\":{\"88\":1,\"312\":2,\"314\":2,\"323\":1,\"324\":1,\"325\":1}}],[\"now\",{\"1\":{\"26\":1,\"27\":1,\"28\":1}}],[\"nodejs\",{\"1\":{\"319\":1}}],[\"node\",{\"1\":{\"10\":3,\"15\":4,\"83\":3,\"303\":2,\"415\":3}}],[\"need\",{\"1\":{\"407\":3}}],[\"net\",{\"1\":{\"305\":3}}],[\"newcontent\",{\"1\":{\"287\":2}}],[\"newrows\",{\"1\":{\"287\":2}}],[\"newstate\",{\"1\":{\"191\":2}}],[\"newvalue\",{\"1\":{\"160\":4,\"161\":6,\"162\":3}}],[\"new\",{\"1\":{\"15\":1,\"27\":1,\"105\":1,\"107\":1,\"130\":1,\"132\":2,\"133\":2,\"135\":2,\"143\":1,\"154\":7,\"159\":3,\"160\":6,\"161\":2,\"163\":1,\"164\":2,\"191\":1,\"223\":1,\"225\":1,\"226\":1,\"227\":1,\"251\":1,\"296\":4,\"305\":1,\"323\":2,\"324\":2,\"325\":2,\"357\":2}}],[\"next为null\",{\"1\":{\"271\":1}}],[\"nextdeps\",{\"1\":{\"201\":6,\"202\":6}}],[\"nextcreate\",{\"1\":{\"201\":6}}],[\"nextprops\",{\"1\":{\"177\":2}}],[\"nextsibling\",{\"1\":{\"28\":2}}],[\"nextvalue\",{\"1\":{\"27\":2,\"201\":6}}],[\"next\",{\"1\":{\"7\":1,\"17\":1}}],[\"n\",{\"0\":{\"344\":2},\"1\":{\"8\":2,\"107\":2,\"161\":2,\"286\":1,\"287\":1,\"296\":2}}],[\"1尽量少用过度属性做复杂的动画\",{\"0\":{\"394\":1}}],[\"1创建\",{\"0\":{\"357\":1}}],[\"123\",{\"1\":{\"347\":1,\"354\":1,\"355\":1}}],[\"1s\",{\"1\":{\"312\":1,\"314\":1}}],[\"16\",{\"1\":{\"233\":1,\"235\":1}}],[\"166\",{\"1\":{\"164\":1}}],[\"150\",{\"1\":{\"223\":3,\"228\":1}}],[\"150ms\",{\"1\":{\"223\":1}}],[\"11月份的面试越来越觉得自己学的不够踏实和深入\",{\"1\":{\"341\":1}}],[\"11\",{\"1\":{\"163\":2}}],[\"1111\",{\"1\":{\"41\":1}}],[\"18\",{\"1\":{\"160\":2,\"161\":3,\"162\":1,\"347\":1,\"349\":2,\"350\":2,\"415\":1}}],[\"14\",{\"1\":{\"136\":3}}],[\"10240\",{\"1\":{\"241\":1}}],[\"1000\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"100px\",{\"1\":{\"312\":1,\"314\":1,\"387\":1,\"389\":3}}],[\"100\",{\"1\":{\"131\":1,\"164\":1,\"222\":1,\"223\":3,\"228\":1,\"233\":1,\"235\":1,\"312\":2,\"314\":2,\"387\":1,\"388\":1,\"389\":3}}],[\"10\",{\"0\":{\"141\":1},\"1\":{\"26\":1,\"27\":1,\"28\":1,\"89\":1,\"223\":1}}],[\"1\",{\"0\":{\"60\":1,\"72\":1,\"75\":1,\"82\":1,\"88\":1,\"129\":1,\"212\":1,\"222\":1,\"225\":1,\"343\":1,\"345\":1,\"349\":1,\"352\":1,\"353\":1,\"363\":1,\"364\":1,\"387\":1,\"392\":1},\"1\":{\"8\":3,\"13\":2,\"15\":3,\"18\":2,\"26\":1,\"28\":2,\"70\":2,\"73\":2,\"78\":1,\"92\":3,\"99\":1,\"100\":9,\"107\":8,\"110\":1,\"111\":4,\"113\":3,\"131\":1,\"132\":4,\"133\":4,\"135\":1,\"138\":1,\"140\":2,\"161\":2,\"163\":4,\"164\":1,\"176\":2,\"182\":4,\"191\":1,\"197\":1,\"201\":1,\"202\":1,\"210\":1,\"211\":2,\"214\":1,\"223\":3,\"228\":5,\"233\":2,\"235\":3,\"251\":2,\"271\":2,\"279\":1,\"305\":1,\"333\":1,\"364\":1,\"389\":2,\"400\":2,\"409\":1}}],[\"==>我是父组件name123\",{\"1\":{\"347\":1}}],[\"==>\",{\"1\":{\"345\":2,\"346\":1}}],[\"==\",{\"0\":{\"132\":1},\"1\":{\"112\":1,\"132\":5,\"143\":1,\"201\":1,\"202\":1,\"247\":1,\"286\":1,\"296\":3,\"312\":1,\"313\":1,\"314\":2,\"346\":1,\"353\":1}}],[\"===\",{\"1\":{\"10\":1,\"15\":1,\"29\":1,\"70\":1,\"132\":1,\"159\":1,\"163\":3,\"192\":1,\"201\":2,\"202\":2,\"225\":1,\"226\":1,\"227\":1,\"313\":1,\"314\":1,\"389\":1}}],[\"=\",{\"1\":{\"8\":3,\"10\":6,\"13\":2,\"15\":12,\"18\":3,\"20\":3,\"26\":2,\"27\":7,\"28\":8,\"29\":3,\"35\":2,\"36\":5,\"37\":1,\"38\":6,\"40\":2,\"41\":2,\"60\":1,\"70\":1,\"72\":2,\"73\":2,\"76\":1,\"77\":2,\"78\":1,\"79\":1,\"80\":2,\"101\":1,\"104\":3,\"105\":2,\"107\":1,\"109\":1,\"110\":4,\"112\":11,\"129\":4,\"130\":5,\"131\":4,\"133\":5,\"135\":8,\"136\":2,\"143\":3,\"154\":11,\"159\":4,\"160\":13,\"161\":12,\"162\":13,\"163\":5,\"164\":5,\"176\":3,\"177\":1,\"182\":13,\"183\":4,\"184\":2,\"191\":5,\"192\":8,\"197\":2,\"201\":10,\"202\":8,\"208\":3,\"209\":2,\"210\":1,\"211\":7,\"223\":5,\"228\":2,\"233\":4,\"235\":8,\"247\":6,\"248\":1,\"249\":3,\"250\":2,\"251\":2,\"252\":2,\"253\":1,\"259\":38,\"263\":16,\"271\":7,\"278\":3,\"279\":9,\"284\":1,\"286\":5,\"287\":2,\"296\":16,\"302\":2,\"303\":8,\"305\":4,\"306\":2,\"311\":3,\"312\":2,\"313\":11,\"314\":9,\"318\":14,\"319\":10,\"323\":9,\"324\":9,\"325\":12,\"332\":7,\"333\":5,\"334\":5,\"336\":1,\"337\":1,\"347\":1,\"353\":1,\"354\":2,\"355\":2,\"357\":2,\"364\":4,\"365\":3,\"374\":1,\"375\":1,\"376\":2,\"377\":2,\"389\":7}}],[\"=>\",{\"1\":{\"7\":3,\"8\":4,\"10\":1,\"12\":1,\"13\":3,\"15\":5,\"17\":3,\"18\":5,\"20\":4,\"26\":5,\"27\":4,\"28\":6,\"29\":3,\"35\":4,\"36\":5,\"37\":3,\"38\":4,\"40\":4,\"41\":9,\"42\":6,\"73\":1,\"78\":1,\"79\":2,\"80\":9,\"83\":1,\"107\":2,\"109\":1,\"110\":1,\"112\":1,\"154\":1,\"160\":5,\"161\":10,\"162\":5,\"163\":5,\"176\":3,\"177\":3,\"182\":15,\"183\":6,\"184\":5,\"191\":4,\"192\":6,\"197\":4,\"201\":2,\"208\":2,\"209\":2,\"210\":2,\"211\":1,\"223\":7,\"225\":2,\"226\":2,\"227\":2,\"228\":2,\"233\":3,\"235\":6,\"240\":1,\"247\":2,\"249\":1,\"250\":1,\"251\":2,\"252\":1,\"253\":2,\"271\":4,\"278\":1,\"279\":8,\"284\":3,\"286\":1,\"287\":1,\"296\":3,\"302\":1,\"303\":1,\"305\":4,\"313\":1,\"314\":1,\"318\":10,\"319\":14,\"323\":14,\"324\":13,\"325\":16,\"332\":5,\"333\":6,\"334\":3,\"336\":1,\"346\":1,\"350\":2,\"353\":2,\"354\":1,\"355\":1,\"364\":2,\"365\":3,\"375\":1,\"376\":2,\"377\":2,\"380\":2,\"389\":1,\"414\":2}}],[\"icon\",{\"1\":{\"343\":1,\"408\":3,\"409\":13,\"411\":5}}],[\"icon=\",{\"1\":{\"343\":1}}],[\"identifier\",{\"1\":{\"312\":2,\"314\":2}}],[\"identifierprefix\",{\"1\":{\"263\":1}}],[\"id\",{\"1\":{\"284\":2,\"286\":2,\"302\":3,\"312\":1,\"313\":2,\"314\":1,\"379\":1,\"380\":1}}],[\"idx\",{\"1\":{\"223\":3,\"225\":6,\"226\":6,\"227\":8,\"287\":2}}],[\"id=\",{\"1\":{\"92\":3,\"261\":3,\"349\":3,\"350\":1}}],[\"iteration\",{\"1\":{\"222\":1,\"223\":2,\"228\":1,\"389\":1}}],[\"item<\",{\"1\":{\"89\":10}}],[\"item\",{\"1\":{\"63\":2,\"162\":2,\"332\":2,\"379\":2,\"380\":1}}],[\"items\",{\"1\":{\"63\":1}}],[\"ip\",{\"1\":{\"119\":2}}],[\"ip的关系\",{\"1\":{\"119\":1}}],[\"ibm等\",{\"1\":{\"58\":1}}],[\"i\",{\"1\":{\"41\":1,\"112\":5,\"135\":4,\"182\":1,\"370\":2}}],[\"io\",{\"1\":{\"36\":1,\"338\":1,\"399\":1,\"403\":1,\"408\":1,\"415\":1}}],[\"issue\",{\"1\":{\"416\":1}}],[\"istimeline\",{\"1\":{\"408\":1}}],[\"isonline\",{\"1\":{\"319\":8}}],[\"is的浅比较\",{\"1\":{\"234\":1}}],[\"iszero\",{\"1\":{\"233\":2,\"235\":4}}],[\"isloading\",{\"1\":{\"177\":5}}],[\"is\",{\"1\":{\"26\":1,\"27\":1,\"28\":1,\"197\":1,\"233\":1,\"235\":1,\"311\":1,\"337\":1,\"415\":1}}],[\"ie=edge\",{\"1\":{\"15\":1}}],[\"if=\",{\"1\":{\"312\":1,\"314\":1,\"319\":1,\"323\":1,\"324\":1,\"325\":1,\"343\":1}}],[\"if\",{\"1\":{\"10\":2,\"15\":2,\"27\":1,\"28\":1,\"62\":3,\"80\":2,\"109\":1,\"110\":1,\"112\":2,\"143\":1,\"159\":1,\"161\":2,\"162\":1,\"163\":3,\"201\":5,\"202\":2,\"211\":3,\"287\":1,\"296\":5,\"302\":1,\"313\":1,\"314\":1,\"319\":1,\"332\":1,\"333\":1,\"346\":1}}],[\"imagemin\",{\"1\":{\"241\":1}}],[\"image\",{\"1\":{\"9\":1,\"14\":1,\"19\":1,\"54\":1,\"89\":1,\"90\":2,\"92\":2,\"97\":1,\"98\":1,\"102\":1,\"107\":1,\"109\":1,\"110\":1,\"130\":1,\"138\":1,\"139\":2,\"140\":3,\"143\":1,\"170\":1,\"171\":1,\"173\":1,\"182\":1,\"216\":1,\"241\":6,\"242\":2,\"243\":1,\"274\":1,\"283\":2,\"286\":1,\"288\":2,\"296\":2,\"303\":1,\"305\":1,\"306\":1,\"312\":1,\"384\":1,\"401\":1,\"402\":1,\"403\":1,\"404\":1,\"405\":1,\"407\":1,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"413\":1,\"414\":1,\"415\":2,\"416\":8}}],[\"import\",{\"1\":{\"8\":2,\"13\":2,\"18\":2,\"26\":2,\"28\":6,\"36\":1,\"64\":1,\"73\":1,\"74\":1,\"77\":3,\"78\":2,\"79\":2,\"80\":4,\"176\":2,\"177\":3,\"182\":2,\"192\":2,\"197\":1,\"211\":1,\"223\":2,\"233\":1,\"235\":1,\"241\":1,\"243\":1,\"247\":2,\"248\":1,\"249\":1,\"250\":1,\"278\":3,\"279\":7,\"296\":12,\"303\":1,\"305\":1,\"306\":1,\"311\":1,\"312\":1,\"314\":2,\"323\":2,\"324\":2,\"325\":2,\"333\":1,\"334\":2,\"336\":2,\"337\":2,\"343\":1,\"347\":2,\"349\":1,\"354\":1,\"355\":1,\"357\":2,\"371\":2,\"374\":1,\"379\":1,\"409\":3,\"411\":1,\"412\":1}}],[\"inject\",{\"1\":{\"364\":3,\"365\":2}}],[\"injectssrflagtohooks\",{\"1\":{\"303\":1}}],[\"inheritattrs属性控制子组件html属性上是否显示父组件的提供的属性\",{\"1\":{\"349\":1}}],[\"inheritattrs\",{\"0\":{\"349\":1},\"1\":{\"349\":1}}],[\"inheritattrs和$attrs\",{\"0\":{\"348\":1}}],[\"infinite\",{\"1\":{\"312\":1,\"314\":1,\"389\":2}}],[\"info\",{\"1\":{\"295\":1,\"296\":3,\"297\":2}}],[\"inlineconfig\",{\"1\":{\"303\":1}}],[\"includes\",{\"1\":{\"287\":1,\"333\":1}}],[\"includeslines\",{\"1\":{\"286\":1}}],[\"increase\",{\"1\":{\"161\":2}}],[\"increaseby\",{\"1\":{\"161\":1}}],[\"increment模拟点击事件\",{\"1\":{\"15\":1}}],[\"increment\",{\"1\":{\"8\":2,\"13\":2,\"15\":3,\"18\":2,\"182\":6,\"183\":4,\"251\":2}}],[\"indexcontent\",{\"1\":{\"414\":1}}],[\"indexof\",{\"1\":{\"286\":2,\"333\":1}}],[\"index=\",{\"1\":{\"223\":1,\"225\":2,\"226\":2,\"227\":4}}],[\"index\",{\"1\":{\"223\":4,\"228\":1,\"243\":1,\"259\":2,\"279\":1,\"306\":1,\"323\":1,\"324\":1,\"325\":1,\"389\":2,\"413\":1}}],[\"install\",{\"1\":{\"162\":4,\"279\":2,\"332\":1,\"333\":1,\"334\":1,\"407\":3}}],[\"instance\",{\"0\":{\"213\":1},\"1\":{\"159\":4,\"161\":4,\"211\":2,\"259\":2}}],[\"insert\",{\"1\":{\"28\":1,\"29\":1,\"211\":2}}],[\"invoker\",{\"1\":{\"153\":2,\"154\":7}}],[\"invalid\",{\"1\":{\"88\":1,\"90\":1}}],[\"intro\",{\"1\":{\"411\":1}}],[\"internal\",{\"1\":{\"211\":1}}],[\"interface\",{\"1\":{\"182\":2,\"223\":1,\"296\":1,\"313\":1,\"314\":1,\"323\":1,\"332\":1,\"374\":1}}],[\"interview\",{\"0\":{\"170\":1},\"1\":{\"170\":1}}],[\"interrupted\",{\"1\":{\"143\":1}}],[\"interruptedexception\",{\"1\":{\"143\":1}}],[\"integer\",{\"1\":{\"129\":1,\"130\":3}}],[\"int\",{\"1\":{\"130\":2,\"131\":2,\"133\":2,\"135\":7,\"143\":1}}],[\"input等原始的标签\",{\"1\":{\"259\":1}}],[\"inputref\",{\"1\":{\"253\":3}}],[\"input<\",{\"1\":{\"252\":1}}],[\"inputel\",{\"1\":{\"252\":3}}],[\"input\",{\"1\":{\"90\":1,\"303\":1}}],[\"inputmode=\",{\"0\":{\"90\":1},\"1\":{\"90\":2}}],[\"in<\",{\"1\":{\"62\":1}}],[\"in\",{\"1\":{\"49\":1,\"171\":1,\"223\":1,\"296\":1,\"387\":1,\"388\":1,\"389\":4,\"415\":1}}],[\"initparams\",{\"1\":{\"323\":3,\"325\":5}}],[\"init方法的大致逻辑是\",{\"1\":{\"214\":1}}],[\"init\",{\"0\":{\"214\":1},\"1\":{\"29\":2,\"159\":2,\"161\":2,\"211\":2,\"407\":2}}],[\"initialstate\",{\"1\":{\"191\":2,\"251\":2}}],[\"initial\",{\"1\":{\"15\":1}}],[\"initialvalue\",{\"1\":{\"7\":1}}],[\"时间轴\",{\"1\":{\"409\":1}}],[\"时\",{\"1\":{\"8\":1}}],[\"默认的文本不需要修改\",{\"1\":{\"416\":1}}],[\"默认的端口不是\",{\"1\":{\"305\":1}}],[\"默认根据目录下的文件自动生成侧边栏\",{\"1\":{\"412\":1}}],[\"默认主题案例\",{\"0\":{\"401\":1}}],[\"默认主题\",{\"1\":{\"400\":1}}],[\"默认会把父组件写在子组件的属性一起渲染出来\",{\"1\":{\"349\":1}}],[\"默认为字符串\",{\"1\":{\"409\":1}}],[\"默认为false\",{\"1\":{\"324\":1}}],[\"默认为none\",{\"1\":{\"222\":1}}],[\"默认功能\",{\"1\":{\"313\":1}}],[\"默认效果如下\",{\"1\":{\"296\":1}}],[\"默认最近三次的commit描述\",{\"1\":{\"296\":1}}],[\"默认是当前打包的时间点\",{\"1\":{\"296\":1}}],[\"默认比例8\",{\"1\":{\"140\":1}}],[\"默认插槽\",{\"0\":{\"68\":1}}],[\"默认\",{\"0\":{\"305\":1},\"1\":{\"7\":1,\"296\":6}}],[\"🎁\",{\"1\":{\"278\":1}}],[\"🎉一个demo体验vue3\",{\"0\":{\"368\":1}}],[\"🎉干货满满\",{\"0\":{\"256\":1,\"268\":1},\"1\":{\"196\":1,\"232\":2,\"257\":1,\"269\":1,\"274\":5,\"328\":2}}],[\"🎉react几个不常用\",{\"0\":{\"246\":1}}],[\"🎉react\",{\"1\":{\"186\":1}}],[\"🎉前端开发书籍推荐🎉\",{\"0\":{\"116\":1}}],[\"🎉尤雨溪为什么要推出vapor\",{\"1\":{\"55\":1,\"234\":1}}],[\"🎉\",{\"0\":{\"21\":1,\"54\":1,\"274\":1,\"307\":1,\"314\":1,\"381\":1,\"417\":1},\"1\":{\"186\":6,\"278\":2}}],[\"🎉solidjs响应式原理和简易实现🎉\",{\"0\":{\"3\":1},\"1\":{\"116\":1}}],[\"🍎\",{\"1\":{\"7\":3}}],[\"你只需添加仓库\",{\"1\":{\"415\":1}}],[\"你只需下载你喜欢的插件和配置文件即可\",{\"1\":{\"414\":1}}],[\"你只需要将inheritattrs的值指定为true\",{\"1\":{\"349\":1}}],[\"你的导航栏需求是啥样的\",{\"1\":{\"409\":1}}],[\"你想要创建什么类型的项目\",{\"1\":{\"407\":1}}],[\"你首先应该使用哪款主题作为你的个人完整风格\",{\"1\":{\"400\":1}}],[\"你喜欢哪个主题\",{\"0\":{\"400\":1}}],[\"你还需要手动关闭\",{\"1\":{\"360\":1}}],[\"你还可以给交错的列表增加点别的动画\",{\"1\":{\"227\":1}}],[\"你知道的组件名称\",{\"1\":{\"346\":1}}],[\"你也可以单独加上这样的基础动画\",{\"1\":{\"228\":1}}],[\"你肯定会问\",{\"1\":{\"215\":1}}],[\"你觉得可以按预期运行吗\",{\"1\":{\"197\":1}}],[\"你有几个系统级交互的\",{\"1\":{\"186\":1}}],[\"你一定看的懂这个功能\",{\"1\":{\"177\":1}}],[\"你会发现\",{\"1\":{\"360\":1}}],[\"你会发现里面居然是你曾经的神\",{\"1\":{\"26\":1}}],[\"你会欣赏到下面的小短文\",{\"0\":{\"155\":1}}],[\"你要一个空空\",{\"1\":{\"154\":1}}],[\"你选吧\",{\"1\":{\"154\":1,\"155\":1}}],[\"你稍等片刻\",{\"1\":{\"154\":1,\"155\":1}}],[\"你点的\",{\"1\":{\"154\":1,\"155\":3}}],[\"你再假装思索一下\",{\"1\":{\"126\":1}}],[\"你输入url浏览器发生了什么等热门面试题的答案\",{\"1\":{\"119\":1}}],[\"你将会了解到网络分层模型\",{\"1\":{\"119\":1}}],[\"你如果想单独定义一个边的类描述边信息\",{\"1\":{\"102\":1}}],[\"你可能习惯性的想在节点上标记每个节点相关边的信息\",{\"1\":{\"102\":1}}],[\"你可以修改\",{\"1\":{\"415\":1}}],[\"你可以设置侧边栏导航和导航栏的路由一一对应\",{\"1\":{\"411\":1}}],[\"你可以省略\",{\"1\":{\"409\":1}}],[\"你可以在每个\",{\"1\":{\"408\":1}}],[\"你可以在这里添加others\",{\"1\":{\"101\":1}}],[\"你可以有多个上述的挂载节点\",{\"1\":{\"261\":1}}],[\"你可以定义变量是否为响应式\",{\"1\":{\"7\":1}}],[\"你来打我\",{\"1\":{\"96\":1}}],[\"你到底想嘎哈\",{\"0\":{\"32\":1}}],[\"你到底爱谁\",{\"0\":{\"24\":1},\"1\":{\"4\":1,\"33\":1,\"55\":1}}],[\"你刚想抓住它\",{\"1\":{\"29\":1}}],[\"你爱慕着的\",{\"1\":{\"29\":1}}],[\"你才回过神来\",{\"1\":{\"29\":1}}],[\"你又想和它谈心\",{\"1\":{\"27\":1}}],[\"v4\",{\"1\":{\"415\":1}}],[\"v3\",{\"1\":{\"415\":1}}],[\"v2\",{\"1\":{\"409\":1}}],[\"vdoing\",{\"0\":{\"405\":1},\"1\":{\"400\":1}}],[\"vloading\",{\"1\":{\"313\":2,\"314\":1}}],[\"vnode\",{\"1\":{\"311\":12,\"312\":1,\"313\":11,\"314\":8}}],[\"v=$\",{\"1\":{\"306\":1}}],[\"verion\",{\"1\":{\"296\":6}}],[\"version\",{\"1\":{\"295\":1,\"296\":1,\"306\":1,\"415\":1}}],[\"verbose\",{\"1\":{\"241\":1}}],[\"vertexs\",{\"1\":{\"104\":1,\"105\":1,\"107\":1,\"112\":1}}],[\"vertexnumber\",{\"1\":{\"104\":1}}],[\"vertex\",{\"1\":{\"101\":1,\"105\":1,\"107\":3}}],[\"var\",{\"1\":{\"364\":2,\"365\":2}}],[\"vate\",{\"1\":{\"296\":1}}],[\"val\",{\"1\":{\"240\":2,\"377\":2}}],[\"valueof讲解则十分详细\",{\"1\":{\"118\":1}}],[\"value=\",{\"1\":{\"66\":1,\"92\":13,\"182\":1,\"233\":2,\"235\":4,\"250\":1}}],[\"value++\",{\"1\":{\"35\":1,\"40\":1,\"41\":1,\"208\":1}}],[\"value\",{\"1\":{\"10\":13,\"12\":1,\"15\":13,\"17\":1,\"20\":2,\"27\":3,\"35\":2,\"37\":2,\"40\":2,\"41\":4,\"42\":1,\"82\":1,\"88\":1,\"136\":1,\"161\":8,\"162\":6,\"176\":4,\"208\":1,\"233\":3,\"235\":3,\"250\":1,\"279\":3,\"313\":10,\"314\":9,\"318\":3,\"319\":3,\"323\":4,\"324\":3,\"325\":3,\"333\":3,\"334\":3,\"376\":2,\"377\":1}}],[\"vanilla\",{\"1\":{\"192\":5}}],[\"volar\",{\"0\":{\"372\":1}}],[\"volatile是轻量级的同步\",{\"1\":{\"143\":1}}],[\"void>\",{\"1\":{\"36\":1,\"38\":1}}],[\"void\",{\"1\":{\"12\":1,\"135\":4,\"143\":6,\"182\":3,\"201\":2,\"202\":2,\"319\":1,\"332\":4}}],[\"v8将此称为增量标记\",{\"1\":{\"139\":1}}],[\"v8引擎为javascript的gc做了分代回收\",{\"1\":{\"139\":1}}],[\"v8引擎\",{\"0\":{\"139\":1}}],[\"vs\",{\"0\":{\"50\":1}}],[\"views\",{\"1\":{\"182\":2}}],[\"view\",{\"1\":{\"182\":1}}],[\"viewport\",{\"1\":{\"15\":1}}],[\"visited\",{\"1\":{\"109\":2}}],[\"vite系列\",{\"1\":{\"409\":1,\"411\":1}}],[\"vite插件\",{\"0\":{\"289\":1}}],[\"vitejs\",{\"1\":{\"241\":1,\"296\":4,\"301\":2,\"371\":2}}],[\"vitecompression\",{\"1\":{\"241\":2}}],[\"vite\",{\"0\":{\"240\":1,\"301\":1,\"303\":1,\"423\":1},\"1\":{\"240\":5,\"241\":2,\"242\":2,\"243\":1,\"295\":1,\"296\":5,\"297\":2,\"301\":6,\"303\":4,\"304\":1,\"305\":1,\"307\":1,\"370\":1,\"371\":1,\"409\":1,\"411\":1,\"412\":1},\"2\":{\"45\":1,\"245\":1,\"292\":1,\"299\":1,\"309\":1}}],[\"vue系列\",{\"1\":{\"409\":1,\"411\":1}}],[\"vuejs\",{\"1\":{\"408\":1,\"409\":1}}],[\"vuepress\",{\"0\":{\"402\":1,\"403\":1,\"404\":1,\"405\":1},\"1\":{\"399\":2,\"400\":5,\"405\":2,\"407\":6,\"409\":3,\"411\":1,\"412\":1,\"415\":1,\"417\":2}}],[\"vue动画的原理是将一个完整的动画在编码拆分在每个阶段\",{\"1\":{\"392\":1}}],[\"vue动画之列表\",{\"1\":{\"385\":1}}],[\"vue动画介绍\",{\"1\":{\"385\":1}}],[\"vue的祖先\",{\"1\":{\"353\":1}}],[\"vue的家伙\",{\"1\":{\"353\":1}}],[\"vuecomponent\",{\"1\":{\"346\":3}}],[\"vue组件通信总结\",{\"0\":{\"341\":1},\"1\":{\"343\":1,\"345\":1}}],[\"vue2\",{\"1\":{\"311\":1}}],[\"vue会根据本次更新的vnode与上次更新做比较\",{\"1\":{\"210\":1}}],[\"vue3如何监听localstorage的变化\",{\"1\":{\"328\":1}}],[\"vue3优雅的监听localstorage变化\",{\"0\":{\"328\":1}}],[\"vue3使用hook封装常见的几种异步请求函数场景\",{\"0\":{\"322\":1}}],[\"vue3使用hook封装媒体查询和事件监听\",{\"0\":{\"317\":1}}],[\"vue3会为每个组件建立watcheffect事件\",{\"1\":{\"210\":1}}],[\"vue3经过编译之后返回的是组件的render函数\",{\"1\":{\"210\":1}}],[\"vue3\",{\"0\":{\"210\":1},\"1\":{\"368\":1,\"374\":1}}],[\"vue中组件通信接口有哪些\",{\"1\":{\"341\":1}}],[\"vue中\",{\"1\":{\"161\":1}}],[\"vue\",{\"0\":{\"424\":1},\"1\":{\"26\":1,\"80\":4,\"208\":1,\"240\":1,\"311\":4,\"312\":1,\"314\":2,\"323\":1,\"324\":1,\"325\":1,\"334\":1,\"336\":2,\"337\":2,\"343\":3,\"345\":1,\"346\":1,\"347\":5,\"349\":3,\"350\":5,\"353\":3,\"354\":2,\"355\":2,\"357\":7,\"358\":3,\"370\":4,\"371\":3,\"374\":3,\"375\":1,\"376\":2,\"377\":2,\"399\":1,\"401\":1,\"408\":1,\"409\":2,\"411\":2,\"412\":1},\"2\":{\"179\":1,\"316\":1,\"321\":1,\"327\":1,\"340\":1,\"367\":1,\"383\":1,\"398\":1,\"419\":1}}],[\"v\",{\"1\":{\"7\":1,\"12\":1,\"17\":1,\"312\":1,\"313\":4,\"314\":2,\"319\":2,\"323\":2,\"324\":2,\"325\":2,\"343\":1,\"350\":1,\"377\":2}}],[\"square\",{\"1\":{\"409\":4}}],[\"svg\",{\"1\":{\"408\":1}}],[\"svelte在编译阶段\",{\"1\":{\"214\":1}}],[\"svelte返回的值主要包括三块\",{\"1\":{\"211\":1}}],[\"sveltecomponent\",{\"0\":{\"214\":1},\"1\":{\"211\":2}}],[\"svelte经过编译之后的返回值如下\",{\"1\":{\"211\":1}}],[\"svelte被设计成编译时框架\",{\"1\":{\"84\":1}}],[\"svelte\",{\"0\":{\"211\":1},\"1\":{\"60\":2,\"64\":1,\"68\":2,\"69\":2,\"73\":1,\"74\":3,\"76\":3,\"77\":5,\"78\":4,\"79\":4,\"80\":6,\"208\":2,\"211\":1},\"2\":{\"86\":1}}],[\"svelte的体积更小\",{\"1\":{\"84\":1}}],[\"svelte的语法是基于html\",{\"1\":{\"60\":1}}],[\"svelte的api是基于声明式编程风格的\",{\"1\":{\"58\":1}}],[\"svelte框架的使用在近年来逐渐流行起来\",{\"1\":{\"58\":1}}],[\"svelte具有内置的响应式功能\",{\"1\":{\"58\":1}}],[\"svelte支持组件化开发\",{\"1\":{\"58\":1}}],[\"svelte作为后起之秀\",{\"1\":{\"58\":1}}],[\"svelte和vue都采用了模板语法方案做aot编译\",{\"1\":{\"52\":1}}],[\"svelte编译之后create\",{\"1\":{\"28\":1}}],[\"svelte原理和进阶看这篇就够了\",{\"1\":{\"24\":1}}],[\"ssr\",{\"1\":{\"303\":2}}],[\"ss\",{\"1\":{\"296\":1}}],[\"ss`\",{\"1\":{\"296\":2}}],[\"switch\",{\"1\":{\"251\":1,\"305\":1}}],[\"src|href\",{\"1\":{\"306\":1}}],[\"src\",{\"1\":{\"240\":3,\"357\":1,\"408\":1,\"409\":3,\"415\":1}}],[\"src=\",{\"1\":{\"15\":1,\"93\":1}}],[\"say\",{\"1\":{\"354\":1,\"355\":1}}],[\"sandbox\",{\"1\":{\"338\":1}}],[\"sangka\",{\"1\":{\"171\":1}}],[\"safe\",{\"1\":{\"211\":2}}],[\"slides\",{\"1\":{\"411\":1}}],[\"slice\",{\"1\":{\"192\":3,\"286\":2}}],[\"slots\",{\"1\":{\"311\":1}}],[\"slot\",{\"1\":{\"311\":1}}],[\"slot=\",{\"1\":{\"69\":1}}],[\"slot>\",{\"1\":{\"68\":1,\"69\":1}}],[\"splice\",{\"1\":{\"333\":1}}],[\"split\",{\"1\":{\"286\":1,\"296\":2}}],[\"span>\",{\"1\":{\"312\":1,\"314\":1}}],[\"space>\",{\"1\":{\"176\":1}}],[\"space\",{\"1\":{\"176\":1}}],[\"specific\",{\"1\":{\"301\":1}}],[\"specialskill\",{\"1\":{\"154\":4}}],[\"sidebar\",{\"1\":{\"410\":1,\"411\":2,\"412\":2}}],[\"size=\",{\"1\":{\"343\":1}}],[\"sibling\",{\"1\":{\"259\":2,\"271\":1}}],[\"singltron\",{\"1\":{\"159\":2}}],[\"singleton\",{\"1\":{\"159\":1}}],[\"sigal\",{\"1\":{\"35\":1,\"36\":2}}],[\"signaloptions\",{\"1\":{\"10\":3,\"15\":3}}],[\"sync\",{\"1\":{\"192\":3}}],[\"synchronized既可以修饰方法成为同步方法也可以包裹需要同步的代码块成为同步代码块\",{\"1\":{\"143\":1}}],[\"synchronized\",{\"1\":{\"143\":7}}],[\"system\",{\"1\":{\"129\":1,\"135\":2,\"143\":6}}],[\"s1\",{\"1\":{\"140\":1}}],[\"s0\",{\"1\":{\"140\":1}}],[\"shim\",{\"1\":{\"192\":2}}],[\"shift\",{\"1\":{\"110\":1,\"112\":1}}],[\"shasha\",{\"1\":{\"154\":2}}],[\"should\",{\"1\":{\"416\":1}}],[\"shoulddoubleinvokeuserfnsinhooksdev\",{\"1\":{\"201\":2}}],[\"short\",{\"1\":{\"131\":2,\"296\":2}}],[\"showgraoh\",{\"0\":{\"107\":1},\"1\":{\"107\":2}}],[\"show\",{\"1\":{\"80\":5}}],[\"sortuserplugins\",{\"1\":{\"303\":1}}],[\"something\",{\"1\":{\"284\":1}}],[\"source\",{\"1\":{\"106\":3,\"112\":3}}],[\"solid\",{\"1\":{\"7\":1,\"8\":2,\"13\":2,\"15\":1,\"18\":2,\"26\":2,\"28\":6,\"312\":1,\"314\":1}}],[\"solidjs也采用了jsx做aot编译\",{\"1\":{\"52\":1}}],[\"solidjs才是你那个\",{\"1\":{\"29\":1}}],[\"solidjs的发布订阅模式也是基于proxy的\",{\"1\":{\"27\":1}}],[\"solidjs源码学习过程总结\",{\"1\":{\"21\":1}}],[\"solidjs模板编译过程\",{\"1\":{\"21\":1}}],[\"solidjs响应式原理和简易实现\",{\"1\":{\"21\":1}}],[\"solidjs\",{\"0\":{\"24\":1},\"1\":{\"4\":2,\"33\":1,\"55\":1},\"2\":{\"23\":1,\"31\":1}}],[\"study\",{\"1\":{\"411\":1}}],[\"stop\",{\"1\":{\"138\":1}}],[\"store可以在\",{\"1\":{\"192\":1}}],[\"stores\",{\"1\":{\"182\":3}}],[\"store\",{\"0\":{\"78\":1},\"1\":{\"36\":2,\"38\":2,\"78\":1,\"183\":1,\"191\":6,\"192\":6,\"247\":7}}],[\"star\",{\"1\":{\"185\":1}}],[\"start=\",{\"1\":{\"89\":1}}],[\"start\",{\"1\":{\"89\":1,\"143\":2,\"283\":1}}],[\"state的值\",{\"1\":{\"271\":1}}],[\"statenode\",{\"1\":{\"259\":2}}],[\"stateslice\",{\"1\":{\"192\":3}}],[\"stateslice>\",{\"1\":{\"192\":1}}],[\"state\",{\"1\":{\"182\":4,\"183\":2,\"191\":7,\"192\":1,\"208\":1,\"222\":1,\"251\":5,\"271\":5}}],[\"static\",{\"1\":{\"135\":1}}],[\"structure\",{\"1\":{\"411\":6,\"412\":5}}],[\"strawberry\",{\"1\":{\"409\":1}}],[\"strategy\",{\"1\":{\"41\":2,\"42\":1,\"163\":10}}],[\"strict\",{\"1\":{\"303\":1}}],[\"string\",{\"1\":{\"129\":1,\"132\":2,\"135\":4,\"143\":2,\"259\":1,\"284\":3,\"296\":7,\"306\":1,\"311\":1,\"313\":1,\"314\":2,\"318\":1,\"323\":1,\"332\":4,\"333\":4,\"334\":4,\"374\":1,\"379\":1,\"380\":1}}],[\"str\",{\"1\":{\"129\":4}}],[\"step=\",{\"1\":{\"92\":1}}],[\"style=\",{\"1\":{\"233\":1,\"235\":1,\"313\":3,\"314\":1,\"323\":1,\"324\":1,\"325\":1}}],[\"styled\",{\"0\":{\"221\":1},\"1\":{\"186\":1,\"223\":6,\"228\":1}}],[\"style\",{\"1\":{\"82\":2,\"389\":5}}],[\"style>\",{\"1\":{\"60\":1,\"90\":1,\"312\":1,\"314\":1}}],[\"sex=\",{\"1\":{\"349\":2,\"350\":2}}],[\"sex\",{\"1\":{\"347\":1,\"349\":2,\"350\":4}}],[\"service\",{\"1\":{\"416\":1}}],[\"server\",{\"1\":{\"39\":1,\"241\":1,\"305\":6}}],[\"serialize\",{\"1\":{\"296\":2}}],[\"searchproplugin\",{\"1\":{\"414\":1}}],[\"search\",{\"1\":{\"250\":1,\"414\":1}}],[\"searchresults\",{\"1\":{\"250\":2}}],[\"section>\",{\"1\":{\"88\":1}}],[\"selector处理\",{\"1\":{\"192\":1}}],[\"selector\",{\"1\":{\"192\":5}}],[\"selectonfocus\",{\"1\":{\"83\":2}}],[\"select\",{\"1\":{\"83\":1,\"407\":2}}],[\"sender\",{\"1\":{\"79\":1}}],[\"setoffline\",{\"1\":{\"319\":2}}],[\"setonline\",{\"1\":{\"319\":2}}],[\"setup\",{\"1\":{\"314\":1,\"323\":1,\"324\":1,\"325\":1,\"337\":1,\"374\":2,\"375\":1,\"376\":2,\"377\":2,\"379\":1,\"415\":1}}],[\"setattribute\",{\"1\":{\"296\":7}}],[\"setdata\",{\"1\":{\"279\":2}}],[\"setgoods\",{\"1\":{\"278\":2}}],[\"setname\",{\"1\":{\"271\":2}}],[\"setquery\",{\"1\":{\"250\":2}}],[\"setstate\",{\"1\":{\"191\":5,\"192\":1,\"271\":1}}],[\"setitem\",{\"1\":{\"184\":1,\"333\":2,\"337\":1}}],[\"setting\",{\"1\":{\"408\":1}}],[\"settimeout\",{\"1\":{\"177\":1,\"313\":1,\"314\":1,\"319\":1,\"323\":1,\"324\":1,\"325\":1,\"354\":1,\"355\":1,\"365\":1,\"389\":1}}],[\"settooltipheight\",{\"1\":{\"249\":2}}],[\"setter\",{\"1\":{\"10\":3,\"15\":3}}],[\"setloading\",{\"1\":{\"177\":4}}],[\"setvalue\",{\"1\":{\"20\":2}}],[\"setcount\",{\"1\":{\"8\":3,\"13\":2,\"15\":2,\"18\":2,\"26\":2,\"27\":1,\"28\":2,\"143\":5,\"182\":6,\"184\":1,\"197\":2,\"208\":2,\"209\":2,\"233\":2,\"235\":3,\"271\":2,\"279\":2}}],[\"set\",{\"1\":{\"7\":1,\"15\":1,\"27\":1,\"28\":1,\"160\":2,\"161\":2,\"162\":1,\"182\":3,\"184\":4,\"191\":1,\"211\":2}}],[\"supported\",{\"1\":{\"415\":1}}],[\"super\",{\"1\":{\"211\":1,\"271\":1}}],[\"sunboy\",{\"1\":{\"300\":1,\"368\":1,\"381\":1}}],[\"suspense内置组件类型和一些别的情况下的特殊组件\",{\"1\":{\"271\":1}}],[\"suspense>\",{\"1\":{\"250\":1}}],[\"suspendedlanes\",{\"1\":{\"263\":1}}],[\"suspend\",{\"1\":{\"143\":1}}],[\"sudheerj\",{\"1\":{\"170\":1}}],[\"suject\",{\"1\":{\"160\":5}}],[\"subtreeflags\",{\"1\":{\"259\":2}}],[\"subscribewithselector\",{\"1\":{\"184\":1}}],[\"subscribe的返回值时取消订阅函数\",{\"1\":{\"183\":1}}],[\"subscribe3\",{\"1\":{\"162\":2}}],[\"subscribe2\",{\"1\":{\"162\":2}}],[\"subscribe1\",{\"1\":{\"162\":2}}],[\"subscribe\",{\"1\":{\"161\":5,\"162\":5,\"183\":1,\"191\":3,\"192\":2,\"247\":2,\"279\":1,\"332\":4,\"334\":1}}],[\"subscriber\",{\"1\":{\"15\":2}}],[\"subscribers\",{\"1\":{\"15\":3,\"27\":3}}],[\"sub\",{\"1\":{\"27\":2,\"279\":7,\"333\":4,\"334\":2}}],[\"sum\",{\"1\":{\"18\":3,\"20\":3}}],[\"sum自动加2\",{\"1\":{\"18\":1}}],[\"script\",{\"1\":{\"371\":1}}],[\"script>\",{\"1\":{\"15\":2,\"60\":1,\"64\":1,\"70\":1,\"72\":1,\"73\":1,\"74\":2,\"76\":2,\"77\":2,\"78\":2,\"79\":2,\"80\":3,\"83\":1,\"313\":1,\"314\":2,\"323\":1,\"324\":1,\"325\":1,\"337\":1,\"343\":2,\"345\":1,\"346\":1,\"347\":3,\"349\":2,\"350\":2,\"353\":3,\"354\":2,\"355\":2,\"358\":3,\"374\":2,\"375\":1,\"376\":2,\"377\":2,\"379\":1}}],[\"scroll2\",{\"1\":{\"319\":1}}],[\"scroll\",{\"1\":{\"319\":5}}],[\"scheme\",{\"1\":{\"318\":2}}],[\"scales\",{\"1\":{\"92\":2}}],[\"scale\",{\"1\":{\"92\":1,\"228\":8}}],[\"scale=1\",{\"1\":{\"15\":1}}],[\"s\",{\"1\":{\"10\":4,\"15\":4,\"296\":2}}],[\"pen\",{\"1\":{\"409\":4}}],[\"pendinglanes\",{\"1\":{\"263\":1}}],[\"pendingcontext\",{\"1\":{\"263\":1}}],[\"pendingchildren\",{\"1\":{\"263\":1}}],[\"pendingprops属性上存在children\",{\"1\":{\"271\":1}}],[\"pendingprops\",{\"1\":{\"259\":3}}],[\"persist\",{\"1\":{\"184\":1}}],[\"plain\",{\"1\":{\"241\":1}}],[\"play\",{\"1\":{\"222\":1}}],[\"playground\",{\"1\":{\"4\":1}}],[\"plugins\",{\"1\":{\"241\":1,\"296\":2,\"303\":7,\"371\":1,\"413\":1,\"414\":1,\"416\":1}}],[\"plugin\",{\"0\":{\"289\":1},\"1\":{\"241\":2,\"289\":2,\"295\":2,\"296\":5,\"297\":2,\"301\":2,\"303\":2,\"371\":1,\"414\":1}}],[\"p方法\",{\"1\":{\"212\":1}}],[\"posts\",{\"0\":{\"421\":1},\"1\":{\"409\":4,\"411\":1,\"412\":1}}],[\"postplugins\",{\"1\":{\"303\":2}}],[\"pointer\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"port\",{\"1\":{\"305\":10}}],[\"porcelain\",{\"1\":{\"286\":3}}],[\"polyfill等\",{\"1\":{\"208\":1}}],[\"pop\",{\"1\":{\"15\":1}}],[\"pingedlanes\",{\"1\":{\"263\":1}}],[\"pingcache\",{\"1\":{\"263\":1}}],[\"pi\",{\"1\":{\"136\":3}}],[\"python\",{\"1\":{\"125\":1}}],[\"python有brython等多种编译器编译代码为字节码\",{\"1\":{\"47\":1}}],[\"page\",{\"1\":{\"414\":4}}],[\"pages分支\",{\"1\":{\"415\":1}}],[\"pages\",{\"1\":{\"407\":1,\"415\":2}}],[\"padding\",{\"1\":{\"387\":2,\"388\":2,\"389\":6}}],[\"packages\",{\"1\":{\"407\":3}}],[\"package\",{\"1\":{\"289\":1,\"290\":1,\"295\":2,\"297\":1,\"407\":1,\"415\":1}}],[\"params\",{\"1\":{\"323\":11,\"324\":4,\"325\":14}}],[\"params>\",{\"1\":{\"323\":2,\"325\":2}}],[\"paragraph\",{\"1\":{\"311\":1}}],[\"paragraph>\",{\"1\":{\"176\":2}}],[\"parse\",{\"1\":{\"296\":2}}],[\"parent和\",{\"0\":{\"344\":1}}],[\"parent\",{\"1\":{\"74\":1,\"76\":1}}],[\"password\",{\"1\":{\"161\":1}}],[\"patch\",{\"1\":{\"210\":2}}],[\"patch是对比前后vnode变化的方法\",{\"1\":{\"210\":1}}],[\"patterns\",{\"1\":{\"171\":1,\"415\":1}}],[\"pattern=\",{\"1\":{\"90\":1}}],[\"paths\",{\"1\":{\"240\":1}}],[\"pathto\",{\"1\":{\"112\":2}}],[\"path\",{\"1\":{\"64\":1,\"112\":6,\"240\":1}}],[\"pause|resume\",{\"1\":{\"39\":1}}],[\"p>\",{\"1\":{\"36\":2,\"38\":1,\"68\":1,\"69\":1,\"72\":1,\"73\":1,\"74\":1,\"182\":2,\"183\":2}}],[\"p\",{\"0\":{\"344\":2},\"1\":{\"28\":1,\"211\":1,\"303\":2,\"311\":2,\"338\":1}}],[\"publish\",{\"1\":{\"161\":3,\"162\":4,\"279\":1,\"332\":4,\"333\":3}}],[\"public\",{\"1\":{\"135\":5,\"136\":1,\"143\":6,\"161\":1}}],[\"pubsub\",{\"1\":{\"161\":2}}],[\"pure\",{\"1\":{\"28\":1,\"209\":1}}],[\"push\",{\"1\":{\"15\":1,\"105\":1,\"106\":2,\"110\":2,\"112\":4,\"133\":1,\"154\":1,\"160\":1,\"302\":1,\"333\":1}}],[\"prefix\",{\"1\":{\"409\":2,\"411\":5}}],[\"prefers\",{\"1\":{\"318\":2}}],[\"press\",{\"1\":{\"408\":1,\"409\":1}}],[\"preserveentrysignatures\",{\"1\":{\"303\":1}}],[\"preplugins\",{\"1\":{\"303\":2}}],[\"pretty=\",{\"1\":{\"296\":2}}],[\"pre\",{\"1\":{\"284\":2}}],[\"prevvnode\",{\"1\":{\"311\":7}}],[\"prevdom\",{\"1\":{\"210\":1}}],[\"prevdeps\",{\"1\":{\"201\":2,\"202\":2}}],[\"prevstate\",{\"1\":{\"201\":3,\"202\":3}}],[\"previousvalues\",{\"1\":{\"73\":3}}],[\"prev\",{\"1\":{\"7\":1,\"17\":1}}],[\"private\",{\"1\":{\"143\":3}}],[\"println\",{\"1\":{\"129\":1,\"135\":2,\"143\":6}}],[\"printminpathto\",{\"1\":{\"112\":1,\"113\":1}}],[\"prim\",{\"0\":{\"100\":1}}],[\"primary\",{\"1\":{\"92\":1,\"176\":2}}],[\"primitive的响应式主要包括signal\",{\"1\":{\"27\":1}}],[\"pro插件\",{\"1\":{\"414\":1}}],[\"projects\",{\"1\":{\"408\":1}}],[\"project\",{\"1\":{\"407\":1}}],[\"proceed\",{\"1\":{\"407\":3}}],[\"process\",{\"1\":{\"296\":2}}],[\"process子进程运行git命令\",{\"1\":{\"286\":1}}],[\"provide也可以是个函数\",{\"1\":{\"364\":1}}],[\"provide\",{\"1\":{\"364\":1,\"365\":1}}],[\"provide和inject\",{\"0\":{\"363\":1}}],[\"provider>\",{\"1\":{\"182\":1}}],[\"provider\",{\"1\":{\"182\":1,\"364\":1,\"365\":1,\"416\":1}}],[\"provider数据\",{\"1\":{\"38\":1}}],[\"prototype\",{\"1\":{\"357\":1}}],[\"prop\",{\"1\":{\"343\":1}}],[\"propsdestructure\",{\"1\":{\"371\":1}}],[\"props最常见的父子通信接口\",{\"1\":{\"343\":1}}],[\"props和$emit\",{\"0\":{\"343\":1}}],[\"props>\",{\"1\":{\"313\":2,\"314\":1}}],[\"props变化频繁\",{\"1\":{\"236\":1}}],[\"props\",{\"0\":{\"76\":1,\"375\":1},\"1\":{\"101\":1,\"177\":2,\"210\":1,\"223\":12,\"228\":5,\"253\":2,\"278\":1,\"311\":1,\"312\":4,\"313\":5,\"314\":3,\"343\":1,\"350\":2,\"380\":2}}],[\"promise<unknown>\",{\"1\":{\"323\":1}}],[\"promise<t>\",{\"1\":{\"323\":4,\"324\":5,\"325\":3}}],[\"promise\",{\"1\":{\"305\":1,\"323\":2,\"324\":2,\"325\":2}}],[\"production\",{\"1\":{\"303\":2}}],[\"png\",{\"1\":{\"9\":1,\"14\":1,\"19\":1,\"54\":1,\"89\":1,\"90\":2,\"92\":2,\"97\":1,\"98\":1,\"102\":1,\"107\":1,\"109\":1,\"110\":1,\"130\":1,\"138\":1,\"139\":2,\"140\":3,\"143\":1,\"170\":1,\"171\":1,\"173\":2,\"182\":1,\"216\":1,\"241\":6,\"242\":2,\"243\":1,\"274\":1,\"283\":2,\"286\":1,\"288\":2,\"296\":2,\"303\":1,\"305\":1,\"306\":1,\"312\":1,\"384\":1,\"401\":1,\"402\":1,\"403\":1,\"404\":1,\"405\":1,\"407\":1,\"408\":2,\"409\":2,\"411\":1,\"412\":1,\"413\":1,\"414\":1,\"415\":2,\"416\":8}}],[\"||\",{\"1\":{\"10\":1,\"15\":1,\"39\":2,\"192\":1,\"210\":1,\"303\":1}}],[\"|\",{\"1\":{\"7\":1,\"17\":1,\"39\":1,\"182\":1,\"201\":5,\"202\":5,\"259\":1,\"286\":2,\"287\":1,\"296\":3,\"311\":4,\"313\":5,\"314\":4,\"376\":1,\"379\":1}}],[\"features\",{\"0\":{\"372\":1}}],[\"fetchfn\",{\"1\":{\"324\":1}}],[\"fetch\",{\"1\":{\"323\":4,\"324\":3}}],[\"fetch<t>\",{\"1\":{\"323\":4,\"324\":3,\"325\":3}}],[\"fcp\",{\"1\":{\"242\":1}}],[\"fc\",{\"1\":{\"182\":5,\"183\":2}}],[\"flags\",{\"1\":{\"259\":2}}],[\"flux\",{\"1\":{\"182\":3}}],[\"float\",{\"1\":{\"136\":2}}],[\"f9427c\",{\"1\":{\"92\":1}}],[\"folder\",{\"1\":{\"415\":1}}],[\"following\",{\"1\":{\"407\":3}}],[\"found\",{\"1\":{\"415\":1}}],[\"footer\",{\"1\":{\"408\":2}}],[\"foo\",{\"1\":{\"364\":8,\"365\":8}}],[\"focus\",{\"1\":{\"83\":1,\"252\":1,\"253\":2}}],[\"for列表\",{\"0\":{\"384\":1}}],[\"forwardref\",{\"1\":{\"278\":2}}],[\"forwards\",{\"1\":{\"222\":1,\"223\":2,\"228\":1}}],[\"formatter\",{\"1\":{\"414\":2}}],[\"formatoption\",{\"1\":{\"313\":4,\"314\":3}}],[\"format\",{\"1\":{\"296\":2}}],[\"form>\",{\"1\":{\"278\":1}}],[\"form\",{\"1\":{\"278\":1}}],[\"for\",{\"1\":{\"27\":1,\"112\":1,\"302\":1}}],[\"foreach\",{\"1\":{\"15\":1,\"107\":2,\"109\":1,\"110\":1,\"112\":1,\"191\":1,\"346\":1}}],[\"fancyinput\",{\"1\":{\"253\":1}}],[\"fallback=\",{\"1\":{\"250\":1}}],[\"false将文章在列表中排除\",{\"1\":{\"408\":1}}],[\"false\",{\"1\":{\"7\":1,\"10\":1,\"15\":1,\"17\":1,\"105\":1,\"132\":5,\"133\":1,\"136\":1,\"177\":1,\"211\":1,\"241\":2,\"303\":2,\"312\":1,\"313\":5,\"314\":4,\"319\":1,\"323\":1,\"324\":2,\"325\":1,\"408\":3}}],[\"fac642\",{\"1\":{\"92\":1}}],[\"father\",{\"1\":{\"80\":11,\"343\":1,\"346\":1,\"347\":2,\"349\":4,\"350\":3,\"354\":1,\"355\":1}}],[\"framework\",{\"0\":{\"420\":1},\"1\":{\"409\":1,\"411\":1,\"412\":1}}],[\"fragment\",{\"0\":{\"212\":1},\"1\":{\"211\":2}}],[\"fragment返回的p方法\",{\"1\":{\"28\":1}}],[\"frontmatter\",{\"1\":{\"408\":2,\"414\":2}}],[\"from区存活下来的变量年龄阈值\",{\"1\":{\"140\":1}}],[\"from\",{\"1\":{\"8\":2,\"13\":2,\"18\":2,\"26\":2,\"28\":6,\"36\":1,\"64\":1,\"73\":1,\"74\":1,\"77\":3,\"78\":2,\"79\":2,\"80\":4,\"176\":2,\"177\":3,\"182\":2,\"184\":5,\"192\":5,\"197\":1,\"211\":1,\"223\":2,\"233\":1,\"235\":1,\"241\":1,\"247\":2,\"248\":1,\"249\":1,\"250\":1,\"278\":3,\"279\":7,\"296\":12,\"305\":1,\"306\":1,\"311\":1,\"312\":1,\"314\":2,\"323\":2,\"324\":2,\"325\":2,\"333\":1,\"334\":2,\"336\":2,\"337\":2,\"343\":1,\"347\":2,\"349\":1,\"354\":1,\"355\":1,\"357\":2,\"364\":1,\"371\":2,\"374\":1,\"379\":1,\"387\":1,\"388\":1,\"389\":2,\"409\":3,\"411\":1,\"412\":1}}],[\"file\",{\"1\":{\"415\":2}}],[\"files\",{\"1\":{\"303\":1}}],[\"filepath\",{\"1\":{\"286\":1}}],[\"filterplugin\",{\"1\":{\"303\":1}}],[\"filter\",{\"1\":{\"247\":1,\"286\":1,\"303\":1}}],[\"fill\",{\"1\":{\"222\":2,\"223\":3,\"225\":1,\"226\":1,\"227\":1,\"228\":1}}],[\"finishedlanes\",{\"1\":{\"263\":1}}],[\"finishedwork\",{\"1\":{\"263\":1}}],[\"find\",{\"1\":{\"240\":1}}],[\"finally\",{\"1\":{\"15\":1,\"323\":1,\"324\":1,\"325\":1}}],[\"firbe\",{\"0\":{\"217\":1}}],[\"firstchild\",{\"1\":{\"28\":1,\"29\":1}}],[\"fish\",{\"1\":{\"135\":5}}],[\"fiberrootnode的current属性指向workinprogress\",{\"1\":{\"272\":1}}],[\"fiberrootnode的实例fiberroot是应用根节点的数据单元\",{\"1\":{\"265\":1}}],[\"fiberrootnode是createfiberroot的返回值类型\",{\"1\":{\"264\":1}}],[\"fiberrootnode是单例对象\",{\"1\":{\"263\":1}}],[\"fiberrootnode和hootrootfiber是一一对应的关系\",{\"1\":{\"263\":1}}],[\"fiberrootnode表示应用根节点\",{\"1\":{\"263\":1}}],[\"fiberrootnode\",{\"0\":{\"263\":1,\"264\":1},\"1\":{\"263\":1}}],[\"fibernode扮演多种角色时\",{\"1\":{\"270\":1}}],[\"fibernode实例fiber既是fiber\",{\"1\":{\"265\":1}}],[\"fibernode是fiber\",{\"1\":{\"260\":1}}],[\"fibernode是个构造函数\",{\"1\":{\"259\":1}}],[\"fibernode对应的元素\",{\"1\":{\"259\":1}}],[\"fibernode在react中通常有三种不同的身份\",{\"1\":{\"259\":1}}],[\"fibernode\",{\"0\":{\"259\":1,\"260\":1},\"1\":{\"259\":1}}],[\"fiber架构主要的工作是创建fiber\",{\"1\":{\"258\":1}}],[\"fiber\",{\"0\":{\"258\":1},\"1\":{\"259\":2,\"263\":4,\"271\":1}}],[\"fibonacci\",{\"1\":{\"26\":1,\"28\":1}}],[\"fib\",{\"1\":{\"26\":3,\"27\":1,\"28\":3}}],[\"fn的描述方式不同\",{\"1\":{\"208\":1}}],[\"fn就是计算数据的变动导致ui是如何变化的\",{\"1\":{\"208\":1}}],[\"fn\",{\"1\":{\"12\":1,\"17\":1,\"319\":2,\"323\":5,\"324\":5,\"325\":5}}],[\"function等\",{\"1\":{\"259\":1}}],[\"function\",{\"1\":{\"7\":1,\"8\":1,\"10\":4,\"12\":1,\"13\":1,\"15\":5,\"17\":1,\"18\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"36\":1,\"38\":1,\"70\":1,\"79\":2,\"83\":1,\"159\":3,\"161\":3,\"162\":4,\"191\":4,\"192\":2,\"197\":1,\"201\":2,\"202\":2,\"210\":1,\"211\":2,\"222\":1,\"233\":1,\"235\":1,\"248\":1,\"249\":1,\"250\":1,\"251\":2,\"252\":1,\"253\":1,\"259\":2,\"263\":1,\"271\":1,\"278\":3,\"302\":3,\"303\":2,\"305\":2,\"306\":1,\"311\":1,\"313\":4,\"314\":3,\"323\":1,\"324\":1,\"325\":1,\"332\":4}}],[\"two\",{\"1\":{\"337\":1,\"389\":1}}],[\"t类型无法赋值给unwrapref<t>类型\",{\"1\":{\"323\":1}}],[\"tbt\",{\"1\":{\"242\":1}}],[\"ts即可\",{\"1\":{\"416\":1}}],[\"ts中添加如下设置\",{\"1\":{\"413\":1}}],[\"ts中\",{\"1\":{\"410\":1}}],[\"ts文件中\",{\"1\":{\"409\":1}}],[\"tsconfig\",{\"1\":{\"240\":1}}],[\"tsx\",{\"1\":{\"240\":1}}],[\"tstate\",{\"1\":{\"192\":1}}],[\"ts\",{\"1\":{\"184\":5,\"192\":3,\"240\":6,\"303\":2,\"314\":2,\"323\":1,\"324\":1,\"325\":1,\"332\":1,\"333\":1,\"334\":1,\"337\":1,\"370\":1,\"374\":2,\"375\":1,\"376\":2,\"377\":2,\"379\":1}}],[\"typography\",{\"1\":{\"176\":2}}],[\"types\",{\"1\":{\"241\":1,\"379\":1}}],[\"typescript\",{\"1\":{\"174\":1}}],[\"type\",{\"1\":{\"36\":2,\"38\":1,\"251\":3,\"259\":2,\"311\":1,\"379\":1}}],[\"typeofmode\",{\"1\":{\"259\":1}}],[\"typeof\",{\"1\":{\"10\":1,\"15\":1,\"192\":1,\"313\":2,\"314\":2}}],[\"type=\",{\"0\":{\"90\":1},\"1\":{\"8\":3,\"13\":1,\"18\":1,\"66\":1,\"83\":1,\"90\":2,\"92\":3,\"176\":2,\"252\":1,\"278\":1,\"337\":1}}],[\"tool\",{\"1\":{\"409\":1,\"411\":1}}],[\"tooltipheight\",{\"1\":{\"249\":1}}],[\"tooltip\",{\"1\":{\"249\":1}}],[\"tomato\",{\"1\":{\"409\":1}}],[\"to\",{\"1\":{\"228\":1,\"387\":1,\"388\":1,\"389\":2,\"407\":8,\"409\":4}}],[\"tobottom\",{\"1\":{\"227\":1}}],[\"top也可以实现这个动画\",{\"1\":{\"387\":1}}],[\"top为100\",{\"1\":{\"387\":1}}],[\"toptobottom>\",{\"1\":{\"226\":1}}],[\"top\",{\"1\":{\"226\":1,\"227\":1,\"312\":1,\"314\":1,\"387\":2,\"389\":2}}],[\"topics\",{\"1\":{\"161\":6,\"162\":6,\"332\":6}}],[\"topic\",{\"1\":{\"161\":8,\"162\":7,\"279\":4,\"332\":9}}],[\"todisplaystring\",{\"1\":{\"210\":1}}],[\"todo\",{\"1\":{\"92\":1,\"284\":1,\"343\":1,\"346\":1,\"358\":1}}],[\"tostring\",{\"1\":{\"107\":1,\"129\":2,\"130\":2,\"233\":2,\"235\":2,\"296\":2}}],[\"tagline\",{\"1\":{\"408\":1}}],[\"tagname\",{\"1\":{\"259\":1}}],[\"tag>\",{\"1\":{\"176\":1}}],[\"tag\",{\"1\":{\"176\":1,\"259\":5,\"263\":3,\"405\":1,\"408\":1,\"409\":2,\"414\":1}}],[\"target\",{\"1\":{\"106\":3,\"211\":2,\"250\":1,\"319\":3}}],[\"taskvis\",{\"1\":{\"41\":1}}],[\"task\",{\"1\":{\"40\":1}}],[\"tips\",{\"1\":{\"396\":1}}],[\"tiny\",{\"1\":{\"330\":1}}],[\"timing\",{\"1\":{\"222\":1}}],[\"timeline\",{\"1\":{\"409\":1}}],[\"timeout\",{\"1\":{\"319\":1}}],[\"timer\",{\"1\":{\"319\":4}}],[\"times\",{\"1\":{\"70\":1}}],[\"time\",{\"1\":{\"49\":2,\"70\":1,\"409\":1}}],[\"title=\",{\"1\":{\"68\":1,\"69\":1,\"176\":1}}],[\"title\",{\"1\":{\"68\":1,\"69\":1,\"408\":2}}],[\"title>\",{\"1\":{\"15\":1}}],[\"testmsg\",{\"1\":{\"354\":1,\"355\":1}}],[\"testmeg\",{\"1\":{\"354\":3,\"355\":5}}],[\"test\",{\"1\":{\"296\":1}}],[\"testcomponent\",{\"1\":{\"176\":1}}],[\"test3\",{\"1\":{\"92\":1}}],[\"test2\",{\"1\":{\"92\":1}}],[\"test1\",{\"1\":{\"92\":1}}],[\"textinputwithfocusbutton\",{\"1\":{\"252\":1}}],[\"text\",{\"1\":{\"66\":1,\"83\":1,\"90\":1,\"92\":1,\"210\":1,\"211\":2,\"241\":4,\"252\":1,\"409\":13,\"411\":5}}],[\"textcontent\",{\"1\":{\"29\":1}}],[\"template>\",{\"1\":{\"312\":1,\"313\":3,\"314\":2,\"323\":1,\"324\":1,\"325\":1,\"337\":1,\"343\":2,\"347\":2,\"349\":1,\"350\":3,\"354\":1,\"355\":1,\"374\":2,\"376\":1,\"377\":2}}],[\"template\",{\"1\":{\"28\":1,\"240\":1,\"365\":1,\"370\":1}}],[\"t1\",{\"1\":{\"28\":1}}],[\"trim\",{\"1\":{\"296\":4}}],[\"trigger\",{\"1\":{\"161\":1}}],[\"tree渲染到页面\",{\"1\":{\"272\":1}}],[\"tree节点创建不同的数据结构\",{\"1\":{\"271\":1}}],[\"tree示意图如下\",{\"1\":{\"271\":1}}],[\"tree由多个fibernode节点组成的树状链表结构的数据\",{\"1\":{\"271\":1}}],[\"tree的基本数据结构单元\",{\"1\":{\"265\":1}}],[\"tree最小单元\",{\"1\":{\"260\":1}}],[\"tree\",{\"1\":{\"258\":1,\"259\":1,\"272\":3}}],[\"transition\",{\"1\":{\"389\":1}}],[\"translate属性\",{\"1\":{\"228\":1}}],[\"translatey组合\",{\"1\":{\"228\":1}}],[\"translatey\",{\"1\":{\"223\":9,\"228\":1}}],[\"transformindexhtml\",{\"1\":{\"296\":3,\"306\":1}}],[\"transform\",{\"1\":{\"223\":9,\"228\":4,\"284\":2,\"312\":2,\"314\":2}}],[\"track\",{\"1\":{\"35\":2,\"37\":2,\"40\":2,\"41\":4,\"42\":2}}],[\"true\",{\"0\":{\"91\":1},\"1\":{\"28\":1,\"80\":1,\"91\":2,\"109\":1,\"110\":2,\"112\":2,\"132\":3,\"143\":1,\"159\":1,\"177\":2,\"211\":1,\"241\":1,\"296\":6,\"312\":1,\"313\":4,\"314\":1,\"319\":1,\"323\":2,\"324\":1,\"325\":2,\"349\":1,\"371\":2,\"408\":1,\"413\":1,\"414\":1}}],[\"try\",{\"1\":{\"15\":1,\"143\":1}}],[\"tmpl$\",{\"1\":{\"28\":2}}],[\"throw\",{\"1\":{\"251\":1}}],[\"threshold\",{\"1\":{\"241\":1}}],[\"threadname\",{\"1\":{\"143\":9}}],[\"thread\",{\"1\":{\"143\":3}}],[\"threadtest\",{\"1\":{\"143\":2}}],[\"threadlock\",{\"1\":{\"143\":1}}],[\"thymeleaf等模板是基于后端语言的模板\",{\"1\":{\"48\":1}}],[\"thinkphp\",{\"1\":{\"48\":1}}],[\"this\",{\"1\":{\"10\":1,\"15\":2,\"36\":3,\"38\":3,\"101\":1,\"104\":3,\"105\":3,\"106\":2,\"107\":2,\"109\":4,\"110\":4,\"112\":11,\"135\":10,\"143\":5,\"154\":9,\"160\":9,\"161\":12,\"162\":2,\"163\":3,\"164\":7,\"211\":1,\"259\":39,\"263\":17,\"271\":9,\"311\":1,\"319\":1,\"343\":1,\"345\":3,\"346\":2,\"347\":3,\"350\":2,\"353\":5,\"354\":3,\"355\":4,\"358\":7,\"364\":1,\"365\":4}}],[\"then\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"they\",{\"1\":{\"201\":1}}],[\"these\",{\"1\":{\"201\":1}}],[\"thememedia\",{\"1\":{\"318\":9}}],[\"theme\",{\"0\":{\"168\":1,\"399\":1,\"402\":1,\"403\":1,\"404\":1,\"405\":1},\"1\":{\"77\":4,\"318\":9,\"400\":3,\"405\":2,\"407\":6,\"408\":1,\"409\":4,\"411\":1,\"412\":1,\"416\":1,\"417\":2}}],[\"the\",{\"1\":{\"26\":1,\"27\":1,\"28\":1,\"138\":1,\"252\":1,\"407\":3}}],[\"t\",{\"0\":{\"344\":2},\"1\":{\"7\":6,\"12\":3,\"17\":6,\"143\":4,\"201\":4,\"202\":4,\"211\":4,\"323\":1,\"379\":2}}],[\"customfields\",{\"1\":{\"414\":1}}],[\"current和workinprogress的循环往替更新\",{\"1\":{\"273\":1}}],[\"current\",{\"1\":{\"249\":1,\"252\":1,\"253\":1,\"263\":1,\"278\":1}}],[\"currenttheme\",{\"1\":{\"77\":2}}],[\"currentvalues\",{\"1\":{\"73\":3}}],[\"curr\",{\"1\":{\"15\":3,\"279\":2}}],[\"cconst\",{\"1\":{\"312\":1}}],[\"crypto\",{\"1\":{\"306\":1}}],[\"createmediator\",{\"1\":{\"333\":2,\"334\":2}}],[\"creatememo和createeffect会自动收集依赖项\",{\"1\":{\"27\":1}}],[\"creatememo<t>\",{\"1\":{\"17\":1}}],[\"creatememo通常用来做派生变量保存基于某个状态中间值\",{\"1\":{\"17\":1}}],[\"creatememo\",{\"0\":{\"16\":1},\"1\":{\"18\":2,\"20\":2,\"26\":2,\"27\":1,\"28\":2}}],[\"created\",{\"1\":{\"311\":1,\"345\":1,\"346\":1,\"364\":1,\"365\":1}}],[\"createhash\",{\"1\":{\"306\":2}}],[\"createhandle\",{\"1\":{\"278\":1}}],[\"createlanemap\",{\"1\":{\"263\":1}}],[\"create元素div的操作\",{\"1\":{\"212\":1}}],[\"createimpl\",{\"1\":{\"192\":4}}],[\"createserver\",{\"1\":{\"305\":1}}],[\"createstate\",{\"1\":{\"192\":7}}],[\"createstore\",{\"1\":{\"192\":4}}],[\"createstoreimpl\",{\"1\":{\"191\":2}}],[\"createsignal简化后的逻辑如下\",{\"1\":{\"9\":1}}],[\"createsignal<t>\",{\"1\":{\"7\":1}}],[\"createsignal\",{\"0\":{\"6\":1},\"1\":{\"8\":2,\"10\":1,\"13\":2,\"15\":2,\"18\":2,\"20\":1,\"26\":2,\"27\":2,\"28\":2}}],[\"create\",{\"0\":{\"212\":1},\"1\":{\"182\":2,\"184\":1,\"192\":2,\"211\":2,\"240\":1,\"370\":1,\"407\":3}}],[\"createelementblock\",{\"1\":{\"210\":1}}],[\"createelement\",{\"1\":{\"209\":1,\"311\":1}}],[\"createeventdispatcher\",{\"1\":{\"79\":2}}],[\"createeffect<t>\",{\"1\":{\"12\":1}}],[\"createeffect接受一个副作用函数\",{\"1\":{\"12\":1}}],[\"createeffect\",{\"0\":{\"11\":1},\"1\":{\"13\":2,\"15\":2,\"18\":3,\"20\":2,\"26\":2,\"27\":1,\"28\":2}}],[\"createcontext<countcontextprops\",{\"1\":{\"182\":1}}],[\"createcontext\",{\"1\":{\"77\":2,\"182\":2}}],[\"createcontextid<store>\",{\"1\":{\"38\":1}}],[\"createcomponent\",{\"1\":{\"28\":1}}],[\"createroot\",{\"1\":{\"29\":1,\"271\":1}}],[\"cd\",{\"1\":{\"240\":1,\"370\":1}}],[\"cicd\",{\"1\":{\"415\":1}}],[\"circle\",{\"1\":{\"343\":1}}],[\"ci\",{\"1\":{\"240\":1}}],[\"css动画属性animation\",{\"1\":{\"385\":1}}],[\"css过度属性transition\",{\"1\":{\"385\":1}}],[\"css\",{\"1\":{\"223\":1,\"241\":1}}],[\"css和javascript的\",{\"1\":{\"60\":1}}],[\"c方法\",{\"1\":{\"212\":1}}],[\"cn\",{\"1\":{\"171\":1,\"172\":1,\"173\":1,\"301\":2,\"416\":1}}],[\"cyan\",{\"0\":{\"168\":1}}],[\"cpu上下文切换消耗很大\",{\"1\":{\"143\":1}}],[\"c\",{\"1\":{\"131\":2,\"211\":1}}],[\"cheatsheets\",{\"1\":{\"174\":1}}],[\"chanmufeng\",{\"1\":{\"402\":1}}],[\"change=\",{\"1\":{\"376\":1}}],[\"change\",{\"1\":{\"318\":4,\"325\":1,\"376\":2}}],[\"changed\",{\"1\":{\"191\":1}}],[\"channing\",{\"0\":{\"168\":1}}],[\"channer\",{\"1\":{\"161\":1}}],[\"charset=\",{\"1\":{\"15\":1}}],[\"chrome内核浏览器\",{\"1\":{\"139\":1}}],[\"child1\",{\"1\":{\"347\":3,\"354\":3,\"355\":3}}],[\"childprocess\",{\"1\":{\"286\":2,\"296\":7}}],[\"childlanes\",{\"1\":{\"259\":2}}],[\"children2\",{\"1\":{\"353\":1,\"358\":2}}],[\"children1\",{\"1\":{\"353\":1,\"358\":1}}],[\"children的缺点是无法确定子组件的顺序\",{\"1\":{\"347\":1}}],[\"children或者$refs\",{\"0\":{\"344\":1}}],[\"children\",{\"1\":{\"80\":2,\"182\":2,\"311\":2,\"313\":2,\"314\":1,\"343\":4,\"345\":1,\"347\":5,\"349\":3,\"350\":2,\"354\":1,\"355\":1,\"409\":2,\"411\":5}}],[\"child\",{\"1\":{\"38\":1,\"74\":3,\"76\":1,\"80\":9,\"233\":1,\"235\":1,\"259\":2,\"271\":1,\"278\":4,\"279\":4,\"296\":2,\"350\":1,\"364\":3,\"374\":1,\"375\":1,\"376\":1,\"377\":1}}],[\"case\",{\"1\":{\"251\":2}}],[\"cache\",{\"1\":{\"210\":3,\"303\":1,\"415\":2}}],[\"calss\",{\"1\":{\"311\":1}}],[\"callbacknode\",{\"1\":{\"263\":1}}],[\"callback\",{\"1\":{\"162\":4,\"163\":2,\"199\":1,\"202\":6,\"323\":3,\"324\":2,\"325\":3,\"332\":5}}],[\"call\",{\"1\":{\"135\":4}}],[\"calculating\",{\"1\":{\"26\":1,\"28\":1}}],[\"categoryid\",{\"1\":{\"416\":1}}],[\"categoryselected\",{\"1\":{\"409\":1}}],[\"category\",{\"1\":{\"408\":1,\"409\":1,\"414\":1,\"416\":1}}],[\"catch\",{\"1\":{\"143\":1,\"323\":1,\"324\":1,\"325\":1}}],[\"cat\",{\"1\":{\"135\":8}}],[\"capitalizedname\",{\"1\":{\"37\":2}}],[\"ctx\",{\"1\":{\"28\":2,\"210\":3,\"211\":5}}],[\"closebtn\",{\"1\":{\"343\":1}}],[\"closechildren\",{\"1\":{\"343\":2}}],[\"close=\",{\"1\":{\"343\":1}}],[\"close\",{\"1\":{\"305\":1,\"343\":5}}],[\"clonenode\",{\"1\":{\"28\":1}}],[\"cleartimeout\",{\"1\":{\"319\":1}}],[\"clear\",{\"1\":{\"191\":1,\"333\":2}}],[\"cleanup\",{\"1\":{\"41\":3,\"42\":4}}],[\"client\",{\"1\":{\"153\":2,\"154\":1}}],[\"click=\",{\"1\":{\"62\":1,\"65\":1,\"70\":1,\"78\":1,\"79\":1,\"80\":1,\"161\":1,\"208\":2,\"323\":1,\"324\":1,\"325\":1,\"337\":1,\"343\":1,\"374\":1}}],[\"clicked\",{\"1\":{\"60\":1,\"70\":1}}],[\"click\",{\"1\":{\"28\":1,\"82\":1,\"211\":4}}],[\"classname=\",{\"1\":{\"197\":1,\"233\":1,\"235\":2}}],[\"class语法仅仅是prototype的语法糖\",{\"1\":{\"135\":1}}],[\"class\",{\"1\":{\"82\":4,\"101\":1,\"104\":1,\"105\":1,\"106\":1,\"107\":1,\"135\":3,\"143\":1,\"154\":3,\"160\":2,\"161\":1,\"163\":1,\"164\":2,\"211\":1,\"271\":1,\"311\":2}}],[\"class=\",{\"1\":{\"77\":1,\"312\":1,\"314\":1,\"343\":1}}],[\"cout\",{\"1\":{\"143\":4}}],[\"countchange\",{\"1\":{\"376\":3}}],[\"countcontext\",{\"1\":{\"182\":3}}],[\"countcontextprops\",{\"1\":{\"182\":2}}],[\"count=\",{\"1\":{\"374\":1}}],[\"count<\",{\"1\":{\"374\":1}}],[\"countstate\",{\"1\":{\"182\":2}}],[\"countprovider>\",{\"1\":{\"182\":1}}],[\"countprovider\",{\"1\":{\"182\":1}}],[\"count++\",{\"1\":{\"36\":2,\"38\":1,\"210\":1,\"211\":1,\"337\":1}}],[\"count\",{\"1\":{\"8\":4,\"13\":5,\"15\":4,\"18\":6,\"20\":1,\"26\":8,\"27\":4,\"28\":10,\"35\":4,\"36\":5,\"37\":1,\"38\":3,\"40\":4,\"41\":5,\"42\":1,\"60\":2,\"70\":4,\"78\":2,\"143\":1,\"161\":1,\"164\":6,\"182\":16,\"183\":9,\"184\":7,\"191\":4,\"197\":7,\"208\":6,\"209\":2,\"210\":1,\"211\":6,\"222\":1,\"223\":2,\"228\":1,\"233\":6,\"235\":9,\"247\":2,\"251\":7,\"271\":8,\"279\":5,\"337\":3,\"374\":5,\"375\":4,\"376\":6,\"389\":1}}],[\"counter\",{\"1\":{\"8\":1,\"13\":1,\"18\":1,\"26\":1,\"28\":2,\"29\":1,\"78\":2,\"176\":5,\"182\":2,\"183\":2,\"251\":1}}],[\"color=\",{\"1\":{\"176\":1}}],[\"colors\",{\"1\":{\"92\":2}}],[\"color\",{\"1\":{\"90\":1,\"92\":2,\"318\":2}}],[\"codesandbox\",{\"1\":{\"338\":1}}],[\"code\",{\"1\":{\"29\":3,\"160\":4,\"284\":3,\"323\":1,\"324\":1,\"325\":1}}],[\"container\",{\"1\":{\"296\":9,\"311\":2}}],[\"containerinfo\",{\"1\":{\"263\":3}}],[\"contenteditable=\",{\"0\":{\"91\":1},\"1\":{\"91\":1}}],[\"content\",{\"1\":{\"69\":2}}],[\"content=\",{\"1\":{\"15\":2}}],[\"contextvalue\",{\"1\":{\"182\":2}}],[\"context=\",{\"1\":{\"77\":1}}],[\"context\",{\"0\":{\"77\":1},\"1\":{\"38\":3,\"263\":1,\"303\":1}}],[\"conut\",{\"1\":{\"210\":1,\"247\":1}}],[\"conut++\",{\"1\":{\"208\":2,\"209\":1}}],[\"configresolved\",{\"1\":{\"305\":1}}],[\"config\",{\"1\":{\"184\":1,\"240\":2,\"241\":1,\"286\":1,\"296\":2,\"303\":8,\"305\":2,\"371\":2,\"408\":1}}],[\"concretesuject2\",{\"1\":{\"160\":4}}],[\"concretesuject1\",{\"1\":{\"160\":4}}],[\"concreteobservver4就会被广播事件通知\",{\"1\":{\"160\":1}}],[\"concreteobservver4\",{\"1\":{\"160\":4}}],[\"concreteobservver3\",{\"1\":{\"160\":4}}],[\"concreteobservver2就会被广播事件通知\",{\"1\":{\"160\":1}}],[\"concreteobservver2\",{\"1\":{\"160\":4}}],[\"concreteobservver1\",{\"1\":{\"160\":4}}],[\"concretecommand\",{\"1\":{\"153\":2}}],[\"console狂魔能有多狂\",{\"0\":{\"283\":1}}],[\"console\",{\"0\":{\"289\":1,\"290\":1},\"1\":{\"13\":1,\"15\":1,\"18\":2,\"20\":1,\"26\":2,\"27\":1,\"28\":2,\"35\":1,\"37\":1,\"40\":1,\"41\":6,\"42\":5,\"72\":2,\"73\":2,\"79\":1,\"80\":8,\"107\":1,\"109\":1,\"110\":2,\"111\":1,\"112\":4,\"129\":1,\"154\":16,\"159\":1,\"160\":1,\"161\":4,\"162\":2,\"163\":6,\"164\":4,\"177\":1,\"183\":3,\"191\":1,\"197\":1,\"235\":2,\"279\":1,\"284\":1,\"286\":1,\"287\":1,\"289\":2,\"290\":2,\"318\":1,\"319\":3,\"325\":1,\"336\":1,\"345\":2,\"346\":1,\"347\":1,\"350\":2,\"353\":2,\"354\":1,\"355\":1,\"358\":1,\"364\":1,\"365\":2,\"375\":1,\"376\":2,\"377\":1,\"408\":2}}],[\"constructor\",{\"1\":{\"101\":1,\"104\":1,\"154\":3,\"160\":2,\"161\":1,\"163\":1,\"164\":2,\"211\":1,\"271\":1}}],[\"const\",{\"1\":{\"8\":3,\"10\":3,\"13\":2,\"15\":8,\"18\":3,\"20\":3,\"26\":2,\"27\":7,\"28\":4,\"35\":2,\"36\":4,\"37\":1,\"38\":5,\"40\":2,\"41\":2,\"77\":2,\"78\":1,\"79\":1,\"107\":1,\"110\":2,\"112\":5,\"133\":1,\"154\":7,\"159\":1,\"160\":7,\"161\":4,\"162\":5,\"163\":1,\"164\":2,\"176\":2,\"177\":1,\"182\":13,\"183\":4,\"184\":2,\"191\":3,\"192\":7,\"197\":2,\"201\":8,\"202\":6,\"208\":3,\"209\":2,\"211\":1,\"223\":6,\"225\":1,\"226\":1,\"227\":1,\"228\":2,\"233\":4,\"235\":8,\"247\":3,\"248\":1,\"249\":3,\"250\":2,\"251\":2,\"252\":2,\"253\":1,\"271\":3,\"278\":3,\"279\":9,\"284\":1,\"286\":5,\"287\":2,\"296\":10,\"302\":3,\"303\":7,\"305\":1,\"306\":1,\"311\":3,\"312\":1,\"313\":10,\"314\":8,\"318\":12,\"319\":7,\"323\":5,\"324\":5,\"325\":8,\"332\":1,\"333\":4,\"334\":4,\"336\":1,\"337\":1,\"357\":1,\"364\":2,\"374\":1,\"375\":1,\"376\":2,\"377\":2}}],[\"combine\",{\"1\":{\"184\":1}}],[\"comments\",{\"1\":{\"416\":1}}],[\"comment\",{\"1\":{\"416\":2}}],[\"commitinfo\",{\"1\":{\"296\":2}}],[\"commitid\",{\"1\":{\"296\":12}}],[\"commit\",{\"1\":{\"295\":1,\"296\":4,\"297\":2}}],[\"commitroot阶段\",{\"1\":{\"272\":1}}],[\"command3\",{\"1\":{\"154\":2}}],[\"command2\",{\"1\":{\"154\":2}}],[\"command1\",{\"1\":{\"154\":2}}],[\"command\",{\"1\":{\"154\":9,\"374\":2}}],[\"commmandlist\",{\"1\":{\"154\":3}}],[\"commond\",{\"1\":{\"153\":2}}],[\"complatework阶段\",{\"1\":{\"272\":1}}],[\"comp\",{\"1\":{\"241\":1}}],[\"compression\",{\"1\":{\"241\":1}}],[\"component\",{\"1\":{\"271\":1,\"311\":1}}],[\"components结合起来\",{\"0\":{\"223\":1}}],[\"components动画实践\",{\"0\":{\"221\":1}}],[\"components\",{\"1\":{\"186\":1,\"223\":3,\"312\":1,\"314\":1,\"343\":1,\"354\":2,\"355\":2}}],[\"component$\",{\"1\":{\"35\":1,\"36\":2,\"38\":2,\"40\":1,\"41\":1}}],[\"compose\",{\"1\":{\"177\":2}}],[\"computer\",{\"1\":{\"37\":1}}],[\"computed是不是也应该有啊\",{\"1\":{\"37\":1}}],[\"compatible\",{\"1\":{\"15\":1}}],[\"comparator\",{\"1\":{\"10\":2,\"15\":2}}],[\"com\",{\"1\":{\"4\":1,\"93\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"176\":1,\"177\":1,\"289\":2,\"290\":2,\"295\":2,\"297\":2,\"399\":1,\"402\":1,\"404\":1,\"405\":1,\"408\":1,\"416\":1}}],[\"接着将以下信息复到theme\",{\"1\":{\"416\":1}}],[\"接着\",{\"1\":{\"416\":1}}],[\"接着点击save按钮\",{\"1\":{\"415\":1}}],[\"接着最重要的一步\",{\"1\":{\"415\":1}}],[\"接着再\",{\"1\":{\"313\":1}}],[\"接着从字符串中截取出作者\",{\"1\":{\"286\":1}}],[\"接着配置常用的路径解析\",{\"1\":{\"240\":1}}],[\"接着在列表渲染的地方使用bottomtotop组件\",{\"1\":{\"223\":1}}],[\"接着上篇文章\",{\"1\":{\"189\":1}}],[\"接着我们给组件实现\",{\"1\":{\"312\":1}}],[\"接着我们遍历每一行\",{\"1\":{\"287\":1}}],[\"接着我们只需要从目标节点\",{\"1\":{\"112\":1}}],[\"接着我们手动实现一个简易版的createsignal\",{\"1\":{\"5\":1}}],[\"接收派发的\",{\"1\":{\"182\":1}}],[\"接收命令\",{\"1\":{\"153\":1}}],[\"接受者\",{\"1\":{\"153\":2}}],[\"接口\",{\"0\":{\"73\":1},\"1\":{\"311\":1}}],[\"接下来使用defineemits定义监听事件\",{\"1\":{\"376\":1}}],[\"接下来\",{\"1\":{\"319\":1}}],[\"接下来一步步实现\",{\"1\":{\"284\":1}}],[\"接下来我执行了打包命令\",{\"1\":{\"241\":1}}],[\"接下来我们使用definemodel定义一个model\",{\"1\":{\"377\":1}}],[\"接下来我们测试下其他的监听事件\",{\"1\":{\"319\":1}}],[\"接下来我们封装一个更通用的媒体查询hook\",{\"1\":{\"318\":1}}],[\"接下来我们封装自定义指令\",{\"1\":{\"313\":1}}],[\"接下来我们自定义几个插件\",{\"1\":{\"304\":1}}],[\"接下来我们从组件开始加载到更新\",{\"1\":{\"272\":1}}],[\"接下来我们说些不一样的\",{\"1\":{\"38\":1}}],[\"接下来我们通过实现createeffect来让它具有响应式的能力\",{\"1\":{\"10\":1}}],[\"接下来在测试例子里添加如下两行\",{\"1\":{\"20\":1}}],[\"接下来的几篇文章里我会详细介绍每个阶段的详细实现原理\",{\"1\":{\"4\":1}}],[\"我接触过最早的原理是通过将评论信息映射到仓库的\",{\"1\":{\"416\":1}}],[\"我将一些默认的路由也加进了导航栏配置中\",{\"1\":{\"409\":1}}],[\"我将知识点分为了青铜\",{\"1\":{\"126\":1}}],[\"我用的主题是\",{\"1\":{\"405\":1}}],[\"我一般很少用到这过度属性\",{\"1\":{\"394\":1}}],[\"我在初始阶段采用了padding\",{\"1\":{\"387\":1,\"388\":1}}],[\"我在前面的文章中使用es6语法实现过\",{\"1\":{\"120\":1}}],[\"我说了vuex和localstorage\",{\"1\":{\"341\":1}}],[\"我说我注释了\",{\"1\":{\"283\":1}}],[\"我不懂为啥\",{\"1\":{\"323\":1}}],[\"我不想写原生\",{\"1\":{\"311\":1}}],[\"我及时修改\",{\"1\":{\"319\":1}}],[\"我会及时更正\",{\"1\":{\"314\":1}}],[\"我会暂时放弃这个写作计划\",{\"1\":{\"4\":1}}],[\"我以为是给组件的\",{\"1\":{\"312\":1}}],[\"我想起了我之前看到的几个\",{\"1\":{\"311\":1}}],[\"我想看看他的看家本领怎么样\",{\"1\":{\"154\":2}}],[\"我已经开源了\",{\"1\":{\"297\":1}}],[\"我还新增了扩展信息的字段\",{\"1\":{\"296\":1}}],[\"我又打算自己开发插件满足自己的需求\",{\"1\":{\"295\":1}}],[\"我又秉烛夜读\",{\"1\":{\"24\":1}}],[\"我开发了一个vite插件\",{\"1\":{\"295\":1}}],[\"我开发了一个插件治好了我的精神内耗⚡⚡⚡\",{\"0\":{\"282\":1}}],[\"我找了一圈\",{\"1\":{\"295\":1}}],[\"我立马想到使用插件\",{\"1\":{\"295\":1}}],[\"我调试打印的console怎么不见了\",{\"1\":{\"283\":1}}],[\"我把影响我调试的console一一注释了\",{\"1\":{\"283\":1}}],[\"我为了方便我调试\",{\"1\":{\"283\":1}}],[\"我尼玛\",{\"1\":{\"283\":1}}],[\"我要来了项目权限\",{\"1\":{\"283\":1}}],[\"我使用的是vuepress\",{\"1\":{\"414\":1}}],[\"我使用了translatex\",{\"1\":{\"228\":1}}],[\"我使用scale属性增加了缩放动画\",{\"1\":{\"228\":1}}],[\"我就不做多余的赘述了\",{\"1\":{\"385\":1}}],[\"我就想到\",{\"1\":{\"284\":1}}],[\"我就寻找别的方法解决让我强迫症发作的方法\",{\"1\":{\"284\":1}}],[\"我就改了个count的值\",{\"1\":{\"215\":1}}],[\"我就悟了\",{\"1\":{\"195\":1}}],[\"我成替身了\",{\"0\":{\"195\":1},\"1\":{\"186\":1}}],[\"我也没办法\",{\"1\":{\"284\":1}}],[\"我也知道\",{\"1\":{\"161\":2}}],[\"我也推荐你买一本\",{\"1\":{\"118\":1}}],[\"我知道\",{\"1\":{\"161\":4}}],[\"我知道我该更新了\",{\"1\":{\"160\":5}}],[\"我是子组件name\",{\"1\":{\"347\":1}}],[\"我是父组件name\",{\"1\":{\"347\":1}}],[\"我是subscribe3\",{\"1\":{\"162\":2}}],[\"我是subscribe1\",{\"1\":{\"162\":2}}],[\"我是\",{\"1\":{\"160\":5,\"246\":1,\"277\":1}}],[\"我是萌萌哒草头将军\",{\"1\":{\"0\":1}}],[\"我看看他的看家本领怎么样\",{\"1\":{\"154\":1}}],[\"我佛慈悲\",{\"1\":{\"154\":1,\"155\":1}}],[\"我去去就来\",{\"1\":{\"154\":1,\"155\":1}}],[\"我先介绍下命令模式\",{\"1\":{\"147\":1}}],[\"我买的这个版本将设计模式分为创建型\",{\"1\":{\"121\":1}}],[\"我买的是徐涛翻译版本影印版\",{\"1\":{\"121\":1}}],[\"我买的是三件套\",{\"1\":{\"119\":1}}],[\"我的站点\",{\"1\":{\"415\":1}}],[\"我的设置为\",{\"1\":{\"409\":1}}],[\"我的配置如下\",{\"1\":{\"408\":1}}],[\"我的旧博客\",{\"1\":{\"403\":1}}],[\"我的博客地址\",{\"1\":{\"399\":1}}],[\"我的实现过程如下\",{\"1\":{\"323\":1}}],[\"我的实现如下\",{\"1\":{\"312\":1}}],[\"我的需求是让版本信息成为入口标签的属性\",{\"1\":{\"295\":1}}],[\"我的思路是\",{\"1\":{\"284\":1,\"409\":1}}],[\"我的console也会被去掉\",{\"1\":{\"284\":1}}],[\"我的项目没有图片\",{\"1\":{\"241\":1}}],[\"我的组合动画似乎比较繁琐\",{\"1\":{\"228\":1}}],[\"我的学习笔记\",{\"1\":{\"120\":1}}],[\"我的文章首发在公众号\",{\"1\":{\"43\":1}}],[\"我根据solidjs官网给的排名\",{\"1\":{\"54\":1}}],[\"我继续帮大家踩雷\",{\"1\":{\"32\":1}}],[\"我们前往https\",{\"1\":{\"416\":1}}],[\"我们只需要在theme\",{\"1\":{\"413\":1}}],[\"我们看看各个主题默认的样式\",{\"1\":{\"400\":1}}],[\"我们从defineprops中解构出count\",{\"1\":{\"375\":1}}],[\"我们期望的场景是\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"我们期望可以配置加载中的提示信息\",{\"1\":{\"313\":1}}],[\"我们就可以这样封装监听网络状态的hook了\",{\"1\":{\"319\":1}}],[\"我们就可以知道每个子节点对应的父节点了\",{\"1\":{\"112\":1}}],[\"我们首先会想到封装事件监听的值的变化可以通过addeventlistener方法\",{\"1\":{\"319\":1}}],[\"我们再看第二个简单的例子\",{\"1\":{\"319\":1}}],[\"我们使用通用的hook重写监听系统主题色的hook\",{\"1\":{\"318\":1}}],[\"我们使用h函数创建了一个\",{\"1\":{\"311\":1}}],[\"我们将查询语句作为动态变量\",{\"1\":{\"318\":1}}],[\"我们不需要初始参数和类型\",{\"1\":{\"324\":1}}],[\"我们不再对特定的媒体查询值做处理\",{\"1\":{\"318\":1}}],[\"我们不要局限于仅有的translatex\",{\"1\":{\"228\":1}}],[\"我们测试下\",{\"1\":{\"318\":1,\"319\":1}}],[\"我们验证下\",{\"1\":{\"323\":1}}],[\"我们验证下功能\",{\"1\":{\"313\":1,\"325\":1}}],[\"我们验证下效果\",{\"1\":{\"288\":1}}],[\"我们需要重新设置新的值\",{\"1\":{\"318\":1}}],[\"我们需要初始化配置参数\",{\"1\":{\"313\":1}}],[\"我们需要记录这个没有被标记的节点的父节点\",{\"1\":{\"112\":1}}],[\"我们主要讨论插件的机制\",{\"1\":{\"301\":1}}],[\"我们在此基础上提供更多的灵活性\",{\"1\":{\"296\":1}}],[\"我们在写组件时\",{\"1\":{\"236\":1}}],[\"我们通过\",{\"1\":{\"296\":1}}],[\"我们通常根据边的权重将图转为最小生成树\",{\"1\":{\"98\":1}}],[\"我们得出需要删除的行\",{\"1\":{\"286\":1}}],[\"我们开发的插件主要是在文件编译时\",{\"1\":{\"284\":1}}],[\"我们采用自定义命令方法的方式进行表演\",{\"1\":{\"278\":1}}],[\"我们点击button的点击事件\",{\"1\":{\"272\":1}}],[\"我们还根据文件夹下的文件列表自动为每个文件夹生成目录页面\",{\"1\":{\"413\":1}}],[\"我们还需要提供登录应用的服务\",{\"1\":{\"416\":1}}],[\"我们还需要写一个防抖函数\",{\"1\":{\"319\":1}}],[\"我们还需要在此基础上改造下\",{\"1\":{\"286\":1}}],[\"我们还发现\",{\"1\":{\"271\":1}}],[\"我们还可以考虑按照一定规律给不同的元素使用不同的话\",{\"1\":{\"224\":1}}],[\"我们进行压缩文件\",{\"1\":{\"241\":1}}],[\"我们知道\",{\"1\":{\"231\":1}}],[\"我们给动画加个回弹动画\",{\"1\":{\"223\":1}}],[\"我们的思路是\",{\"1\":{\"313\":1}}],[\"我们的动画底层还是依靠css提供的animation动画\",{\"1\":{\"222\":1}}],[\"我们的代码并不是立即执行的\",{\"1\":{\"208\":1}}],[\"我们用发布\",{\"1\":{\"161\":1}}],[\"我们遍历节点的每个子节点时\",{\"1\":{\"112\":1}}],[\"我们是通过展示邻接表来展示图的\",{\"1\":{\"107\":1}}],[\"我们一起成长\",{\"1\":{\"43\":1}}],[\"我们可以分两种情况\",{\"1\":{\"410\":1}}],[\"我们可以借助第三方库实现\",{\"1\":{\"330\":1}}],[\"我们可以模拟出一个完整的生命周期\",{\"1\":{\"42\":1}}],[\"我们可以看到上面的请求链接\",{\"1\":{\"243\":1}}],[\"我们可以看到\",{\"1\":{\"41\":1}}],[\"我们所有的监听事件都是通过usevisibletask$实现的\",{\"1\":{\"39\":1}}],[\"我们先上代码\",{\"1\":{\"34\":1}}],[\"我们先看看createsignal的用法和原理\",{\"1\":{\"5\":1}}],[\"我们已经知道从v16\",{\"1\":{\"258\":1}}],[\"我们已经知道\",{\"1\":{\"14\":1}}],[\"担心solid\",{\"1\":{\"4\":1}}],[\"jamesives\",{\"1\":{\"415\":1}}],[\"jauery的实现了标准的发布订阅模式\",{\"1\":{\"161\":1}}],[\"java是多进程多线程语言\",{\"1\":{\"143\":1}}],[\"java的线程状态\",{\"1\":{\"143\":1}}],[\"java的新生代又被分为了三块\",{\"1\":{\"140\":1}}],[\"java的分代清理和javascript一样也是将内存分为新生代和老生代\",{\"1\":{\"140\":1}}],[\"java使用引用计数和可达性分析作为gc策略\",{\"1\":{\"140\":1}}],[\"java中实现这个功能\",{\"1\":{\"143\":1}}],[\"java中使用修饰符private或者public控制\",{\"1\":{\"136\":1}}],[\"java中使用final关键字定义不可变的常量\",{\"1\":{\"129\":1}}],[\"java中的数组是固定长度的固定类型的\",{\"1\":{\"133\":1}}],[\"java中的equals是严格按值比较的\",{\"1\":{\"132\":1}}],[\"java中如果一个变量接受另外类型的值\",{\"1\":{\"129\":1}}],[\"java\",{\"0\":{\"140\":1,\"143\":1},\"1\":{\"125\":1,\"129\":1,\"130\":1,\"131\":1,\"132\":1,\"133\":1,\"135\":1,\"136\":1,\"143\":2}}],[\"javascript钩子函数\",{\"1\":{\"385\":1}}],[\"javascript当时仅仅用来和服务端交互\",{\"1\":{\"142\":1}}],[\"javascript使用对象的defineproperty或者proxy方法可以限制对象属性私有还是公有\",{\"1\":{\"136\":1}}],[\"javascript中没有封装和多态\",{\"1\":{\"135\":1}}],[\"javascript中数字类型只有number类型一种\",{\"1\":{\"131\":1}}],[\"javascript虽然可以面向对象编程\",{\"1\":{\"135\":1}}],[\"javascript的策略模式可以通过对象来巧妙实现\",{\"1\":{\"163\":1}}],[\"javascript的\",{\"1\":{\"135\":1}}],[\"javascript的数组是任意长度的\",{\"1\":{\"133\":1}}],[\"javascript的==会进行隐式类型转换\",{\"1\":{\"132\":1}}],[\"javascript基本类型和包装类是一样的\",{\"1\":{\"130\":1}}],[\"javascript是弱类型语言\",{\"1\":{\"129\":1}}],[\"javascript和java相比有啥优点或缺点\",{\"1\":{\"126\":1}}],[\"javascript设计模式\",{\"0\":{\"121\":1},\"1\":{\"121\":1}}],[\"javascript权威指南\",{\"0\":{\"118\":1}}],[\"javascript高级程序设计\",{\"0\":{\"117\":1}}],[\"javascript一直都是只有运行时的状态\",{\"1\":{\"47\":1}}],[\"javascript从诞生的很长一段时间里\",{\"1\":{\"47\":1}}],[\"javascript从诞生至今\",{\"1\":{\"47\":1}}],[\"javascript\",{\"0\":{\"142\":1},\"1\":{\"241\":2,\"408\":1,\"409\":1},\"2\":{\"23\":1,\"31\":1,\"45\":1,\"57\":1,\"86\":1,\"115\":1,\"123\":1,\"157\":1,\"166\":1,\"179\":1,\"205\":1,\"220\":1,\"238\":1,\"255\":1,\"267\":1,\"276\":1,\"281\":1,\"292\":1,\"299\":1,\"309\":1,\"316\":1,\"321\":1,\"327\":1,\"340\":1,\"383\":1}}],[\"jiejie\",{\"1\":{\"154\":2}}],[\"jit\",{\"1\":{\"49\":2}}],[\"jmm\",{\"1\":{\"143\":1}}],[\"join\",{\"1\":{\"112\":1,\"287\":1}}],[\"just\",{\"1\":{\"49\":1}}],[\"jquery兴起\",{\"1\":{\"47\":1}}],[\"js里开启\",{\"1\":{\"371\":1}}],[\"js中媒体查询的主要方法是使用window对象下的matchmedia对象\",{\"1\":{\"317\":1}}],[\"jsdom\",{\"1\":{\"296\":7}}],[\"json\",{\"1\":{\"240\":1,\"241\":1,\"407\":1,\"415\":1}}],[\"js方案\",{\"1\":{\"223\":1}}],[\"jsx是动态的\",{\"1\":{\"208\":1,\"218\":1}}],[\"jsx\",{\"1\":{\"49\":1,\"208\":1,\"240\":1}}],[\"jsp\",{\"1\":{\"48\":1}}],[\"js\",{\"1\":{\"8\":2,\"13\":2,\"15\":1,\"18\":2,\"26\":2,\"28\":6,\"39\":2,\"129\":1,\"130\":1,\"132\":1,\"133\":1,\"136\":1,\"240\":1,\"247\":2,\"250\":1,\"278\":1,\"357\":2,\"399\":1,\"415\":1}}],[\"js的厉害之处是\",{\"1\":{\"7\":1}}],[\"js的基本语法\",{\"1\":{\"4\":1}}],[\"js响应式的基石\",{\"1\":{\"5\":1}}],[\"js受众太小\",{\"1\":{\"4\":1}}],[\"jpg\",{\"1\":{\"0\":1}}],[\"演练场地址\",{\"1\":{\"4\":1}}],[\"🔥\",{\"1\":{\"271\":5}}],[\"🔥超级简单的svelte\",{\"0\":{\"58\":1},\"1\":{\"33\":1,\"49\":1,\"55\":1}}],[\"🚆\",{\"0\":{\"201\":1,\"202\":1}}],[\"🚆usememo回调函数会重新执行\",{\"1\":{\"199\":1}}],[\"🚆useeffect回调函数会重新执行\",{\"1\":{\"199\":1}}],[\"🚆usecallback会重新创建回调函数\",{\"1\":{\"199\":1}}],[\"🔔\",{\"1\":{\"186\":1}}],[\"👉使用\",{\"0\":{\"279\":1}}],[\"👉被玩坏的react\",{\"0\":{\"277\":1}}],[\"👉仅作用在当前组件范围内的属性\",{\"1\":{\"236\":1}}],[\"👉尽量多用memo方法包裹组件\",{\"1\":{\"236\":1}}],[\"👉否则重新将callback做为最新的状态值和deps一起保存起来\",{\"1\":{\"202\":1}}],[\"👉否则重新执行callback\",{\"1\":{\"201\":1}}],[\"👉将callback和deps缓存在当前hook的状态上\",{\"1\":{\"202\":1}}],[\"👉将注册的callback和deps拿出来\",{\"1\":{\"201\":1,\"202\":1}}],[\"👉比较前后两次的deps\",{\"1\":{\"201\":1,\"202\":1}}],[\"👉取出当前的hook状态\",{\"1\":{\"201\":1,\"202\":1}}],[\"👉deps发生改变\",{\"1\":{\"201\":1,\"202\":1}}],[\"👉执行callback\",{\"1\":{\"201\":1}}],[\"👉此时是mounted阶段\",{\"1\":{\"201\":1,\"202\":1}}],[\"👉注册hook状态\",{\"1\":{\"201\":1,\"202\":1}}],[\"👉当子组件的属性为函数时请用usecallback\",{\"1\":{\"236\":1}}],[\"👉当子组件的属性为非引用类型的中间状态时请用usememo\",{\"1\":{\"236\":1}}],[\"👉当组件的渲染代价比较大时\",{\"1\":{\"236\":1}}],[\"👉当没有返回值或者不管返回值时\",{\"1\":{\"199\":1}}],[\"👉当返回值是个函数时\",{\"1\":{\"199\":1}}],[\"👉第二个参数deps是依赖项\",{\"1\":{\"199\":1}}],[\"👉第一个参数callback是回调函数\",{\"1\":{\"199\":1}}],[\"👉超级简单的设计模式\",{\"1\":{\"121\":1}}],[\"👉\",{\"0\":{\"40\":1,\"41\":1,\"42\":1,\"278\":1},\"1\":{\"120\":1,\"259\":3}}],[\"🚀vuepress\",{\"0\":{\"399\":1}}],[\"🚀🚀vue3自定义指令实践\",{\"0\":{\"310\":1},\"1\":{\"408\":1}}],[\"🚀两个简单的自定义插件\",{\"0\":{\"300\":1}}],[\"🚀这么写react更丝滑🚀\",{\"1\":{\"176\":1}}],[\"🚀svelte原理和进阶看这篇就够了🚀\",{\"1\":{\"55\":1}}],[\"🚀\",{\"0\":{\"35\":1,\"36\":1,\"37\":1,\"38\":1,\"39\":1,\"169\":1,\"175\":1,\"181\":1,\"182\":1,\"183\":1,\"184\":1,\"185\":1,\"190\":1,\"289\":1,\"290\":1,\"301\":1,\"304\":1,\"311\":1,\"312\":1,\"313\":1,\"323\":1,\"324\":1,\"325\":1,\"373\":1,\"400\":1,\"406\":1,\"408\":1,\"409\":1,\"410\":1,\"414\":1,\"415\":1,\"416\":1},\"1\":{\"186\":2,\"189\":1}}],[\"🚀模仿\",{\"0\":{\"25\":1}}],[\"💡我居然用错了usememo和usecallback这么久\",{\"0\":{\"231\":1}}],[\"💡推荐阅读\",{\"0\":{\"196\":1,\"232\":1}}],[\"💡tip\",{\"0\":{\"88\":1,\"89\":1,\"90\":1,\"91\":1,\"92\":1,\"93\":1}}],[\"💡\",{\"0\":{\"33\":1,\"55\":1,\"257\":1,\"329\":1}}],[\"💡相关阅读\",{\"0\":{\"4\":1,\"234\":1,\"269\":1}}],[\"🐕舔不完的面\",{\"0\":{\"32\":1}}],[\"🚗最后组装render方法\",{\"1\":{\"28\":1}}],[\"🚗再接着\",{\"1\":{\"28\":1}}],[\"🚗紧接着\",{\"1\":{\"28\":1}}],[\"🚗接着使用$createcomponent包裹组件\",{\"1\":{\"28\":1}}],[\"🚗接着\",{\"1\":{\"28\":1}}],[\"🚗首先\",{\"1\":{\"28\":1}}],[\"🚗\",{\"0\":{\"7\":1,\"8\":1,\"9\":1,\"10\":1,\"12\":1,\"13\":1,\"14\":1,\"15\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"199\":1,\"200\":1,\"259\":1,\"260\":1,\"261\":1,\"262\":1,\"263\":1,\"264\":1,\"271\":1,\"272\":1,\"273\":1,\"302\":1,\"303\":1,\"305\":1,\"306\":1,\"332\":1,\"333\":1,\"334\":1,\"336\":1,\"337\":1,\"338\":1,\"370\":1,\"371\":1,\"372\":1,\"374\":1,\"375\":1,\"376\":1,\"377\":1,\"378\":1},\"1\":{\"38\":3}}],[\"💎运行时原理\",{\"0\":{\"29\":1}}],[\"💎它们的返回值都没有虚拟dom\",{\"1\":{\"28\":1}}],[\"💎将每动态片段的更新范围\",{\"1\":{\"28\":1}}],[\"💎模板编译原理\",{\"0\":{\"28\":1}}],[\"💎响应式原理\",{\"0\":{\"27\":1}}],[\"💎写法\",{\"0\":{\"26\":1}}],[\"💎\",{\"0\":{\"6\":1,\"11\":1,\"16\":1,\"34\":1,\"43\":1,\"47\":1,\"48\":1,\"49\":1,\"50\":1,\"117\":1,\"118\":1,\"119\":1,\"120\":1,\"121\":1,\"170\":1,\"171\":1,\"172\":1,\"173\":1,\"174\":1,\"176\":1,\"177\":1,\"191\":1,\"192\":1,\"197\":1,\"198\":1,\"203\":1,\"233\":1,\"235\":1,\"236\":1,\"258\":1,\"265\":1,\"270\":1,\"330\":1,\"331\":1,\"335\":1,\"369\":1,\"407\":1,\"411\":1,\"412\":1,\"413\":1}}],[\"😘\",{\"0\":{\"24\":1},\"1\":{\"4\":1,\"33\":1,\"55\":1}}],[\"🐔啄不完的米\",{\"0\":{\"24\":1},\"1\":{\"4\":1,\"33\":1,\"55\":1}}],[\"萌萌哒草头将军<\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"萌萌哒草头将军\",{\"1\":{\"3\":1,\"32\":1,\"43\":1,\"46\":1,\"87\":1,\"96\":1,\"116\":1,\"144\":1,\"160\":1,\"161\":1,\"162\":1,\"168\":1,\"180\":1,\"195\":1,\"231\":1,\"239\":1,\"246\":2,\"257\":1,\"269\":1,\"277\":2,\"279\":1,\"282\":1,\"293\":1,\"300\":1,\"310\":1,\"317\":1,\"322\":1,\"328\":1,\"368\":1,\"381\":1,\"399\":1,\"403\":1,\"408\":2}}],[\"幻灯片页\",{\"0\":{\"2\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
