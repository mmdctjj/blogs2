import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as l,c as i,f as a,a as n,b as o,e as t}from"./app-10c9b02b.js";const p={},c={href:"https://juejin.cn/post/7506754146893725750",target:"_blank",rel:"noopener noreferrer"},u={href:"https://juejin.cn/user/1116759543260727/posts",title:"https://juejin.cn/user/1116759543260727/posts",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/user/1116759543260727/posts",title:"https://juejin.cn/user/1116759543260727/posts",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/7506754146893725750",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/user/1116759543260727/posts",title:"https://juejin.cn/user/1116759543260727/posts",target:"_blank",rel:"noopener noreferrer"},_={href:"https://juejin.cn/user/1116759543260727/posts",title:"https://juejin.cn/user/1116759543260727/posts",target:"_blank",rel:"noopener noreferrer"};function k(m,e){const s=r("ExternalLinkIcon");return l(),i("div",null,[e[8]||(e[8]=a('<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p>昨天刷推发现 <code>tsdown</code> 加入了 <code>Unbundle Mode</code>，其核心在于保持源码目录结构与输出目录结构一致。例如，假设你的项目有以下文件结构：<code>src/index.ts</code> <code>src/mod.ts</code>，最终输出：<code>dist/index.js</code> <code>dist/mod.js</code></p><figure><img src="https://files.mdnice.com/user/43422/158c80b2-6402-4d8c-9c18-a48b2677a50c.png" alt="Unbundle Mode" tabindex="0" loading="lazy"><figcaption>Unbundle Mode</figcaption></figure><h4 id="往期精彩推荐" tabindex="-1"><a class="header-anchor" href="#往期精彩推荐" aria-hidden="true">#</a> 往期精彩推荐</h4>',4)),n("ul",null,[n("li",null,[n("a",c,[e[0]||(e[0]=o("🚀🚀🚀 AI 助手好写，太好写了，分分钟写出来，不用一周，三分钟！")),t(s)])]),n("li",null,[n("a",u,[e[1]||(e[1]=o("优雅，太优雅了，NestJS 🔥 实在是太优雅了！🚀🚀🚀")),t(s)])]),n("li",null,[n("a",h,[e[2]||(e[2]=o("🚀🚀 🚀 太棒了，有了它，终于不用翻阅屎山 💩 代码了！")),t(s)])]),e[3]||(e[3]=n("li",null,"更多精彩文章欢迎关注我的公众号：萌萌哒草头将军",-1))]),e[9]||(e[9]=a(`<h3 id="正文" tabindex="-1"><a class="header-anchor" href="#正文" aria-hidden="true">#</a> 正文</h3><h4 id="什么是-tsdown-和-unbundle-mode" tabindex="-1"><a class="header-anchor" href="#什么是-tsdown-和-unbundle-mode" aria-hidden="true">#</a> 什么是 tsdown 和 Unbundle Mode？</h4><p><code>tsdown</code> 是一个基于 <code>Rolldown</code> 的现代化打包工具，专为 <code>TypeScript</code> 和 <code>JavaScript</code> 库设计，号称“优雅的库打包器”。</p><p>它支持多种构建模式，<code>Unbundle Mode</code> 对每个源文件进行独立编译和转换，生成与源码结构一致的输出文件。</p><p>这种方式确保了源码与输出文件之间的一一对应关系，便于调试和维护。</p><h4 id="如何启用-unbundle-mode" tabindex="-1"><a class="header-anchor" href="#如何启用-unbundle-mode" aria-hidden="true">#</a> 如何启用 Unbundle Mode？</h4><p>启用 Unbundle Mode 非常简单，只需在 tsdown 的配置文件中设置 <code>unbundle: true</code>。以下是一个典型的配置示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tsdown&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">entry</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/index.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">unbundle</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个配置中，<code>entry</code> 指定了入口文件（如 <code>src/index.ts</code>），而 <code>unbundle: true</code> 指示 tsdown 使用 Unbundle Mode 进行构建。启用后，tsdown 将编译所有从入口点引用的源文件，并生成对应的输出文件。</p><h4 id="unbundle-mode-的工作原理" tabindex="-1"><a class="header-anchor" href="#unbundle-mode-的工作原理" aria-hidden="true">#</a> Unbundle Mode 的工作原理</h4><p>当启用 <code>Unbundle Mode</code> 时，<code>tsdown</code> 会遍历所有入口点引用的文件，逐一编译并输出到 <code>dist</code> 目录，保持与 <code>src</code> 目录相同的结构。这种方式避免了模块合并，确保每个输出文件直接对应一个源文件。</p><h4 id="何时使用-unbundle-mode" tabindex="-1"><a class="header-anchor" href="#何时使用-unbundle-mode" aria-hidden="true">#</a> 何时使用 Unbundle Mode？</h4><p><code>Unbundle Mode</code> 在特别适合 <strong>Monorepo 项目</strong> 里使用，因为保持模块独立性，避免不必要的捆绑，适合管理多个包的 monorepo 结构！另外，也适合独立库的开发，例如，在开发一个 TypeScript 库时，Unbundle Mode 允许你生成独立的 <code>.js</code> 和 <code>.d.ts</code> 文件，方便用户按需导入特定模块，而无需加载整个库的捆绑文件！</p><h3 id="最后" tabindex="-1"><a class="header-anchor" href="#最后" aria-hidden="true">#</a> 最后</h3><p><code>tsdown</code> 的 <code>Unbundle Mode</code> 提供了一种优雅的构建方式，通过保持源码与输出文件的直接映射，简化了库开发中的调试和维护工作，为你的项目带来便利！</p><p>今天的分享就这些了，感谢大家的阅读，如果文章中存在错误的地方欢迎指正！</p><h4 id="往期精彩推荐-1" tabindex="-1"><a class="header-anchor" href="#往期精彩推荐-1" aria-hidden="true">#</a> 往期精彩推荐</h4>`,17)),n("ul",null,[n("li",null,[n("a",b,[e[4]||(e[4]=o("🚀🚀🚀 AI 助手好写，太好写了，分分钟写出来，不用一周，三分钟！")),t(s)])]),n("li",null,[n("a",f,[e[5]||(e[5]=o("优雅，太优雅了，NestJS 🔥 实在是太优雅了！🚀🚀🚀")),t(s)])]),n("li",null,[n("a",_,[e[6]||(e[6]=o("🚀🚀 🚀 太棒了，有了它，终于不用翻阅屎山 💩 代码了！")),t(s)])]),e[7]||(e[7]=n("li",null,"更多精彩文章欢迎关注我的公众号：萌萌哒草头将军",-1))])])}const x=d(p,[["render",k],["__file","⚡️⚡️⚡️ tsdown 推出了 Unbundle 模式，开发更高效！🚀🚀🚀.html.vue"]]);export{x as default};
