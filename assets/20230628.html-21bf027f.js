import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as p,f as t}from"./app-b01463d0.js";const e={};function o(l,n){return a(),p("div",null,n[0]||(n[0]=[t(`<blockquote><p>文章首发公众号：萌萌哒草头将军，欢迎关注</p></blockquote><h3 id="🚀-关键接口介绍" tabindex="-1"><a class="header-anchor" href="#🚀-关键接口介绍" aria-hidden="true">#</a> 🚀 关键接口介绍</h3><p>最近想体验下自定义指令功能，看了看文档和 vue2 差异不大，语法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myDirective <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token comment">// 在绑定元素的 attribute 前 </span>
<span class="token comment">// 或事件监听器应用前调用</span>
<span class="token function">created</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span> <span class="token comment">// 下面会介绍各个参数的细节 }, </span>
<span class="token comment">// 在元素被插入到 DOM 前调用</span>
<span class="token function">beforeMount</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 在绑定元素的父组件</span>
<span class="token comment">// 及他自己的所有子节点都挂载完成后调用</span>
<span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 绑定元素的父组件更新前调用</span>
<span class="token function">beforeUpdate</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 在绑定元素的父组件</span>
<span class="token comment">// 及他自己的所有子节点都更新后调用</span>
<span class="token function">updated</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 绑定元素的父组件卸载前调用</span>
<span class="token function">beforeUnmount</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 绑定元素的父组件卸载后调用</span>
<span class="token function">unmounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> prevVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>起初，最大的痛点是需要手动创建 dom ，然后插入 el 中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> loadingDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">calss</span><span class="token operator">:</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
el<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>loadingDom<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样好难受啊，我不想写原生 dom ，能不能写个组件渲染到指令里呢？</p><p>我想起了我之前看到的几个 vue 接口，</p><ul><li>h函数，也就是 vue 提供的创建 vNode 的函数</li><li>render函数：将 vNode 渲染到 真实 dom 里的函数</li></ul><p>h函数用法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 完整参数签名</span>
<span class="token keyword">function</span> <span class="token function">h</span><span class="token punctuation">(</span>
    <span class="token parameter"><span class="token literal-property property">type</span><span class="token operator">:</span> string <span class="token operator">|</span> Component<span class="token punctuation">,</span>
    props<span class="token operator">?</span><span class="token operator">:</span> object <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
    children<span class="token operator">?</span><span class="token operator">:</span> Children <span class="token operator">|</span> Slot <span class="token operator">|</span> Slots</span>
<span class="token punctuation">)</span><span class="token operator">:</span> VNode
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> h <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>

<span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;container&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;h1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Hello, Vue 3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;This is a paragraph&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用h函数创建了一个 VNode，它表示一个包含 div、h1、p 的 DOM 结构。其中，div 的 class 属性为 container</p><h3 id="🚀-自定义-loading-组件" tabindex="-1"><a class="header-anchor" href="#🚀-自定义-loading-组件" aria-hidden="true">#</a> 🚀 自定义 loading 组件</h3><p>然而，当我使用 props 为组件传递值时，发现是徒劳的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Loading <span class="token keyword">from</span> <span class="token string">&#39;./components/Loading.vue&#39;</span><span class="token punctuation">;</span>

cconst option <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;一大波僵尸来袭&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">loading</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
    Loading<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>option<span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仅仅如下图一样，我以为是给组件的 props，实际上是 dom 的 props。</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/267b68e314a24280b84290fc80059ba7~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>此时我们的组件只能通过 <code>$attrs</code> 来获取这些 props 了，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;loading&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;$attrs.msg !== false&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> $attrs<span class="token punctuation">.</span>msg <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着我们给组件实现 loading 动画，当然你也可以直接使用组件库的 loading 组件。</p><p>我的实现如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>
  @keyframes identifier <span class="token punctuation">{</span>
    <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">{</span>
      <span class="token operator">-</span>webkit<span class="token operator">-</span>transform<span class="token operator">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span>loading <span class="token punctuation">{</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span>loading div <span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> 50px<span class="token punctuation">;</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> 50px<span class="token punctuation">;</span>
    border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>
    <span class="token literal-property property">border</span><span class="token operator">:</span> 2px solid green<span class="token punctuation">;</span>
    <span class="token literal-property property">margin</span><span class="token operator">:</span> 25px auto<span class="token punctuation">;</span>
    border<span class="token operator">-</span>top<span class="token operator">:</span> none<span class="token punctuation">;</span>
    border<span class="token operator">-</span>left<span class="token operator">:</span> none<span class="token punctuation">;</span>
    <span class="token literal-property property">animation</span><span class="token operator">:</span> identifier 1s infinite linear<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🚀-自定义指令" tabindex="-1"><a class="header-anchor" href="#🚀-自定义指令" aria-hidden="true">#</a> 🚀 自定义指令</h3><p>接下来我们封装自定义指令。</p><p>我们的思路是：</p><ul><li>mounted 阶段，如果是 true，那么渲染组件，否则什么都不做。</li><li>update 阶段，如果 true 则重新渲染组件，如果 false 则渲染 vnode</li></ul><p>为了可以应对更多场景，我们期望可以配置加载中的提示信息，不配置使用默认值，如果是 false ，那么仅展示 loading 图。所以参数类型如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">interface</span> <span class="token class-name">Props</span>  <span class="token punctuation">{</span><span class="token literal-property property">loading</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> msg<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token boolean">false</span><span class="token punctuation">}</span>

v<span class="token operator">-</span>loading<span class="token operator">:</span> boolean <span class="token operator">|</span> Props
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于可能是布尔值，也可能是对象，我们需要初始化配置参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">formatOption</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> boolean <span class="token operator">|</span> Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span>
      <span class="token operator">?</span> value 
      <span class="token operator">:</span> value<span class="token punctuation">.</span>loading
  <span class="token keyword">const</span> option <span class="token operator">=</span> <span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&#39;boolean&#39;</span>
    <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>defaultOption<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token punctuation">{</span>
      loading<span class="token punctuation">,</span>
      <span class="token operator">...</span>defaultOption
    <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> option <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着再 mounted 阶段获取格式化后的 loading 和 option，如果为 true 则直接渲染组件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">vLoading</span><span class="token operator">:</span> Directive<span class="token operator">&lt;</span>HTMLElement<span class="token punctuation">,</span> boolean <span class="token operator">|</span> Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> option <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">formatOption</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

    loading <span class="token operator">&amp;&amp;</span> <span class="token function">renderLoading</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> option<span class="token punctuation">)</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">renderLoading</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token literal-property property">option</span><span class="token operator">:</span> Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
    Loading<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>option<span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  el<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果进入 update 阶段，则根据情况选择渲染 laoding 组件还是 vnode。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token literal-property property">vLoading</span><span class="token operator">:</span> Directive<span class="token operator">&lt;</span>HTMLElement<span class="token punctuation">,</span> boolean <span class="token operator">|</span> Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> option <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">formatOption</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

    loading <span class="token operator">&amp;&amp;</span> <span class="token function">renderLoading</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> option<span class="token punctuation">)</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> option <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">formatOption</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">renderLoading</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> option<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">renderVNode</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">renderLoading</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token literal-property property">option</span><span class="token operator">:</span> Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
    Loading<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>option<span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  el<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">renderVNode</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token literal-property property">vnode</span><span class="token operator">:</span> VNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#loading&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们验证下功能：</p><ul><li>默认功能</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;width: 300px&quot;</span> v<span class="token operator">-</span>loading<span class="token operator">=</span>laoding<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>加载成功<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/244ea2bc975d404fab0e3ec848ea5e6b~tplv-k3u1fbpfcp-watermark.image?" alt="laoding1.gif" tabindex="0" loading="lazy"><figcaption>laoding1.gif</figcaption></figure><ul><li>自定义文本</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;width: 300px&quot;</span> v<span class="token operator">-</span>loading<span class="token operator">=</span><span class="token string">&quot;{ loading, msg: &#39;一大波僵尸来袭&#39; }&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>加载成功<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a95db550a7a43ba886b18594d1b7495~tplv-k3u1fbpfcp-watermark.image?" alt="laoding2.gif" tabindex="0" loading="lazy"><figcaption>laoding2.gif</figcaption></figure><ul><li>不展示文本</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;width: 300px&quot;</span> v<span class="token operator">-</span>loading<span class="token operator">=</span><span class="token string">&quot;{ loading, msg: false }&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>加载成功<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac5b8327e1514395ad386cc12c9f7179~tplv-k3u1fbpfcp-watermark.image?" alt="laoding3.gif" tabindex="0" loading="lazy"><figcaption>laoding3.gif</figcaption></figure><h3 id="🎉-最后" tabindex="-1"><a class="header-anchor" href="#🎉-最后" aria-hidden="true">#</a> 🎉 最后</h3><p>今天的分享就到这了，如果有问题，可以评论区告诉我，我会及时更正。</p><p>以下是完整的代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>

  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;loading&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>span v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;$attrs.msg !== false&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span> $attrs<span class="token punctuation">.</span>msg <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>
  
<span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  
<span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
  
<span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>
  @keyframes identifier <span class="token punctuation">{</span>
    <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">{</span>
      <span class="token operator">-</span>webkit<span class="token operator">-</span>transform<span class="token operator">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span>loading <span class="token punctuation">{</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">100</span><span class="token operator">%</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span>loading div <span class="token punctuation">{</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> 50px<span class="token punctuation">;</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> 50px<span class="token punctuation">;</span>
    border<span class="token operator">-</span>radius<span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>
    <span class="token literal-property property">border</span><span class="token operator">:</span> 2px solid green<span class="token punctuation">;</span>
    <span class="token literal-property property">margin</span><span class="token operator">:</span> 25px auto<span class="token punctuation">;</span>
    border<span class="token operator">-</span>top<span class="token operator">:</span> none<span class="token punctuation">;</span>
    border<span class="token operator">-</span>left<span class="token operator">:</span> none<span class="token punctuation">;</span>
    <span class="token literal-property property">animation</span><span class="token operator">:</span> identifier 1s infinite linear<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script setup lang<span class="token operator">=</span><span class="token string">&quot;ts&quot;</span><span class="token operator">&gt;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Directive<span class="token punctuation">,</span> VNode<span class="token punctuation">,</span> h<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> render  <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Loading <span class="token keyword">from</span> <span class="token string">&#39;./components/Loading.vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token literal-property property">defaultOption</span><span class="token operator">:</span> <span class="token punctuation">{</span>msg<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token boolean">false</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">&#39;努力加载中&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Props</span>  <span class="token punctuation">{</span><span class="token literal-property property">loading</span><span class="token operator">:</span> boolean<span class="token punctuation">,</span> msg<span class="token operator">?</span><span class="token operator">:</span> string <span class="token operator">|</span> <span class="token boolean">false</span><span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">formatOption</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">value</span><span class="token operator">:</span> boolean <span class="token operator">|</span> Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span>
      <span class="token operator">?</span> value 
      <span class="token operator">:</span> value<span class="token punctuation">.</span>loading
  <span class="token keyword">const</span> option <span class="token operator">=</span> <span class="token keyword">typeof</span> value <span class="token operator">!==</span> <span class="token string">&#39;boolean&#39;</span>
    <span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>defaultOption<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
    <span class="token operator">:</span> <span class="token punctuation">{</span>
      loading<span class="token punctuation">,</span>
      <span class="token operator">...</span>defaultOption
    <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> option <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">renderLoading</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token literal-property property">option</span><span class="token operator">:</span> Props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> vnode <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
    Loading<span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>option<span class="token punctuation">}</span>
  <span class="token punctuation">)</span>
  el<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">renderVNode</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> <span class="token literal-property property">vnode</span><span class="token operator">:</span> VNode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  el<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#loading&#39;</span><span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token function">render</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> el<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token literal-property property">vLoading</span><span class="token operator">:</span> Directive<span class="token operator">&lt;</span>HTMLElement<span class="token punctuation">,</span> boolean <span class="token operator">|</span> Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> option <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">formatOption</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

    loading <span class="token operator">&amp;&amp;</span> <span class="token function">renderLoading</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> option<span class="token punctuation">)</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">el</span><span class="token operator">:</span> HTMLElement<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">const</span> <span class="token punctuation">{</span> loading<span class="token punctuation">,</span> option <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">formatOption</span><span class="token punctuation">(</span>binding<span class="token punctuation">.</span>value<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">renderLoading</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> option<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token function">renderVNode</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token string">&quot;width: 300px&quot;</span> v<span class="token operator">-</span>loading<span class="token operator">=</span><span class="token string">&quot;{ loading, msg: &#39;一大波僵尸来袭&#39; }&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>加载成功<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51)]))}const r=s(e,[["render",o],["__file","20230628.html.vue"]]);export{r as default};
