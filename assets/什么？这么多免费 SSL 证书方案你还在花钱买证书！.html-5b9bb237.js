import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as l,f as o,a,b as c,e as n}from"./app-a89d38d4.js";const t={},p={href:"https://mp.weixin.qq.com/s?__biz=Mzg2Mjc0NDc3OA==&mid=2247487017&idx=1&sn=eec4994cbe72b523de20ffab9867a781&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},h={href:"https://mp.weixin.qq.com/s?__biz=Mzg2Mjc0NDc3OA==&mid=2247487289&idx=1&sn=45aaefebe448e36877d7c802bc4b8015&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},u={href:"https://mp.weixin.qq.com/s?__biz=Mzg2Mjc0NDc3OA==&mid=2247487133&idx=1&sn=5d9711a2c5aa52cba3bb3f76a92540c5&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},b={href:"https://mp.weixin.qq.com/s?__biz=Mzg2Mjc0NDc3OA==&mid=2247487017&idx=1&sn=eec4994cbe72b523de20ffab9867a781&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},m={href:"https://mp.weixin.qq.com/s?__biz=Mzg2Mjc0NDc3OA==&mid=2247487289&idx=1&sn=45aaefebe448e36877d7c802bc4b8015&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},f={href:"https://mp.weixin.qq.com/s?__biz=Mzg2Mjc0NDc3OA==&mid=2247487133&idx=1&sn=5d9711a2c5aa52cba3bb3f76a92540c5&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"};function g(_,e){const d=r("ExternalLinkIcon");return i(),l("div",null,[e[8]||(e[8]=o('<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p>上次我使用 <code>Caddy</code> 作为 Web 服务器，自动获取 <code>HTTPS</code> 证书时，有朋友指出 <code>Caddy</code> 使用的是 <code>HTTP-01</code> 挑战类型，签发证书的过程中，会暴露 <code>IP</code> ，存在安全隐患，的确是这样。</p><ul><li>12</li></ul><p>所以本文是我找到的几种十分安全的方式获取 <code>HTTPS</code> 证书的方法。</p><h4 id="往期精彩推荐" tabindex="-1"><a class="header-anchor" href="#往期精彩推荐" aria-hidden="true">#</a> 往期精彩推荐</h4>',5)),a("ul",null,[a("li",null,[a("a",p,[e[0]||(e[0]=c("不吹不黑，自己拥有服务器一定要做这些事情")),n(d)])]),a("li",null,[a("a",h,[e[1]||(e[1]=c("服务器防吃灰指南（二），不要只部署博客！")),n(d)])]),a("li",null,[a("a",u,[e[2]||(e[2]=c("神了，服务器安装 Prometheus 和 Grafana，有了随时掌控雷电的感觉！")),n(d)])]),e[3]||(e[3]=a("li",null,"更多精彩内容欢迎关注我的公众号：萌萌哒草头将军",-1))]),e[9]||(e[9]=o(`<h3 id="主要方案" tabindex="-1"><a class="header-anchor" href="#主要方案" aria-hidden="true">#</a> 主要方案</h3><h4 id="let-s-encrypt" tabindex="-1"><a class="header-anchor" href="#let-s-encrypt" aria-hidden="true">#</a> <code>Let&#39;s Encrypt</code></h4><p>由非营利组织运营并提供免费 <code>TLS</code> 证书，在小型社区网站十分受欢迎。</p><p>总的来说有 3 种主要方案通过 <code>Let&#39;s Encrypt</code> 获得 <code>SSL</code> 证书，这些方式基于不同的挑战类型（<code>Challenge Types</code>）：</p><blockquote><p>值的一提的是 <code>LS-ALPN-01</code> 不被 <code>Apache</code> 或 <code>Nginx</code> 支持，所以不在讨论这种方案。</p></blockquote><h5 id="🚀-方案-1-http-01" tabindex="-1"><a class="header-anchor" href="#🚀-方案-1-http-01" aria-hidden="true">#</a> 🚀 方案 1：<code>HTTP-01</code></h5><p><code>HTTP-01</code> 是在网站根目录下放置一个文件（路径为 http://&lt;YOUR_DOMAIN&gt;/.well-known/acme-challenge/TOKEN），<code>Let&#39;s Encrypt</code> 通过 <code>HTTP</code> 请求验证文件是否存在，所以需要开放端口 80，</p><figure><img src="https://files.mdnice.com/user/43422/67181512-95a4-4559-bd34-0187996c9d14.png" alt=" Challenge" tabindex="0" loading="lazy"><figcaption><code>HTTP-01</code> Challenge</figcaption></figure><p>文件内容由 <code>ACME</code> 客户端生成，常见的客户端例如： <code>Caddy</code> <code>Certbot</code> 、 <code>acme.sh</code> 。</p><p>当你通过域名访问时，会顺着域名解析到服务器 <code>IP</code> ，导致 <code>IP</code> 地址暴露！</p><p>基于不安全的因素，我们也不讨论怎么使用 <code>HTTP-01</code> 了！</p><h5 id="🚀-方案-2-dns-01" tabindex="-1"><a class="header-anchor" href="#🚀-方案-2-dns-01" aria-hidden="true">#</a> 🚀 方案 2：<code>DNS-01</code></h5><p><code>DNS-01</code> 是在域名 DNS 记录中添加一个 TXT 记录（路径为 _acme-challenge.&lt;YOUR_DOMAIN&gt;），<code>Let&#39;s Encrypt</code> 通过 <code>DNS</code> 查询验证记录内容。</p><figure><img src="https://files.mdnice.com/user/43422/200f3d78-666a-4856-bf55-d2a69805e8f6.png" alt=" Challenge" tabindex="0" loading="lazy"><figcaption><code>DNS-01</code> Challenge</figcaption></figure><p>不需要开放特定端口，但需等待 DNS 传播（可能长达 1 小时），支持通配符证书（例如 *.example.com）。</p><h6 id="🚗-借助-caddy-实现" tabindex="-1"><a class="header-anchor" href="#🚗-借助-caddy-实现" aria-hidden="true">#</a> 🚗 借助 <code>Caddy</code> 实现</h6><p>虽然 <code>Caddy</code> 默认采用 <code>HTTP-01</code> 获取证书，但是也支持借助阿里云或者其他云服务平台实现更加安全的 <code>DNS-01</code> 挑战类型！</p><p>申请阿里云 <code>Access Key</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">ALIYUN_ACCESS_KEY</span><span class="token operator">=</span><span class="token string">&quot;你的阿里云 Access Key ID&quot;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">ALIYUN_SECRET_KEY</span><span class="token operator">=</span><span class="token string">&quot;你的阿里云 Access Key Secret&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>下载 <code>Caddy</code> 阿里云 DNS 插件：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>xcaddy build <span class="token parameter variable">--with</span> github.com/caddy-dns/alidns
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>启用插件：</p><div class="language-caddyfile line-numbers-mode" data-ext="caddyfile"><pre class="language-caddyfile"><code>example.com, *.example.com {
    root * /var/www/html
    file_server
    tls {
        dns aliyun {env.ALIYUN_ACCESS_KEY} {env.ALIYUN_SECRET_KEY}
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="🚗-借助-nginx-实现" tabindex="-1"><a class="header-anchor" href="#🚗-借助-nginx-实现" aria-hidden="true">#</a> 🚗 借助 Nginx 实现</h6><p>我已经写了一篇博客展示使用 Nginx + <code>DNS-01</code> 的文章了！</p><ul><li>2223</li></ul><h6 id="🚗-借助-acme-sh-实现" tabindex="-1"><a class="header-anchor" href="#🚗-借助-acme-sh-实现" aria-hidden="true">#</a> 🚗 借助 <code>acme.sh</code> 实现</h6><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">export</span> <span class="token assign-left variable">Ali_Key</span><span class="token operator">=</span><span class="token string">&quot;你的AccessKeyID&quot;</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">Ali_Secret</span><span class="token operator">=</span><span class="token string">&quot;你的AccessKeySecret&quot;</span>
acme.sh <span class="token parameter variable">--issue</span> <span class="token parameter variable">-d</span> example.com <span class="token parameter variable">-d</span> <span class="token string">&#39;*.example.com&#39;</span> <span class="token parameter variable">--dns</span> dns_ali
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="cloudflare" tabindex="-1"><a class="header-anchor" href="#cloudflare" aria-hidden="true">#</a> <code>Cloudflare</code></h4><p>提供免费 <code>SSL</code>/<code>TLS</code>，自动续期，支持现代 <code>TLS</code> 协议，适合需要 CDN 支持的社区。</p><h6 id="🚗-将域名的-dns-服务器切换到-cloudflare" tabindex="-1"><a class="header-anchor" href="#🚗-将域名的-dns-服务器切换到-cloudflare" aria-hidden="true">#</a> 🚗 将域名的 DNS 服务器切换到 <code>Cloudflare</code></h6><p>在 <code>Cloudflare</code> 添加你的阿里云域名，并按照指示更改 DNS 解析 到 <code>Cloudflare</code> 提供的 Nameservers（在阿里云的域名管理后台修改）。</p><h6 id="🚗-开启-代理模式" tabindex="-1"><a class="header-anchor" href="#🚗-开启-代理模式" aria-hidden="true">#</a> 🚗 开启“代理模式”</h6><p>确保 <code>Cloudflare</code> 的 DNS 设置中，主机记录的“橙色云朵”图标是开启状态，表示启用了 <code>Cloudflare</code> 代理。</p><h6 id="🚗-开启-ssl-https" tabindex="-1"><a class="header-anchor" href="#🚗-开启-ssl-https" aria-hidden="true">#</a> 🚗 开启 <code>SSL</code>（<code>HTTPS</code>）</h6><p>在 <code>Cloudflare</code> &quot;<code>SSL</code>/<code>TLS</code>&quot; 设置中，选择 Full 或 Full (Strict) 模式：</p><p>Full：适用于阿里云服务器支持 HTTP，但没有 <code>HTTPS</code> 的情况。</p><p>Full (Strict)：适用于阿里云服务器已经配置了 <code>HTTPS</code> 的情况，安全性更高。</p><figure><img src="https://files.mdnice.com/user/43422/16af7d6e-6d42-4974-aa85-a11b413c70bb.png" alt="Cloudflare Full (Strict)" tabindex="0" loading="lazy"><figcaption>Cloudflare Full (Strict)</figcaption></figure><h6 id="🚗-强制-https" tabindex="-1"><a class="header-anchor" href="#🚗-强制-https" aria-hidden="true">#</a> 🚗 强制 <code>HTTPS</code></h6><p>在 <code>Cloudflare</code> &quot;<code>SSL</code>/<code>TLS</code>&quot; → &quot;Edge Certificates&quot; 页面，启用：<code>Always Use HTTPS</code> 和 <code>Automatic HTTPS Rewrites</code></p><h6 id="🚗-优缺点" tabindex="-1"><a class="header-anchor" href="#🚗-优缺点" aria-hidden="true">#</a> 🚗 优缺点</h6><p>优点是免费，缺点是需要将域名 <code>DNS</code> 托管到 <code>Cloudflare</code> ，国内访问速度可能会慢一些。</p><p>但是如果速度不是你担心的问题，那么确实是个很不错的选择！</p><h4 id="其他方案-了解为主" tabindex="-1"><a class="header-anchor" href="#其他方案-了解为主" aria-hidden="true">#</a> 其他方案（了解为主）</h4><ul><li><p><code>ZeroSSL</code>： 提供 90 天免费证书，快速验证，适合自动化管理。</p></li><li><p><code>SSL For Free</code>：使用 <code>ZeroSSL</code>/<code>Let&#39;s Encrypt</code>，提供 <code>90</code> 天免费证书，过期需要手动续期，支持通配符，适合多子域社区。</p></li><li><p><code>Hostinger</code>：提供无限免费 <code>SSL</code>，附带托管计划，自动续期，但依赖于托管设置。</p></li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p><code>Let&#39;s Encrypt</code> 是最安全且最适合社区的免费 <code>HTTPS</code> 方案，<code>Cloudflare</code> 紧随其后，其他的方案要么适合团队定制使用，要么需要收费，不适合个人日常使用。</p><p>所以希望更多的小伙伴可以自己通过配置获得安全且免费的 <code>SSL</code> 证书，而不是花钱去买！</p><h4 id="往期精彩推荐-1" tabindex="-1"><a class="header-anchor" href="#往期精彩推荐-1" aria-hidden="true">#</a> 往期精彩推荐</h4>`,50)),a("ul",null,[a("li",null,[a("a",b,[e[4]||(e[4]=c("不吹不黑，自己拥有服务器一定要做这些事情")),n(d)])]),a("li",null,[a("a",m,[e[5]||(e[5]=c("服务器防吃灰指南（二），不要只部署博客！")),n(d)])]),a("li",null,[a("a",f,[e[6]||(e[6]=c("神了，服务器安装 Prometheus 和 Grafana，有了随时掌控雷电的感觉！")),n(d)])]),e[7]||(e[7]=a("li",null,"更多精彩内容欢迎关注我的公众号：萌萌哒草头将军",-1))])])}const x=s(t,[["render",g],["__file","什么？这么多免费 SSL 证书方案你还在花钱买证书！.html.vue"]]);export{x as default};
