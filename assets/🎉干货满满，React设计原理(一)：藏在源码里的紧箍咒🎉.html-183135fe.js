import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c,a as s,b as a,e as l,f as i}from"./app-2fb9669b.js";const d={},r={href:"https://juejin.cn/post/7242249906257363001",target:"_blank",rel:"noopener noreferrer"};function u(k,n){const e=t("ExternalLinkIcon");return p(),c("div",null,[n[1]||(n[1]=s("h3",{id:"💡-相关阅读",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#💡-相关阅读","aria-hidden":"true"},"#"),a(" 💡 相关阅读")],-1)),s("ul",null,[s("li",null,[s("a",r,[n[0]||(n[0]=a("🎉干货满满，React设计原理(二)：藏在源码里的两个圈，关键的链表结构和双缓存技术🎉")),l(e)])])]),n[2]||(n[2]=i(`<blockquote><p>文章首发公众号： 萌萌哒草头将军，最近关注有🎁，欢迎关注</p></blockquote><p>最近在努力研究<code>React</code>源码，发现它并没有我之前想象的那么难理解。</p><p>虽然源码里面有一些概念就像一座五指山困住了桀骜不驯的孙悟空。</p><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f8fe02980b244d55a369e29b1cb898a7~tplv-k3u1fbpfcp-watermark.image?" alt="1e175ecdaa2843249f0084f011ef2b67.jpeg"></p><p align="center"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/30cc3568e5a641549c5e5170212f65d2~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%"></p><p>但如果你理解了下面的几个概念，读懂react源码就不是难事了。</p><h2 id="💎-第一座山-fiber相关变量命名" tabindex="-1"><a class="header-anchor" href="#💎-第一座山-fiber相关变量命名" aria-hidden="true">#</a> 💎 第一座山：<code>Fiber</code>相关变量命名</h2><p>我们已经知道从<code>v16.8</code>开始，<code>React</code>进入了<code>fiber</code>架构时代，将不可中断的递归改进为可中断的递归。</p><p><code>fiber</code>架构主要的工作是创建<code>fiber tree</code>，然后在合适的时机将这棵树渲染在屏幕上.</p><p>所以围绕着<code>fiber</code>，源码里出现了一堆带着<code>fiber</code>的变量。</p><h3 id="🚗-fibernode" tabindex="-1"><a class="header-anchor" href="#🚗-fibernode" aria-hidden="true">#</a> 🚗 <code>FiberNode</code></h3><p>首先，在源码中，<code>FiberNode</code>是个构造函数，它包含了许多属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">FiberNode</span><span class="token punctuation">(</span>
  <span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> $FlowFixMe<span class="token punctuation">,</span>
  <span class="token literal-property property">tag</span><span class="token operator">:</span> WorkTag<span class="token punctuation">,</span>
  <span class="token literal-property property">pendingProps</span><span class="token operator">:</span> mixed<span class="token punctuation">,</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> string<span class="token punctuation">,</span>
  <span class="token literal-property property">mode</span><span class="token operator">:</span> TypeOfMode<span class="token punctuation">,</span></span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Instance</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>elementType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token comment">// Fiber</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>return <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>refCleanup <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>pendingProps <span class="token operator">=</span> pendingProps<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>dependencies <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>

  <span class="token comment">// Effects</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>flags <span class="token operator">=</span> NoFlags<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>subtreeFlags <span class="token operator">=</span> NoFlags<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>deletions <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>childLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>alternate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些属性可以根据<code>FiberNode</code>的不同身份进行划分。</p><p><code>FiberNode</code>在<code>React</code>中通常有三种不同的身份：</p><ul><li>👉 作为架构的一环</li></ul><p>作为架构的一环，多个<code>FiberNode</code>作为基本节点构成<code>fiber tree</code>。</p><p>此时，它的相关属性如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Fiber</span>
<span class="token comment">// 指向父节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>return <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 指向第一个子节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 指向右边兄弟节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>👉 作为数据的一环</li></ul><p>作为数据的一环，它保存了基本的<code>React</code>元素信息。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Instance</span>
<span class="token comment">// 对应组件的类型，可以是class、function等</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>
<span class="token comment">// 组件的key</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
<span class="token comment">// 和type类似的属性</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>elementType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 根据tag的不同，可以是calss、function、tagName（div、input等原始的标签）</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// FiberNode对应的元素</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里说明一下<code>React</code>元素:</p><p><code>React</code>元素可以是<code>&lt;div&gt;Hello!&lt;/div&gt;</code>基本<code>HTML</code>元素，也可以是<code>&lt;App /&gt;</code>这样的组件，<code>App</code>是个类组件或者函数组件等。</p><ul><li>👉 作为调度的一环</li></ul><p>作为调度的一环，它提供了调度时的一些依据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// render相关</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>flags <span class="token operator">=</span> NoFlags<span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>subtreeFlags <span class="token operator">=</span> NoFlags<span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>deletions <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 优先级相关</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>lanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>childLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
<span class="token comment">// 缓存相关</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>alternate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="🚗-fibernode-1" tabindex="-1"><a class="header-anchor" href="#🚗-fibernode-1" aria-hidden="true">#</a> 🚗 <code>fiberNode</code></h3><p>前面说过，<code>FiberNode</code>是<code>fiber tree</code>最小单元。而<code>React</code>元素被编译之后的<code>VNode</code>都成为<code>FiberNode</code>构造函数的实例，源码中实例都用<code>fiber</code>或者<code>workInProgress</code>表示。</p><h3 id="🚗-hostrootfiber" tabindex="-1"><a class="header-anchor" href="#🚗-hostrootfiber" aria-hidden="true">#</a> 🚗 <code>HostRootFiber</code></h3><p><code>HostRootFiber</code>是源码里使用<code>createHostRootFiber</code>创建的<code>Fiber</code>根节点，它包含整棵组件树的信息。对应的是如下代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app3<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>React</code>允许你创建最多个<code>HostRootFiber</code>，也就是说，你可以有多个上述的挂载节点。</p><h3 id="🚗-rootfiber" tabindex="-1"><a class="header-anchor" href="#🚗-rootfiber" aria-hidden="true">#</a> 🚗 <code>rootFiber</code></h3><p>源码里通过<code>createHostRootFiber</code>的实例在作为参数时，偶尔也会使用<code>rootFiber</code>表示。</p><h3 id="🚗-fiberrootnode" tabindex="-1"><a class="header-anchor" href="#🚗-fiberrootnode" aria-hidden="true">#</a> 🚗 <code>FiberRootNode</code></h3><p><code>FiberRootNode</code>表示应用根节点。它保存着应用的状态信息和组件信息。它的数据结构如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">FiberRootNode</span><span class="token punctuation">(</span>
  <span class="token keyword">this</span><span class="token operator">:</span> $FlowFixMe<span class="token punctuation">,</span>
  <span class="token literal-property property">containerInfo</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token comment">// $FlowFixMe[missing-local-annot]</span>
  tag<span class="token punctuation">,</span>
  <span class="token literal-property property">hydrate</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">identifierPrefix</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
  <span class="token literal-property property">onRecoverableError</span><span class="token operator">:</span> any<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>
  <span class="token comment">// 表示应用程序的容器元素，即组件树的根节点</span>
  <span class="token comment">// 它一般是一个 DOM 元素，用来承载整个组件树的渲染结果。</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>containerInfo <span class="token operator">=</span> containerInfo<span class="token punctuation">;</span>
  <span class="token comment">// 表示当前应用程序中待处理的子树列表</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pendingChildren <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 表示当前渲染的 Fiber 树的根节点，指向 HootRootFiber</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 网络请求优化用的属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pingCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 表示最近一次渲染完成的 Fiber 树的根节点</span>
  <span class="token comment">// React 在进行组件更新时，会创建一个新的 Fiber 树</span>
  <span class="token comment">// 并将它与旧的 Fiber 树进行比较，找出需要更新的部分</span>
  <span class="token comment">// 然后进行更新。当更新完成后，最近一次渲染的结果</span>
  <span class="token comment">// 会存储在 \`finishedWork\` 属性中</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>finishedWork <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 表示当前应用程序的上下文</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 表示当前应用程序的挂起上下文</span>
  <span class="token comment">// 在 React 中，当组件的上下文发生变化时，</span>
  <span class="token comment">// React 会将新的上下文信息存储在 \`pendingContext\` 中</span>
  <span class="token comment">// 待下一次更新时再进行处理。</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pendingContext <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 当组件完成更新后的回调函数</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>callbackNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">// 表示下一次更新的过期时间</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>expirationTimes <span class="token operator">=</span> <span class="token function">createLaneMap</span><span class="token punctuation">(</span>NoTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 优先级相关的属性</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pendingLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>suspendedLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>pingedLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>expiredLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>mutableReadLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>finishedLanes <span class="token operator">=</span> NoLanes<span class="token punctuation">;</span>
  
  <span class="token comment">//....</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常状况下，<code>FiberRootNode</code>和<code>HootRootFiber</code>是一一对应的关系。</p><blockquote><p><code>FiberRootNode</code>是单例对象，每个应用程序只会有一个实例，如果一个页面有多个<code>React</code>应用，那么会有多个实例。</p></blockquote><h3 id="🚗fiberrootnode" tabindex="-1"><a class="header-anchor" href="#🚗fiberrootnode" aria-hidden="true">#</a> 🚗<code>fiberRootNode</code></h3><p><code>fiberRootNode</code>是<code>createFiberRoot</code>的返回值类型。即<code>FiberRootNode</code>实例。源码里用<code>fiberRoot</code>表示。</p><h2 id="💎-总结" tabindex="-1"><a class="header-anchor" href="#💎-总结" aria-hidden="true">#</a> 💎 总结</h2><p>在<code>Fiber</code>架构中，<code>FiberNode</code>实例<code>fiber</code>既是<code>fiber tree</code>的基本数据结构单元，记录元素节点的信息，也是组件根节点的数据单元，记录整个组件树的信息，同时也会为调度相关的工作提供依据；</p><p><code>FiberRootNode</code>的实例<code>fiberRoot</code>是应用根节点的数据单元，包含整个应用的状态信息和租价信息。它和<code>HootRootFiber</code>实例<code>rootFiber</code>是一一对应关系</p>`,45))])}const b=o(d,[["render",u],["__file","🎉干货满满，React设计原理(一)：藏在源码里的紧箍咒🎉.html.vue"]]);export{b as default};
