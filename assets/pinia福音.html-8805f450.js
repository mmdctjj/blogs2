import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as u,f as o,a as s,b as a,e as p}from"./app-f5aac357.js";const l={},r={href:"https://github.com/posva/pinia-colada",target:"_blank",rel:"noopener noreferrer"},d={href:"https://pinia-colada.esm.dev/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/7480379190984146982",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/post/7478200404259536930",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/post/7468526097011097654",target:"_blank",rel:"noopener noreferrer"},b={href:"https://juejin.cn/post/7480379190984146982",target:"_blank",rel:"noopener noreferrer"},g={href:"https://juejin.cn/post/7478200404259536930",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/7468526097011097654",target:"_blank",rel:"noopener noreferrer"};function h(y,n){const t=c("ExternalLinkIcon");return i(),u("div",null,[n[13]||(n[13]=o('<h3 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h3><p><code>pinia-colada</code> 是一个基于 <code>Pinia</code> 的状态管理库的插件。官方的功能介绍如下：</p><ul><li>⚡️ <strong>自动缓存</strong>：智能的客户端缓存，支持请求去重</li><li>🗄️ <strong>异步状态管理</strong>：轻松处理任何异步状态</li><li>🔌 <strong>插件系统</strong>：强大的插件系统</li><li>✨ <strong>乐观更新</strong>：轻松实现乐观更新</li><li>💡 <strong>合理的默认配置</strong>：提供合理的默认值，同时支持完全自定义</li><li>� <strong>开箱即用的插件</strong>：一组可组合的函数，用于处理数据获取</li><li>📚 <strong>TypeScript 支持</strong>：完全支持 TypeScript</li><li>💨 <strong>小体积</strong>：基础大小约 2kb，完全支持 Tree Shaking</li><li>📦 <strong>零依赖</strong>：除了 Pinia 外，没有任何其他依赖</li><li>⚙️ <strong>SSR 支持</strong>：开箱即用的服务端渲染支持</li></ul><p><code>pinia-colada</code> 的核心是： <code>useQuery</code> 和 <code>useMutation</code>。此外，它还提供了 <code>defineQuery</code> 和 <code>defineMutation</code>，用于在 Pinia Store 中定义查询和修改操作。</p><blockquote><p>和 <code>vue-use</code>等库提供的<code>useAxios</code>类库不同，<code>pinia-colada</code>是借助 <code>pinia</code> 缓存请求，自带缓存。</p></blockquote>',5)),s("p",null,[n[2]||(n[2]=a("官方库:")),s("a",r,[n[0]||(n[0]=a("https://github.com/posva/pinia-colada")),p(t)]),n[3]||(n[3]=s("br",null,null,-1)),n[4]||(n[4]=a(" 官方文档：")),s("a",d,[n[1]||(n[1]=a("https://pinia-colada.esm.dev/")),p(t)])]),n[14]||(n[14]=s("h4",{id:"往期精彩推荐",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#往期精彩推荐","aria-hidden":"true"},"#"),a(" 往期精彩推荐")],-1)),s("ul",null,[s("li",null,[s("a",k,[n[5]||(n[5]=a("服务器防吃灰指南二")),p(t)])]),s("li",null,[s("a",v,[n[6]||(n[6]=a("React 中使用 Vue3.6 Vapor 同款 Signal 是一种什么体验？🚀🚀🚀")),p(t)])]),s("li",null,[s("a",m,[n[7]||(n[7]=a("2025 年了，令人唏嘘的 Angular，现在怎么样了 🚀🚀🚀")),p(t)])]),n[8]||(n[8]=s("li",null,"文章同步在公众号：萌萌哒草头将军，欢迎关注！",-1))]),n[15]||(n[15]=o(`<h3 id="usequery" tabindex="-1"><a class="header-anchor" href="#usequery" aria-hidden="true">#</a> <strong><code>useQuery</code></strong></h3><h4 id="静态查询" tabindex="-1"><a class="header-anchor" href="#静态查询" aria-hidden="true">#</a> <strong>静态查询</strong></h4><p><code>useQuery</code> 用于管理异步数据获取，支持缓存、加载状态和错误处理。以下是 <code>useQuery</code> 的基本数据格式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@pinia/colada&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span>
  <span class="token comment">// 主要查询属性</span>
  state<span class="token punctuation">,</span> <span class="token comment">// 包含 data、error、status 等状态</span>
  asyncStatus<span class="token punctuation">,</span> <span class="token comment">// 异步状态（loading、error、success 等）</span>
  refresh<span class="token punctuation">,</span> <span class="token comment">// 手动刷新数据</span>
  refetch<span class="token punctuation">,</span> <span class="token comment">// 重新获取数据（忽略缓存）</span>
  <span class="token comment">// 便捷别名</span>
  error<span class="token punctuation">,</span> <span class="token comment">// 错误信息</span>
  data<span class="token punctuation">,</span> <span class="token comment">// 请求成功后的数据</span>
  status<span class="token punctuation">,</span> <span class="token comment">// 当前状态（idle、loading、success、error）</span>
  isLoading<span class="token punctuation">,</span> <span class="token comment">// 是否正在加载</span>
  isPending<span class="token punctuation">,</span> <span class="token comment">// 是否处于等待状态</span>
  isPlaceholderData<span class="token punctuation">,</span> <span class="token comment">// 是否为占位数据</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;todos&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 查询的唯一标识</span>
  <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/todos&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 查询函数</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态查询" tabindex="-1"><a class="header-anchor" href="#动态查询" aria-hidden="true">#</a> <strong>动态查询</strong></h4><p><code>key</code> 不仅可以是静态数组，还可以是函数。当 <code>key</code> 为函数时，可以根据动态参数生成唯一的查询标识。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> todoId <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">key</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string">&quot;todo&quot;</span><span class="token punctuation">,</span> todoId<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 动态生成 key</span>
  <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/todos/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>todoId<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 当 todoId 变化时，useQuery 会自动重新获取数据</span>
todoId<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>动态 <code>key</code> 的作用</strong>:</p><ul><li>当 <code>key</code> 变化时，<code>useQuery</code> 会自动重新执行查询函数。</li><li>适合需要根据参数动态获取数据的场景（如分页、筛选、详情页等）。</li></ul></blockquote><p>如果在分页的场景中使用时，可以使用 <code>placeholderData</code> 防止清空数据！</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> state <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">key</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string">&quot;contacts&quot;</span><span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>page<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/contacts?page=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">Number</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>page<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">placeholderData</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">previousData</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> previousData<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="definequery" tabindex="-1"><a class="header-anchor" href="#definequery" aria-hidden="true">#</a> <strong><code>defineQuery</code></strong></h3><p><code>defineQuery</code> 用于在 Pinia Store 中定义查询操作。它返回一个可以在 Store 中使用的查询函数。</p><h4 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> <strong>基本用法</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@pinia/colada&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useTodoStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;todo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> fetchTodos <span class="token operator">=</span> <span class="token function">defineQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">key</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;todos&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/todos&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    fetchTodos<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="在组件中使用" tabindex="-1"><a class="header-anchor" href="#在组件中使用" aria-hidden="true">#</a> <strong>在组件中使用</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useTodoStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/stores/todoStore&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todoStore <span class="token operator">=</span> <span class="token function">useTodoStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> todoStore<span class="token punctuation">.</span><span class="token function">fetchTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="动态查询-1" tabindex="-1"><a class="header-anchor" href="#动态查询-1" aria-hidden="true">#</a> <strong>动态查询</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fetchTodoById <span class="token operator">=</span> <span class="token function">defineQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">key</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string">&quot;todo&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 动态生成 key</span>
  <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/api/todos/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 在组件中使用</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">fetchTodoById</span><span class="token punctuation">(</span>todoId<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="usemutation" tabindex="-1"><a class="header-anchor" href="#usemutation" aria-hidden="true">#</a> <strong><code>useMutation</code></strong></h3><h4 id="基本用法-1" tabindex="-1"><a class="header-anchor" href="#基本用法-1" aria-hidden="true">#</a> <strong>基本用法</strong></h4><p><code>useMutation</code> 用于请求副作用，管理数据修改操作（如 <code>POST、PUT、DELETE</code> 请求）。以下是 <code>useMutation</code> 的基本用法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useMutation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@pinia/colada&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span>
  mutate<span class="token punctuation">,</span> <span class="token comment">// 触发修改操作的函数</span>
  state<span class="token punctuation">,</span> <span class="token comment">// 包含 data、error、status 等状态</span>
  asyncStatus<span class="token punctuation">,</span> <span class="token comment">// 异步状态（loading、error、success 等）</span>
  reset<span class="token punctuation">,</span> <span class="token comment">// 重置状态</span>
  <span class="token comment">// 便捷别名</span>
  error<span class="token punctuation">,</span> <span class="token comment">// 错误信息</span>
  data<span class="token punctuation">,</span> <span class="token comment">// 请求成功后的数据</span>
  status<span class="token punctuation">,</span> <span class="token comment">// 当前状态（idle、loading、success、error）</span>
  isLoading<span class="token punctuation">,</span> <span class="token comment">// 是否正在加载</span>
  isPending<span class="token punctuation">,</span> <span class="token comment">// 是否处于等待状态</span>
<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">mutation</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">newTodo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/todos&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>newTodo<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 触发修改操作</span>
<span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;New Todo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="definemutation" tabindex="-1"><a class="header-anchor" href="#definemutation" aria-hidden="true">#</a> <strong><code>defineMutation</code></strong></h3><p><code>defineMutation</code> 用于在 Pinia Store 中定义修改操作。它返回一个可以在 Store 中使用的修改函数。</p><h4 id="基本用法-2" tabindex="-1"><a class="header-anchor" href="#基本用法-2" aria-hidden="true">#</a> <strong>基本用法</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> defineMutation <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@pinia/colada&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> useTodoStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token string">&quot;todo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> addTodo <span class="token operator">=</span> <span class="token function">defineMutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">mutation</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">newTodo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&quot;/api/todos&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>newTodo<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    addTodo<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="在组件中使用-1" tabindex="-1"><a class="header-anchor" href="#在组件中使用-1" aria-hidden="true">#</a> <strong>在组件中使用</strong></h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useTodoStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/stores/todoStore&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> todoStore <span class="token operator">=</span> <span class="token function">useTodoStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> mutate<span class="token punctuation">,</span> isLoading <span class="token punctuation">}</span> <span class="token operator">=</span> todoStore<span class="token punctuation">.</span>addTodo<span class="token punctuation">;</span>

<span class="token comment">// 触发修改操作</span>
<span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&quot;New Todo&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">completed</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h3><p><code>pinia-colada</code> 通过 <code>useQuery</code>、<code>defineQuery</code>、<code>useMutation</code> 和 <code>defineMutation</code> 提供了一套强大的工具，简化了 <code>Vue</code>应用中的异步状态管理和数据加载逻辑。无论是静态查询还是动态查询，都能轻松应对复杂场景。</p><h4 id="往期精彩推荐-1" tabindex="-1"><a class="header-anchor" href="#往期精彩推荐-1" aria-hidden="true">#</a> 往期精彩推荐</h4>`,31)),s("ul",null,[s("li",null,[s("a",b,[n[9]||(n[9]=a("服务器防吃灰指南二")),p(t)])]),s("li",null,[s("a",g,[n[10]||(n[10]=a("React 中使用 Vue3.6 Vapor 同款 Signal 是一种什么体验？🚀🚀🚀")),p(t)])]),s("li",null,[s("a",f,[n[11]||(n[11]=a("2025 年了，令人唏嘘的 Angular，现在怎么样了 🚀🚀🚀")),p(t)])]),n[12]||(n[12]=s("li",null,"文章同步在公众号：萌萌哒草头将军，欢迎关注！",-1))])])}const w=e(l,[["render",h],["__file","pinia福音.html.vue"]]);export{w as default};
