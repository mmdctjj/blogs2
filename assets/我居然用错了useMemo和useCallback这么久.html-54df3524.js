import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as u,a as s,b as a,e as p,f as o}from"./app-06d780e8.js";const i={},r={href:"https://juejin.cn/post/7241567583504728119",title:"https://juejin.cn/post/7241567583504728119",target:"_blank",rel:"noopener noreferrer"},k={href:"https://link.juejin.cn/?target=",target:"_blank",rel:"noopener noreferrer"},d={href:"https://juejin.cn/post/7238153003282513957",target:"_blank",rel:"noopener noreferrer"},v={href:"https://juejin.cn/user/805263744973693",target:"_blank",rel:"noopener noreferrer"},m={href:"https://juejin.cn/user/852876753904286",target:"_blank",rel:"noopener noreferrer"};function b(g,n){const t=l("ExternalLinkIcon");return c(),u("div",null,[n[24]||(n[24]=s("blockquote",null,[s("p",null,"文章首发公众号：萌萌哒草头将军，最近关注有🎁，欢迎关注！")],-1)),n[25]||(n[25]=s("p",null,[a("我们知道，"),s("code",null,"useMemo"),a("和"),s("code",null,"useCallback"),a("主要作用是缓存中间状态，减少无意义的的"),s("code",null,"render"),a("从而提高性能。但是最近我发现我对它们的使用一直有误解！")],-1)),n[26]||(n[26]=s("h3",{id:"💡推荐阅读",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#💡推荐阅读","aria-hidden":"true"},"#"),a(" 💡推荐阅读")],-1)),s("ul",null,[s("li",null,[s("a",r,[n[0]||(n[0]=a("🎉干货满满，React设计原理(一)：藏在源码里的紧箍咒，几个容易混淆的变量🎉")),p(t)])]),s("li",null,[s("a",k,[n[1]||(n[1]=a("🎉干货满满，React设计原理(二)：藏在源码里的两个圈，关键的链表结构和双缓存技术🎉")),p(t)])])]),n[27]||(n[27]=o(`<h2 id="💎-对usememo的误解" tabindex="-1"><a class="header-anchor" href="#💎-对usememo的误解" aria-hidden="true">#</a> 💎 对<code>useMemo</code>的误解</h2><p>请看下面的代码，即使用了<code>useMemo</code>，在<code>isZero</code>的没有变的情况下，第二个子组件还是重新渲染了！</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useCallback<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">Child</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div
      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
        <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token operator">&gt;</span>
      my value is <span class="token punctuation">{</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> isZero <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> onClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Child value<span class="token operator">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Child value<span class="token operator">=</span><span class="token punctuation">{</span>isZero<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab78b32f486049348d365bd15bea677d~tplv-k3u1fbpfcp-watermark.image?" alt="demo1.gif"></p><h4 id="💡相关阅读" tabindex="-1"><a class="header-anchor" href="#💡相关阅读" aria-hidden="true">#</a> 💡相关阅读</h4>`,5)),s("p",null,[s("a",d,[n[2]||(n[2]=a("🎉尤雨溪为什么要推出Vapor Mode🎉")),p(t)])]),n[28]||(n[28]=o(`<p>其实原因在之前的文章中也提到过：</p><p><code>React</code>每次当组件状态发生改变时，都会从当前组件开始一直到所有叶子节点组件重新渲染。</p><p>文中同时也提到了这个问题的解决方案：子组件使用<code>memo</code>函数包裹，组件就可以按预期渲染了。</p><p>但是，此时我们去掉<code>useMemo</code>，子组件依然是按期望渲染的。因为每次当<code>count</code>变化，<code>useMemo</code>都会被重新计算。</p><blockquote><p><code>memo</code>和<code>useMemo</code>类似，都是基于<code>Object.is</code>的浅比较，仅仅对非引用类型有效。</p></blockquote><p>所以上面的示例中，使用<code>useMemo</code>是没有意义的。</p><h2 id="💎-对usecallback的误解" tabindex="-1"><a class="header-anchor" href="#💎-对usecallback的误解" aria-hidden="true">#</a> 💎 对<code>useCallback</code>的误解</h2><p>然而，上面的示例中，即使<code>onClick</code>函数不使用<code>useCallback</code>，组件也会按预期渲染。这是因为不管<code>onClick</code>的回调函数的缓存是否发生改变，<code>App</code>组件注定都会被渲染。</p><p>所以，现在我们得到了一个合理的代码，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> memo<span class="token punctuation">,</span> useCallback<span class="token punctuation">,</span> useMemo<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;react&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div
      style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
        <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">~</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span>
    <span class="token operator">&gt;</span>
      my value is <span class="token punctuation">{</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// const isZero = useMemo(() =&gt; !!(count % 3), [count]);</span>
  <span class="token keyword">const</span> isZero <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token punctuation">(</span>count <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// const onClick = useCallback(() =&gt; setCount(count + 1), [count]);</span>
  <span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Child value<span class="token operator">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Child value<span class="token operator">=</span><span class="token punctuation">{</span>isZero<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那到底应该何时使用<code>useCallback</code>呢？</p><p>请看下面的例子。在上面的代码基础上添加如下代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> <span class="token function-variable function">onClickMethod</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;lll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;App&quot;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span><span class="token operator">&gt;</span>click me<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Child value<span class="token operator">=</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClickMethod<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Child value<span class="token operator">=</span><span class="token punctuation">{</span>isZero<span class="token punctuation">}</span> onClick<span class="token operator">=</span><span class="token punctuation">{</span>onClickMethod<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，发现组件无法按预期渲染了，不管<code>isZero</code>是否发生变化，第二个<code>Child</code>组件都会被重新渲染。</p><p>这是因为此时的<code>onClickMethod</code>方法被做为<code>Child</code>组件的<code>onClick</code>属性了。</p><p>如果现在将<code>onClickMethod</code>方法使用<code>useCallback</code>包裹起来，就又正常了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> onClickMethod <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;lll&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98bb92e54bde484f8dbb6e1a9fde8c93~tplv-k3u1fbpfcp-watermark.image?" alt="demo2.gif"></p><p>这才是<code>useCallback</code>的正确用法！</p><h2 id="💎-总结" tabindex="-1"><a class="header-anchor" href="#💎-总结" aria-hidden="true">#</a> 💎 总结</h2><p>我们在写组件时，应该遵循下面的规律，可以有效提高页面性能：</p>`,21)),s("ul",null,[n[19]||(n[19]=s("li",null,[s("p",null,[s("s",null,[a("👉尽量多用"),s("code",null,"memo"),a("方法包裹组件（减少渲染次数）")])])],-1)),s("li",null,[s("p",null,[n[4]||(n[4]=a("更正：如果组件的")),n[5]||(n[5]=s("code",null,"props",-1)),n[6]||(n[6]=a("变化不频繁，可以使用")),n[7]||(n[7]=s("code",null,"memo",-1)),n[8]||(n[8]=a("包裹组件（尽可能的减少渲染次数），")),n[9]||(n[9]=s("code",null,"props",-1)),n[10]||(n[10]=a("变化频繁，")),n[11]||(n[11]=s("code",null,"memo",-1)),n[12]||(n[12]=a("依然会频繁渲染组件，反而造成了额外的性能消耗。感谢大佬")),s("a",v,[n[3]||(n[3]=a("oncc")),p(t)]),n[13]||(n[13]=a("指正"))])]),n[20]||(n[20]=s("li",null,[s("p",null,[a("👉当组件的渲染代价比较大时，可以使用"),s("code",null,"memo"),a("包裹组件（减少性能消耗）")])],-1)),n[21]||(n[21]=s("li",null,[s("p",null,[s("s",null,[a("👉当子组件的属性为非引用类型的中间状态时请用"),s("code",null,"useMemo"),a("（减少渲染次数）")])])],-1)),s("li",null,[s("p",null,[n[15]||(n[15]=a("更正：当变量依赖一个可能会变的值，并且需要复杂的计算时，可以使用")),n[16]||(n[16]=s("code",null,"useMemo",-1)),n[17]||(n[17]=a("缓存计算结果（减少计算消耗）感谢")),s("a",m,[n[14]||(n[14]=a("吃山鬼的神仙")),p(t)]),n[18]||(n[18]=a("大佬指正"))])]),n[22]||(n[22]=s("li",null,[s("p",null,[a("👉当子组件的属性为函数时请用"),s("code",null,"useCallback"),a("（减少渲染次数）")])],-1)),n[23]||(n[23]=s("li",null,[s("p",null,[a("👉仅作用在当前组件范围内的属性，尽量不要使用"),s("code",null,"useMemo"),a("和"),s("code",null,"useCallback"),a("（减少调用）")])],-1))]),n[29]||(n[29]=s("p",null,[a("好了今天的分享到这了，希望你也不要跟我一样再用错"),s("code",null,"useMemo"),a("和"),s("code",null,"useCallback"),a("了！")],-1))])}const y=e(i,[["render",b],["__file","我居然用错了useMemo和useCallback这么久.html.vue"]]);export{y as default};
