import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as s,b as a,e as l,f as i}from"./app-3e13ab12.js";const u={},r={href:"https://juejin.cn/post/7270430481693835276",target:"_blank",rel:"noopener noreferrer"};function k(d,n){const t=p("ExternalLinkIcon");return o(),c("div",null,[s("p",null,[n[1]||(n[1]=a("接着上篇文章：")),s("a",r,[n[0]||(n[0]=a("React 状态管理库—— zustand 为啥这么简单易用 🚀")),l(t)])]),n[2]||(n[2]=i(`<p>今天探究 <code>Zustand</code> 底层原理</p><h3 id="🚀zustand为什么这么好用" tabindex="-1"><a class="header-anchor" href="#🚀zustand为什么这么好用" aria-hidden="true">#</a> 🚀<code>zustand</code>为什么这么好用</h3><p>第一次使用 <code>zustand</code> 被惊艳到了。只需要调用<code>create</code>函数创建<code>store</code>就可以直接在任何组件使用了。</p><h4 id="💎-底层原理很简单" tabindex="-1"><a class="header-anchor" href="#💎-底层原理很简单" aria-hidden="true">#</a> 💎 底层原理很简单</h4><p>好奇的翻开代码，才发现 <code>zustand</code> 基于发布订阅模式实现的响应式。下面是核心代码实现。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createStoreImpl</span><span class="token punctuation">(</span><span class="token parameter">initialState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> state <span class="token operator">=</span> initialState<span class="token punctuation">;</span>
  <span class="token keyword">const</span> listeners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token parameter">newState</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    state <span class="token operator">=</span> newState<span class="token punctuation">;</span>
    listeners<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">listener</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">listener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    listeners<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      listeners<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    listeners<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">getState</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">,</span>
    setState<span class="token punctuation">,</span>
    subscribe<span class="token punctuation">,</span>
    destroy<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用方法如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStoreImpl</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 更新</span>
store<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 订阅</span>
<span class="token keyword">const</span> unsubscribe <span class="token operator">=</span> store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;State changed:&quot;</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

store<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 触发订阅的回调函数</span>

<span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取消订阅</span>

store<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不会触发订阅的回调函数</span>

store<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 销毁这个store</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="💎-不同环境处理" tabindex="-1"><a class="header-anchor" href="#💎-不同环境处理" aria-hidden="true">#</a> 💎 不同环境处理</h4><p>事实上，<code>zustand</code> 提供了两个版本的包，即 react 版本和非 react 的 <code>vanilla</code> 版本。</p><p>包的 export 信息如下，可以看出默认为 react 版本，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./vanilla.ts&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&quot;./react.ts&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./react.ts&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非 react 的环境使用如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;zustand/vanilla&#39;</span>

<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> getState<span class="token punctuation">,</span> setState<span class="token punctuation">,</span> subscribe <span class="token punctuation">}</span> <span class="token operator">=</span> store

<span class="token keyword">export</span> <span class="token keyword">default</span> store
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 react 模式下，和 <code>vanilla</code> 版本相同的是他们都是使用 <code>createStore</code> 创建的，使用 <code>create</code> 创建 <code>store</code></p><p>和 <code>vanilla</code> 版本不同的是，<code>createImpl</code> 的返回值是使用 <code>useStore</code> 包装了一层的返回值（实际是 <code>useSyncExternalStore api</code>）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">createImpl</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">createState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> api <span class="token operator">=</span>
    <span class="token keyword">typeof</span> createState <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">?</span> <span class="token function">createStore</span><span class="token punctuation">(</span>createState<span class="token punctuation">)</span> <span class="token operator">:</span> createState<span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">useBoundStore</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">selector<span class="token punctuation">,</span> equalityFn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    <span class="token function">useStore</span><span class="token punctuation">(</span>api<span class="token punctuation">,</span> selector<span class="token punctuation">,</span> equalityFn<span class="token punctuation">)</span><span class="token punctuation">;</span>

  Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>useBoundStore<span class="token punctuation">,</span> api<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> useBoundStore<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">create</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">createState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  createState <span class="token operator">?</span> <span class="token function">createImpl</span><span class="token punctuation">(</span>createState<span class="token punctuation">)</span> <span class="token operator">:</span> createImpl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>useStore</code> 又通过内置的包 <code>use-sync-external-store/shim/with-selector</code>处理。</p><p><code>use-sync-external-store</code>可以在 <code>Zustand</code> 中使用外部状态管理库的状态，例如 <code>Redux</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> useSyncExternalStoreExports <span class="token keyword">from</span> <span class="token string">&#39;use-sync-external-store/shim/with-selector&#39;</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> useStore<span class="token operator">&lt;</span>TState<span class="token punctuation">,</span> StateSlice<span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">api</span><span class="token operator">:</span> WithReact<span class="token operator">&lt;</span>StoreApi<span class="token operator">&lt;</span>TState<span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">selector</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">state</span><span class="token operator">:</span> TState</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> StateSlice <span class="token operator">=</span> api<span class="token punctuation">.</span>getState <span class="token keyword">as</span> any<span class="token punctuation">,</span>
  equalityFn<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">a</span><span class="token operator">:</span> StateSlice<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> StateSlice</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> boolean
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> slice <span class="token operator">=</span> <span class="token function">useSyncExternalStoreWithSelector</span><span class="token punctuation">(</span>
    api<span class="token punctuation">.</span>subscribe<span class="token punctuation">,</span>
    api<span class="token punctuation">.</span>getState<span class="token punctuation">,</span>
    api<span class="token punctuation">.</span>getServerState <span class="token operator">||</span> api<span class="token punctuation">.</span>getState<span class="token punctuation">,</span>
    selector<span class="token punctuation">,</span>
    equalityFn
  <span class="token punctuation">)</span>
  <span class="token function">useDebugValue</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span>
  <span class="token keyword">return</span> slice
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20))])}const b=e(u,[["render",k],["__file","Zustand 底层原理🚀🚀🚀.html.vue"]]);export{b as default};
