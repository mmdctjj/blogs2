import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as l,c,a as s,b as a,e as p,f as e}from"./app-e9331b9f.js";const r={},u={href:"https://github.com/mmdctjj/react-animation-demo",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/mmdctjj/react-animation-demo/blob/master/src/animations.js#L33",target:"_blank",rel:"noopener noreferrer"};function k(m,n){const t=i("ExternalLinkIcon");return l(),c("div",null,[n[6]||(n[6]=s("blockquote",null,[s("p",null,"原创文章，未经允许，禁止转载")],-1)),s("p",null,[n[1]||(n[1]=a("先看效果图(录制软件限制，只有30祯，真实效果可以运行源码)，")),s("a",u,[n[0]||(n[0]=a("源码点这里，欢迎star")),p(t)])]),n[7]||(n[7]=e(`<p>基础动画如下：<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/655d1cf50ece4a13a51a5374c0057005~tplv-k3u1fbpfcp-watermark.image?" alt="overview.gif" loading="lazy"></p><p>组合动画如下：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b5d5f20d537c4c9fb969422ae8923aa8~tplv-k3u1fbpfcp-watermark.image?" alt="overview2.gif" loading="lazy"></p><p>带缩放的动画如下：<br><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e9dbf21dbe19407f8cf770ad1e17f8df~tplv-k3u1fbpfcp-watermark.image?" alt="overview3.gif" loading="lazy"></p><h3 id="_1-动画实现的基本原理" tabindex="-1"><a class="header-anchor" href="#_1-动画实现的基本原理" aria-hidden="true">#</a> 1 动画实现的基本原理</h3><p>所谓万变不离其宗，我们的动画底层还是依靠css提供的<code>animation</code>动画</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token property">animation</span><span class="token punctuation">:</span> name duration timing-function delay iteration-count direction fill-mode play-state<span class="token punctuation">;</span>

<span class="token atrule"><span class="token rule">@keyframes</span> name</span> <span class="token punctuation">{</span>
  <span class="token selector">0%</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token selector">100%</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>fill-mode</code>规定当动画不播放时（当动画完成时，或当动画有一个延迟未开始播放时），要应用到元素的样式</p><p>默认为<code>none</code>：在动画执行之前和之后不会应用任何样式到目标元素，即采用初始样式</p><p><code>forwards</code>：将动画结束之后的样式应用在元素上，即不采用初始样式</p></blockquote><h3 id="_2-和styled-components结合起来" tabindex="-1"><a class="header-anchor" href="#_2-和styled-components结合起来" aria-hidden="true">#</a> 2 和styled-components结合起来</h3><p>主要采用<code>styled-components</code>(CSS in JS方案)提供的<code>styled</code>方法定义<code>CSS animation</code>动画参数，配合提供的<code>keyframes</code>方法定义各种类型动画实现,</p><p>例如，定义一个从底往上进入的动画</p><div class="language-style.js line-numbers-mode" data-ext="style.js"><pre class="language-style.js"><code>import styled, { keyframes } from &quot;styled-components&quot;;

const bottomToTop = keyframes\`
  0% {
    transform: translateY(50%);
  }

  100% {
    transform: translateY(0);
  }
\`

export const BottomToTop = styled.div\`
  transform: translateY(50%);
  animation: \${bottomToTop} 300ms;
  animation-iteration-count: 1;
  animation-fill-mode: forwards;
  animation-delay: 150ms;
\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了让每个列表项的动画开错落有序，还需要将动画的延时时间做下处理</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>animation<span class="token operator">-</span>delay<span class="token operator">:</span> $<span class="token punctuation">{</span><span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>index <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">150</span><span class="token punctuation">}</span>ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为了更灵活的使用，将延时参数、动画时长参数，设置为动态的变量</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">animation</span><span class="token operator">:</span> $<span class="token punctuation">{</span>bottomToTop<span class="token punctuation">}</span> $<span class="token punctuation">{</span><span class="token parameter">props</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>duration <span class="token operator">??</span> <span class="token number">300</span><span class="token punctuation">}</span>ms<span class="token punctuation">;</span>
animation<span class="token operator">-</span>delay<span class="token operator">:</span> $<span class="token punctuation">{</span><span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>index <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>delay <span class="token operator">??</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">}</span>ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>即完整的动画定义为下面这样</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> styled<span class="token punctuation">,</span> <span class="token punctuation">{</span> keyframes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;styled-components&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">AnimationProps</span> <span class="token punctuation">{</span>
  index<span class="token operator">?</span><span class="token operator">:</span> number
  duration<span class="token operator">?</span><span class="token operator">:</span> number
  delay<span class="token operator">?</span><span class="token operator">:</span> number
<span class="token punctuation">}</span>

<span class="token keyword">const</span> bottomToTop <span class="token operator">=</span> keyframes<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  0% {
    transform: translateY(50%);
  }
  100% {
    transform: translateY(0);
    opacity: 1
  }
</span><span class="token template-punctuation string">\`</span></span>

<span class="token keyword">export</span> <span class="token keyword">const</span> BottomToTop <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token operator">&lt;</span>AnimationProps<span class="token operator">&gt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  transform: translateY(50%);
  opacity: 0;
  animation: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>bottomToTop<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token parameter">props</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>duration <span class="token operator">??</span> <span class="token number">300</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms;
  animation-iteration-count: 1;
  animation-fill-mode: forwards;
  animation-delay: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>index <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>delay <span class="token operator">??</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms
</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着在列表渲染的地方使用<code>BottomToTop</code>组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    
<span class="token keyword">const</span> <span class="token function-variable function">App</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
        <span class="token comment">// ...</span>
       <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>BottomToTop key<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span>YourComponents <span class="token operator">/</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>BottomToTop<span class="token operator">&gt;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时动画样式虽然很舒服了，但是还不够优雅</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ab0d2ad478d94329a4cbef7b4bb7cb2c~tplv-k3u1fbpfcp-watermark.image?" alt="b_to_t.gif" loading="lazy"><br> 我们给动画加个回弹动画</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> bottomToTop <span class="token operator">=</span> keyframes<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  0% {
    transform: translateY(50%);
  }
  80% {
    transform: translateY(-10%);
  }
  100% {
    transform: translateY(0);
  }
</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样动画就更加有灵性了</p>`,23)),s("p",null,[n[3]||(n[3]=s("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18aed1e7bd7a49beb29da6faff34ec31~tplv-k3u1fbpfcp-watermark.image?",alt:"bottom_to_top.gif",loading:"lazy"},null,-1)),n[4]||(n[4]=s("br",null,null,-1)),n[5]||(n[5]=a(" 实现其余基础动画的方式与此类似，具体可以")),s("a",d,[n[2]||(n[2]=a("参考源码")),p(t)])]),n[8]||(n[8]=e(`<p>下面展示下组合动画的</p><h3 id="_3-思路打开" tabindex="-1"><a class="header-anchor" href="#_3-思路打开" aria-hidden="true">#</a> 3 思路打开</h3><p>除了逐个有序的渲染列表，我们还可以考虑按照一定规律给不同的元素使用不同的话，</p><h4 id="_3-1-左右交错" tabindex="-1"><a class="header-anchor" href="#_3-1-左右交错" aria-hidden="true">#</a> 3.1 左右交错</h4><p>例如，如果是奇数项，元素就从右边进入，如果是偶数项，就从左边进入</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c1e9c4468d448ba9dacec58aae56758~tplv-k3u1fbpfcp-watermark.image?" alt="right_and_left.gif" tabindex="0" loading="lazy"><figcaption>right_and_left.gif</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    
<span class="token keyword">const</span> <span class="token function-variable function">App</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
        <span class="token comment">// ...</span>
       <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> idx <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>
          <span class="token operator">?</span> <span class="token operator">&lt;</span>RightToLeft key<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> duration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span> delay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>YourComponents <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>RightToLeft<span class="token operator">&gt;</span>
            
          <span class="token operator">:</span> <span class="token operator">&lt;</span>LeftToRight key<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> duration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span> delay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>YourComponents <span class="token operator">/</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>LeftToRight<span class="token operator">&gt;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-上下交错" tabindex="-1"><a class="header-anchor" href="#_3-2-上下交错" aria-hidden="true">#</a> 3.2 上下交错</h4><p>例如，如果是奇数项，元素就从上边进入，如果是偶数项，就从下边进入</p><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a7e8995153845f78478ca6d7de9fdf6~tplv-k3u1fbpfcp-watermark.image?" alt="top_and_bottom.gif" tabindex="0" loading="lazy"><figcaption>top_and_bottom.gif</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    
<span class="token keyword">const</span> <span class="token function-variable function">App</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
        <span class="token comment">// ...</span>
       <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> idx <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>
          <span class="token operator">?</span> <span class="token operator">&lt;</span>TopToBottom key<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> duration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span> delay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>YourComponents <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>TopToBottom<span class="token operator">&gt;</span>
            
          <span class="token operator">:</span> <span class="token operator">&lt;</span>BottomToTop key<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> duration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span> delay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>YourComponents <span class="token operator">/</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>BottomToTop<span class="token operator">&gt;</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-左右交错的同时载增加从下到上的动画" tabindex="-1"><a class="header-anchor" href="#_3-3-左右交错的同时载增加从下到上的动画" aria-hidden="true">#</a> 3.3 左右交错的同时载增加从下到上的动画</h4><p>甚至，你还可以给交错的列表增加点别的动画，例如左右交错的同时载增加从下到上的动画</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/23758d8049e147c4a4e651fa0990e799~tplv-k3u1fbpfcp-watermark.image?" alt="left_and_right_and_top_toBottom.gif" tabindex="0" loading="lazy"><figcaption>left_and_right_and_top_toBottom.gif</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    
<span class="token keyword">const</span> <span class="token function-variable function">App</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">return</span> <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
        <span class="token comment">// ...</span>
       <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> idx <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span>
          <span class="token operator">?</span> <span class="token operator">&lt;</span>BottomToTop key<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> duration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span> delay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>RightToLeft index<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> duration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span> delay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>YourComponents <span class="token operator">/</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>RightToLeft<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>BottomToTop<span class="token operator">&gt;</span>
            
          <span class="token operator">:</span> <span class="token operator">&lt;</span>BottomToTop key<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> index<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> duration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span> delay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>LeftToRight index<span class="token operator">=</span><span class="token punctuation">{</span>idx<span class="token punctuation">}</span> duration<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">300</span><span class="token punctuation">}</span> delay<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span>YourComponents <span class="token operator">/</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>LeftToRight<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>BottomToTop<span class="token operator">&gt;</span>
         <span class="token punctuation">)</span>
      <span class="token punctuation">}</span>

  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-思路再打开" tabindex="-1"><a class="header-anchor" href="#_4-思路再打开" aria-hidden="true">#</a> 4 思路再打开</h3><p>我们不要局限于仅有的<code>translateX</code>、<code>translateY</code>、<code>translate</code>属性，还可以尝试下其余的动画属性，例如，我使用<code>scale</code>属性增加了缩放动画，组合我们列表动画，效果如下</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f17c692617914672bdb5d3aed2031f7b~tplv-k3u1fbpfcp-watermark.image?" alt="scale_and_right_to_left.gif" tabindex="0" loading="lazy"><figcaption>scale_and_right_to_left.gif</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> scale <span class="token operator">=</span> keyframes<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  0% {
    transform: scale(0.8);
  }

  70% {
    transform: scale(1.2);
  }

  100% {
    transform: scale(1);
    opacity: 1
  }
</span><span class="token template-punctuation string">\`</span></span>

<span class="token keyword">export</span> <span class="token keyword">const</span> Scale <span class="token operator">=</span> styled<span class="token punctuation">.</span>div<span class="token operator">&lt;</span>AnimationProps<span class="token operator">&gt;</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
  transform: scale(1);
  opacity: 0;
  animation: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>scale<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token parameter">props</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>duration <span class="token operator">??</span> <span class="token number">300</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms;
  animation-iteration-count: 1;
  animation-fill-mode: forwards;
  animation-delay: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token parameter">props</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>index <span class="token operator">??</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>delay <span class="token operator">??</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms
</span><span class="token template-punctuation string">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面你或许可以看到，我的组合动画似乎比较繁琐，例如，从左到右同时从下到上，我使用了<code>translateX</code>、<code>translateY</code>组合，而不是直接定义<code>translate</code>，其实我考虑到基础动画，组合起来使用场景更广，所以就这样使用了，当然，如果需要，你也可以单独加上这样的基础动画。</p><p>如果你有更好的思路，欢迎交流</p>`,21))])}const g=o(r,[["render",k],["__file","优美的Reactl列表动画：Styled-Components动画实践.html.vue"]]);export{g as default};
