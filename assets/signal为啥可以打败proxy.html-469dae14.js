import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as u,c as r,f as o,e as a,a as s,b as p}from"./app-113da403.js";const k={},d={start:"2"},v={start:"3"},b={href:"https://github.com/vuejs/core/pull/12349%EF%BC%89",target:"_blank",rel:"noopener noreferrer"};function m(g,n){const e=t("Mermaid"),l=t("mcfile"),c=t("ExternalLinkIcon");return u(),r("div",null,[n[12]||(n[12]=o(`<p>上篇文章主要是对尤雨溪在 2025 vue.js nation 大会的分享内容总结。分享中提到 vue3.6 将会使用 <code>alien-signals</code> 替换 <code>proxy</code> 响应式系统。</p><p>今天我们仔细盘盘 <code>alien-signals</code>。</p><h3 id="alien-signals-基本用法" tabindex="-1"><a class="header-anchor" href="#alien-signals-基本用法" aria-hidden="true">#</a> <code>alien-signals</code> 基本用法</h3><p><code>alien-signals</code> 是一个非常轻量级的响应式信号系统库，提供了标准的响应式三件套：<code>signal</code>、<code>computed</code>、<code>effect</code>。</p><p>基本的使用方法如下：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> signal<span class="token punctuation">,</span> computed<span class="token punctuation">,</span> effect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;alien-signals&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> doubleCount <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Count is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Console: Count is: 1</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doubleCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">count</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Console: Count is: 2</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doubleCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="alien-signals-的底层原理" tabindex="-1"><a class="header-anchor" href="#alien-signals-的底层原理" aria-hidden="true">#</a> <code>alien-signals</code> 的底层原理</h3><p><code>alien-signals</code> 官方提到：该项目探索基于 <code>push-pull</code> 混合策略的信号算法。与其相似的框架还有：<code>vue3</code> <code>svelte</code>。</p><p>我们先来看看什么是 <code>push-pull</code> 策略。</p><h3 id="为什么可以打败-proxy-响应式" tabindex="-1"><a class="header-anchor" href="#为什么可以打败-proxy-响应式" aria-hidden="true">#</a> 为什么可以打败 <code>proxy</code> 响应式</h3><h3 id="和-solid-js-的-signal-谁更优秀" tabindex="-1"><a class="header-anchor" href="#和-solid-js-的-signal-谁更优秀" aria-hidden="true">#</a> 和 <code>solid.js</code> 的 <code>signal</code> 谁更优秀？</h3><p>说到这里，最先想到的一定是 <code>solid.js</code> 了，我很早以前就介绍过这个新兴的前端框架了。</p><p>它一直被公认为是标准的<code>signal</code>系统实现。所以，我就很想知道 <code>alien-signals</code> 的实现相较于 <code>solid.js</code> 的 <code>signal</code> 有啥不一样的地方吗？</p><p>经过我的这个周末的研究发现，<code>alien-signals</code> 确实做了极大的创新！</p>`,14)),a(e,{id:"mermaid-40",code:"eJx9kltL40AUgN/9FQPi2xbR7LbGhwXBp8CyD7Nvgw/dmmjZ0C5pRHyLeGmjluKtFS9oRbGIxHqvjdU/k5lM/oVjZyIjXs7jnO+cOfOdMcz8dGYybdngz2gPYNHXB0bMrJ4DMDuRS5sFQDabpOyRm9mwscyyXagw9XfCSv+f5GhCoN3US4zAAYRLO9hviy5jIJH4yY4HUejPB/5tP3bPg85uuNGg3mG0tTAmlQ4KVkH03MeVqmgBsPMgY4rAviPSuiT76/3EPaH1lcjx6eOqDP5A7BpSugvaR0F7LZ4kicjONak2P+meFFgKRc52uH9MXIfsunxY6ryZNxW/rXum58Z7Yo8wb2bHNfi1QQG9NoTaAMpYetrWZXVQi9VR7ymqebFXqYx7gxrzVjzFS43gcY/eVOlTh7ZOZY6Lg1osDoz+/iXnP/IFtSSizTmWAFC3bd0C3J5cx5VBLYXIQZF6TX5/0GrT+YrMcV9QG0LEvSdn9fedhgShoqhYZjnq1UOvhis13LnA6+VoroFLi3KBGj/p3Qq4dLxwRWc3XtXbM6b+8keBkTXN4V7DUFl8K9hW/p8+3KsoioSxdQhMVTMZw3iDPQPArTx+"}),n[13]||(n[13]=s("h4",{id:"_1-双向链表实现响应式",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-双向链表实现响应式","aria-hidden":"true"},"#"),p(" 1. 双向链表实现响应式")],-1)),n[14]||(n[14]=s("p",null,[p("和 "),s("code",null,"solid.js"),p(" 通过发观察者模式不同，")],-1)),a(e,{id:"mermaid-47",code:"eJyFjr0OgjAUhXefogmrDMokg4kUKJuJujUMYFsk1paUGuPb2/QnMSENd/zOd8+9g+qmB7iVG2DmhC9SanD+CKpakKZHUGAoX5MUVHgMdq1TbQwX8d7FhY1LfB0H0fGw5GiFK8boXQcKLa2D6xscRfbAW1PiKLK0CQ3GtXjWX07NT2zkPE/YgW1nreST5kmWZX9G4Y2+jxlw1Si9QRiJGFX4g8SMerUDhY6o0USu/AA6C4U7"}),a(e,{id:"mermaid-48",code:"eJyFjzEPgjAUhHd/RRNXwbTdGFyAjQ03woD2FQkVGihG/72lLchgtUvTu++u79VDJW/onOyQPjku8qbuKoFwiYLghDJcZE3XltYli0ucSzZuho0W4yLu73JSwHSJdYhzzCu2XEa3WWq0FBcp53BVc3ItDeUAj3y6HDt4Kn2H5ue1+atNP+lZTkA62eijegnQyyLeCBHtGWeHUQ19C9GeUht1CPmL6HUswr1IuiLMh+hJLQIAPmSZ5QdCPcgbm3yGDA=="}),a(e,{id:"mermaid-49",code:"eJx1Ur1Kw1AU3vsUF0q3tJgfETK4tNky2TF0SJObWJomIT/i0KngImIVwU3RQXAvIqLUlzFtfAtvcu7NTYNtp+/nfOdLctzIDE+RftJC5NfpoOHE9U0P5ZeL7eKjJIeiAaSKrCD1kxGwUsXOYnfUYvP9YBamCbbrCX3RYLSK7CAde5gPaI6DraRu10QDSBV5geviiJv1iT+tW3XRKCkRSukSQIlCGaBMoQJQ4Xk/64f87T67WG1Xn/n34+b6hT4y6naPSTp9VEASXVmiPmg6aBT16ZxM15dIoylUU2gXprEq2fIqu7n9vVvnz6+1KsW6Xo9Y5z4+T4bpeF4VIatBCSN8Bgov1ZzhlZozNK1S+Ayv2pyRG2/w/9osbYBD3qDotisoVdjm6T37WpbI8sw4HmAHxXCQzsTz1LatOAeOLcRJFEyx2pZlCK3MFrs+sJMrOhqb++0Ybo+ZbcVW9pu94nao9bD471i5l3xpgZwM9K7R5DhYvRqribRFjdNFQZcEXRbIqy+2tv4A+xAVaw=="}),a(e,{id:"mermaid-50",code:"eJx9ksFKwzAYx+97ijAZO7iBzU724KXrWbDewg5dm3bFLBlNiy+gB0EQBD0Igk8gwlCRiU+zbj6GbZK2KZ3rIbS//z/f9++XhLG7mIHzcQfkT68Htqur9eoju78Fp5cUxwKfMZagYpFsIqDF5gsDFSujmCoJGLUIWyKcdMo2ThRSl4DNw1veUECeTmUWKXHUVZ4xXmDqY+pFmAM06coOxeMYyGMpTUxwpEGI5phzN8Qm6M8wIawvxbxI1b5IlibY3xlAim4SMZqn0L72RLEM5LN0SrCvsSoJOAQiaDuIHQTYS/jOHEpDXfmyp7ttIMLCMB8xFlZNgSguNjUVPcH65/n3/TG7Xm6Xq+q0wXB4Ik+4jWB9/II50lMDS4GWDCWoC0hgKaBk5W+Y7UZlu9pX/sTm5TP7vsten9ZfN4J5xOV8jAPAxM0LIkLMg+A4GPAkZhfYPBiNRk0jl7dNOv3A/9/plZdHVd3nlVMvnX7TWVvFhAdihGKFMrdmcIyBA1VIDVu5H1aJNME2BvmYZPvOH964K8M="}),a(e,{id:"mermaid-51",code:"eJxLL0osyFAIceFSAILg6ODM9LzEnFgFXV07hZpnfSteNjS+aOl/tqD9xboNNQrOhtHO+bkFpSWpKYaxYB3OhriUGsGVGkGVGuFQ6hrtmpaWmlwCUeaqoKunC1TV0/lyTsOz7s6n/dNApsGNwCJpCHcKpmQwF1iyuKQyJ1UhWCEtMyfHSjnFJM0gLQVJwtlQB2g2RBLoFvOkRCRJV7hEikmKCRcAf1VyoA=="}),a(e,{id:"mermaid-52",code:"eJxLL0osyFAIceFSAILg6ODM9LzEnFgFXV07hZrnq7uf9m5+1rfiZUNjjYJztHN+bkFpSWpKLFixMzZFrtGuaWmpySWxXGA1xSWVOakKwQppmTk5VsopJmkGaSlIEs5QCaAW86REJAlXuESKSYoJFwDCczmM"}),a(e,{id:"mermaid-53",code:"eJydUl1LwlAYvvdXHOrWpC37oItutt0PVleji+k2lZYOnYTgxYSikkoKUukDlVCvGhKpEdKvccf5L3rt6BymIZ1xLrbn4zx7zhtJSnoU7bM+BCuVDpH3FXzfwteWXSjjx/dhuYOt9soPY7QEUYhF4pKGbLMHMC62DtHa2h7KUgHkNBt24ZZ8zSJe1JMJXYpIhnLoynlCpgMIV88dq+WcFgb5DjZzWcRQIpM41tOGIlNjtP/xidhY0sgsZ0C7BvS/DDiRU1UlbCA7X7XP6sNyxb4oEaUSl30zLTlWbWCVZvvhiP0G2F82ndoVIpaQjhXDUSV8NBOHYYkgCIIXE1fq/a9np10c1bEEh55yKMLZDKDhk+k0cpNrOIBe07oMtzApx3M4vVBELxSBIVFtwY3fdO1CESQwDVkkeDhj5wWcOXX2e1V89zpbp3vYdmA0cXb3bRJR4CkxFZU0LXHC/54zN8AcHf2HDlyJbgcqMR8G0645D2fsvYAz/TkjoylIQGpM03ZX5aC6rsoegKH8kJKAMCTbIckDci4gB+WgB+D9DOuHWmDTfogL2zXZHD2+b4g3cxY="}),a(e,{id:"mermaid-54",code:"eJx9Us9LwlAcv/tXfLGrSm/NpA4dXJ4l7DY8TPemwppiGxXs4KUsUpQgkyLKQ3SIhlBGgfTX6Ob+i972Nh0zfe/0+Px6n+97pbpQK8PhfgTIOtYK9Bw1b4dm25h2+ubDp93/Mo1R1GU4K8fnKiVFkGHaGBPY7A3zEI/vgY4SYL1dT9sfduPeenrRIctnTxRcB66qqPhUzbsWWBEj4TTXZTJ+Nm/ew2lZ6s0kgLpOfh9no54OHOK56lFNU7GIwG62icHMGFjGHU1ZK2XmUmaFlENUu+VXogQdcgsKs5byX82r19mgFS7oR7GJxUB1yCA+I0m4qCKgssDdvOCQgPEEzJIg4yUkEwT6sZsdStAhzacFtViGAw1rOMD3Apb5K5t9n1vdi3CzNLXZdmwcg6nRMi+75FuEXyhFGK7D/IV4TsaCotXCX0Y9kzHkQKrI8u6GyEqbkhgAOBQjw6EgmUWqIATADIqRYj4osiIbALM+sOPsAJD2gaSzg1mLHBajyB/XwzxM"}),n[15]||(n[15]=o(`<p>主要有三个核心接口：</p><ol><li><strong>Dependency（依赖项）</strong></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Dependency</span> <span class="token punctuation">{</span>
  subs<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  subsTail<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>Subscriber（订阅者）</strong></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Subscriber</span> <span class="token punctuation">{</span>
  flags<span class="token operator">:</span> SubscriberFlags<span class="token punctuation">;</span>
  deps<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  depsTail<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>Link（链接）</strong></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Link</span> <span class="token punctuation">{</span>
  dep<span class="token operator">:</span> Dependency <span class="token operator">|</span> <span class="token punctuation">(</span>Dependency <span class="token operator">&amp;</span> Subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  sub<span class="token operator">:</span> Subscriber <span class="token operator">|</span> <span class="token punctuation">(</span>Dependency <span class="token operator">&amp;</span> Subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>
  prevSub<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  nextSub<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  nextDep<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-核心特性" tabindex="-1"><a class="header-anchor" href="#_2-核心特性" aria-hidden="true">#</a> 2. 核心特性</h3><ol><li><strong>双向链表结构</strong></li></ol><ul><li>使用 Link 结构构建了一个高效的双向链表系统</li><li>通过 prevSub 和 nextSub 维护订阅关系</li><li>通过 nextDep 维护依赖关系</li></ul>`,10)),s("ol",d,[s("li",null,[n[0]||(n[0]=s("strong",null,"计算属性优化",-1)),n[1]||(n[1]=s("br",null,null,-1)),n[2]||(n[2]=p(" 从 ")),a(l,{name:"computed.spec.ts",path:"/Users/bytedance/Documents/workSpace/alien-signals/tests/computed.spec.ts"}),n[3]||(n[3]=p(" 可以看出："))])]),n[16]||(n[16]=s("ul",null,[s("li",null,"支持多层计算属性嵌套"),s("li",null,"实现了脏检查机制"),s("li",null,"采用惰性求值策略")],-1)),s("ol",v,[s("li",null,[n[4]||(n[4]=s("strong",null,"内存优化",-1)),n[5]||(n[5]=s("br",null,null,-1)),n[6]||(n[6]=p(" 从 ")),a(l,{name:"memoryUsage.mjs",path:"/Users/bytedance/Documents/workSpace/alien-signals/benchs/memoryUsage.mjs"}),n[7]||(n[7]=p(" 的基准测试可以看出，该库在内存使用上非常高效。"))])]),n[17]||(n[17]=s("h3",{id:"_3-与-vue-3-6-的关系",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_3-与-vue-3-6-的关系","aria-hidden":"true"},"#"),p(" 3. 与 Vue 3.6 的关系")],-1)),n[18]||(n[18]=s("p",null,"根据 README 中的信息：",-1)),s("ol",null,[s("li",null,[n[9]||(n[9]=p("这个库的核心算法已经被移植到 Vue 3.6（PR: ")),s("a",b,[n[8]||(n[8]=p("https://github.com/vuejs/core/pull/12349）")),a(c)])]),n[10]||(n[10]=s("li",null,"作者在优化 Vue 3.4 的响应式系统时获得了大量经验",-1)),n[11]||(n[11]=s("li",null,"相比 Vue 3.5 的 pull-based 算法，这个库采用了 push-pull 混合的实现",-1))]),n[19]||(n[19]=o(`<h3 id="_4-主要优势" tabindex="-1"><a class="header-anchor" href="#_4-主要优势" aria-hidden="true">#</a> 4. 主要优势</h3><ol><li><strong>性能优化</strong></li></ol><ul><li>使用双向链表而不是数组来存储依赖关系</li><li>实现了高效的脏检查机制</li><li>采用增量更新策略</li></ul><ol start="2"><li><strong>内存效率</strong></li></ol><ul><li>通过复用 Link 结构的字段减少内存占用</li><li>使用链表结构避免了数组扩容和收缩的开销</li></ul><ol start="3"><li><strong>可靠性</strong></li></ol><ul><li>完善的测试覆盖</li><li>已在 Vue 语言工具中得到实践验证</li></ul><h3 id="_5-使用场景" tabindex="-1"><a class="header-anchor" href="#_5-使用场景" aria-hidden="true">#</a> 5. 使用场景</h3><ol><li>Vue 3.6+ 的响应式系统</li><li>Vue 语言工具中的虚拟代码生成</li><li>需要高性能响应式系统的独立项目</li></ol><p>这个库的设计非常精巧，特别是其链表结构和更新算法的实现，为 Vue 3.6 提供了更高效的响应式系统基础。</p><p>让我详细分析 alien-signals 中的双向链表结构及其特点：</p><h3 id="_1-数据结构分析" tabindex="-1"><a class="header-anchor" href="#_1-数据结构分析" aria-hidden="true">#</a> 1. 数据结构分析</h3><p>alien-signals 的双向链表结构比较特殊，主要由三个部分组成：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 依赖项</span>
<span class="token keyword">interface</span> <span class="token class-name">Dependency</span> <span class="token punctuation">{</span>
  subs<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 指向订阅者链表的头</span>
  subsTail<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 指向订阅者链表的尾</span>
<span class="token punctuation">}</span>

<span class="token comment">// 订阅者</span>
<span class="token keyword">interface</span> <span class="token class-name">Subscriber</span> <span class="token punctuation">{</span>
  flags<span class="token operator">:</span> SubscriberFlags<span class="token punctuation">;</span> <span class="token comment">// 状态标记</span>
  deps<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 指向依赖链表的头</span>
  depsTail<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 指向依赖链表的尾</span>
<span class="token punctuation">}</span>

<span class="token comment">// 链接节点</span>
<span class="token keyword">interface</span> <span class="token class-name">Link</span> <span class="token punctuation">{</span>
  dep<span class="token operator">:</span> Dependency <span class="token operator">|</span> <span class="token punctuation">(</span>Dependency <span class="token operator">&amp;</span> Subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 依赖项引用</span>
  sub<span class="token operator">:</span> Subscriber <span class="token operator">|</span> <span class="token punctuation">(</span>Dependency <span class="token operator">&amp;</span> Subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 订阅者引用</span>
  prevSub<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 前一个订阅者</span>
  nextSub<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 下一个订阅者</span>
  nextDep<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// 下一个依赖项</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-与-react-fiber-的区别" tabindex="-1"><a class="header-anchor" href="#_2-与-react-fiber-的区别" aria-hidden="true">#</a> 2. 与 React Fiber 的区别</h3><ol><li><strong>结构差异</strong></li></ol><ul><li><p>React Fiber：单向链表结构，主要用于任务调度</p><ul><li>child：指向第一个子节点</li><li>sibling：指向下一个兄弟节点</li><li>return：指向父节点</li></ul></li><li><p>alien-signals：双向多链表结构，用于依赖追踪</p><ul><li>prevSub/nextSub：订阅者之间的双向链接</li><li>nextDep：依赖项之间的单向链接</li><li>dep/sub：跨链表的相互引用</li></ul></li></ul><ol start="2"><li><strong>用途差异</strong></li></ol><ul><li>React Fiber：用于中断和恢复渲染工作</li><li>alien-signals：用于精确的依赖追踪和更新传播</li></ul><ol start="3"><li><strong>优化重点</strong></li></ol><ul><li>React Fiber：优化大规模 UI 更新的调度</li><li>alien-signals：优化依赖收集和更新传播的性能</li></ul><h3 id="_3-脏检查机制分析" tabindex="-1"><a class="header-anchor" href="#_3-脏检查机制分析" aria-hidden="true">#</a> 3. 脏检查机制分析</h3><p>alien-signals 的脏检查机制与 Angular 的确有一些相似之处，但实现方式和效率有很大差异：</p><ol><li><strong>Angular 的脏检查</strong>：</li></ol><ul><li>采用定期轮询检查</li><li>需要遍历所有绑定</li><li>比较新旧值是否相等</li><li>可能需要多轮检查直到稳定</li></ul><ol start="2"><li><strong>alien-signals 的脏检查</strong>：</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">checkDirty</span><span class="token punctuation">(</span>link<span class="token operator">:</span> Link<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 省略部分代码 ...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;flags&quot;</span> <span class="token keyword">in</span> dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> depFlags <span class="token operator">=</span> dep<span class="token punctuation">.</span>flags<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>
      <span class="token punctuation">(</span>depFlags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>SubscriberFlags<span class="token punctuation">.</span>Computed <span class="token operator">|</span> SubscriberFlags<span class="token punctuation">.</span>Dirty<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span>
      <span class="token punctuation">(</span>SubscriberFlags<span class="token punctuation">.</span>Computed <span class="token operator">|</span> SubscriberFlags<span class="token punctuation">.</span>Dirty<span class="token punctuation">)</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">updateComputed</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 只在真正需要更新时传播</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subs<span class="token punctuation">.</span>nextSub <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">shallowPropagate</span><span class="token punctuation">(</span>subs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// ... 省略部分代码 ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要特点：</p><ul><li><strong>增量检查</strong>：只检查被标记为脏的计算属性</li><li><strong>精确传播</strong>：通过链表结构精确定位需要更新的依赖</li><li><strong>优化策略</strong>： <ul><li>使用位运算进行状态检查</li><li>采用 push-pull 混合策略</li><li>避免不必要的重复计算</li></ul></li></ul><h3 id="_4-性能优势" tabindex="-1"><a class="header-anchor" href="#_4-性能优势" aria-hidden="true">#</a> 4. 性能优势</h3><ol><li><strong>内存效率</strong></li></ol><ul><li>链表结构避免了数组的内存开销</li><li>节点复用减少内存分配</li></ul><ol start="2"><li><strong>更新效率</strong></li></ol><ul><li>精确的依赖追踪</li><li>增量式更新</li><li>避免无效的脏检查</li></ul><ol start="3"><li><strong>可预测性</strong></li></ol><ul><li>确定性的更新传播路径</li><li>避免 Angular 式的多轮检查</li></ul><p>这种实现方式特别适合 Vue 3.6 的响应式系统，因为它既保持了高性能，又维持了可预测的更新行为。相比 Angular 的脏检查机制，它更加精确和高效，而相比 React 的 Fiber 架构，它更专注于依赖管理而非任务调度。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 基础类型定义</span>
<span class="token keyword">interface</span> <span class="token class-name">Dependency</span> <span class="token punctuation">{</span>
  subs<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  subsTail<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Subscriber</span> <span class="token punctuation">{</span>
  flags<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  deps<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  depsTail<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Link</span> <span class="token punctuation">{</span>
  dep<span class="token operator">:</span> Dependency<span class="token punctuation">;</span>
  sub<span class="token operator">:</span> Subscriber<span class="token punctuation">;</span>
  prevSub<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  nextSub<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
  nextDep<span class="token operator">:</span> Link <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 标记位</span>
<span class="token keyword">const</span> <span class="token keyword">enum</span> Flags <span class="token punctuation">{</span>
  <span class="token constant">DIRTY</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token constant">COMPUTED</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// 全局状态</span>
<span class="token keyword">let</span> activeSubscriber<span class="token operator">:</span> Subscriber <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> batchQueue<span class="token operator">:</span> Set<span class="token operator">&lt;</span>Link<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token comment">// 创建信号</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">signal</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>initialValue<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dep<span class="token operator">:</span> Dependency <span class="token operator">=</span> <span class="token punctuation">{</span>
    subs<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    subsTail<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> value <span class="token operator">=</span> initialValue<span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">signal</span><span class="token punctuation">(</span>newValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> newValue<span class="token operator">!</span><span class="token punctuation">;</span>
        <span class="token function">propagate</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>activeSubscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">link</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> activeSubscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建计算属性</span>
<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> dep<span class="token operator">:</span> Dependency <span class="token operator">&amp;</span> Subscriber <span class="token operator">=</span> <span class="token punctuation">{</span>
    subs<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    subsTail<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    flags<span class="token operator">:</span> Flags<span class="token punctuation">.</span><span class="token constant">COMPUTED</span><span class="token punctuation">,</span>
    deps<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    depsTail<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">signal</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> <span class="token punctuation">(</span>Flags<span class="token punctuation">.</span><span class="token constant">DIRTY</span> <span class="token operator">|</span> Flags<span class="token punctuation">.</span><span class="token constant">PENDING</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">updateComputed</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> getter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>activeSubscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">link</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> activeSubscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  dep<span class="token punctuation">.</span><span class="token function-variable function">compute</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> prevSub <span class="token operator">=</span> activeSubscriber<span class="token punctuation">;</span>
    activeSubscriber <span class="token operator">=</span> dep<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> newValue <span class="token operator">=</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        value <span class="token operator">=</span> newValue<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      activeSubscriber <span class="token operator">=</span> prevSub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> signal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 创建副作用</span>
<span class="token keyword">function</span> <span class="token function">effect</span><span class="token punctuation">(</span><span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> sub<span class="token operator">:</span> Subscriber <span class="token operator">=</span> <span class="token punctuation">{</span>
    flags<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    deps<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    depsTail<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> prevSub <span class="token operator">=</span> activeSubscriber<span class="token punctuation">;</span>
    activeSubscriber <span class="token operator">=</span> sub<span class="token punctuation">;</span>
    <span class="token function">cleanup</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      activeSubscriber <span class="token operator">=</span> prevSub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">cleanup</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 依赖链接</span>
<span class="token keyword">function</span> <span class="token function">link</span><span class="token punctuation">(</span>dep<span class="token operator">:</span> Dependency<span class="token punctuation">,</span> sub<span class="token operator">:</span> Subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> link<span class="token operator">:</span> Link <span class="token operator">=</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">,</span>
    sub<span class="token punctuation">,</span>
    prevSub<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    nextSub<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
    nextDep<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token comment">// 连接依赖链表</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dep<span class="token punctuation">.</span>subsTail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">.</span>subsTail<span class="token punctuation">.</span>nextSub <span class="token operator">=</span> link<span class="token punctuation">;</span>
    link<span class="token punctuation">.</span>prevSub <span class="token operator">=</span> dep<span class="token punctuation">.</span>subsTail<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    dep<span class="token punctuation">.</span>subs <span class="token operator">=</span> link<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  dep<span class="token punctuation">.</span>subsTail <span class="token operator">=</span> link<span class="token punctuation">;</span>

  <span class="token comment">// 连接订阅者链表</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>sub<span class="token punctuation">.</span>depsTail<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    link<span class="token punctuation">.</span>nextDep <span class="token operator">=</span> sub<span class="token punctuation">.</span>deps<span class="token punctuation">;</span>
    sub<span class="token punctuation">.</span>depsTail<span class="token punctuation">.</span>nextDep <span class="token operator">=</span> link<span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    sub<span class="token punctuation">.</span>deps <span class="token operator">=</span> link<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  sub<span class="token punctuation">.</span>depsTail <span class="token operator">=</span> link<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 更新传播</span>
<span class="token keyword">function</span> <span class="token function">propagate</span><span class="token punctuation">(</span>dep<span class="token operator">:</span> Dependency<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>batchQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    batchQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> link <span class="token operator">=</span> dep<span class="token punctuation">.</span>subs<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>link<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sub <span class="token operator">=</span> link<span class="token punctuation">.</span>sub<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>sub<span class="token punctuation">.</span>flags <span class="token operator">&amp;</span> Flags<span class="token punctuation">.</span><span class="token constant">COMPUTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sub<span class="token punctuation">.</span>flags <span class="token operator">|=</span> Flags<span class="token punctuation">.</span><span class="token constant">DIRTY</span><span class="token punctuation">;</span>
      <span class="token function">propagate</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      batchQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    link <span class="token operator">=</span> link<span class="token punctuation">.</span>nextSub<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>batchQueue <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>activeSubscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> queue <span class="token operator">=</span> batchQueue<span class="token punctuation">;</span>
    batchQueue <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
    queue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>link<span class="token punctuation">.</span>sub<span class="token punctuation">.</span>compute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        link<span class="token punctuation">.</span>sub<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 清理订阅</span>
<span class="token keyword">function</span> <span class="token function">cleanup</span><span class="token punctuation">(</span>sub<span class="token operator">:</span> Subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> link <span class="token operator">=</span> sub<span class="token punctuation">.</span>deps<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>link<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> nextDep <span class="token operator">=</span> link<span class="token punctuation">.</span>nextDep<span class="token punctuation">;</span>
    <span class="token keyword">const</span> dep <span class="token operator">=</span> link<span class="token punctuation">.</span>dep<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>link<span class="token punctuation">.</span>prevSub<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      link<span class="token punctuation">.</span>prevSub<span class="token punctuation">.</span>nextSub <span class="token operator">=</span> link<span class="token punctuation">.</span>nextSub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      dep<span class="token punctuation">.</span>subs <span class="token operator">=</span> link<span class="token punctuation">.</span>nextSub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>link<span class="token punctuation">.</span>nextSub<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      link<span class="token punctuation">.</span>nextSub<span class="token punctuation">.</span>prevSub <span class="token operator">=</span> link<span class="token punctuation">.</span>prevSub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      dep<span class="token punctuation">.</span>subsTail <span class="token operator">=</span> link<span class="token punctuation">.</span>prevSub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    link <span class="token operator">=</span> nextDep<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  sub<span class="token punctuation">.</span>deps <span class="token operator">=</span> sub<span class="token punctuation">.</span>depsTail <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> signal<span class="token punctuation">,</span> computed<span class="token punctuation">,</span> effect <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38))])}const w=i(k,[["render",m],["__file","signal为啥可以打败proxy.html.vue"]]);export{w as default};
