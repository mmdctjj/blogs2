import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as l,c as i,f as t,a as s,b as p,e}from"./app-5a910848.js";const u={},r={href:"https://juejin.cn/post/7236719086049837093",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/7226689042406637624",target:"_blank",rel:"noopener noreferrer"};function d(v,n){const a=c("ExternalLinkIcon");return l(),i("div",null,[n[3]||(n[3]=t('<blockquote><p>文章首发在公众号：萌萌哒草头将军，最近关注有抽五本书送给大家，关注后回复：活动</p></blockquote><p align="center"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a30a0f552e84feba7e9fd8207eb582d~tplv-k3u1fbpfcp-watermark.image?" alt="grif.gif" width="50%"></p><p>最近我又又双学习了一个新框架，<code>Qwik</code></p><p align="center"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a971a174b4564496ac766e9ec7022a25~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%"></p><p>真的没完没了了，</p><p align="center"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7509dc3757a348f5a91e6e58b6e1658d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%"></p><p>不过作为&quot;前端娱乐圈战地记者&quot;，我继续帮大家踩雷。</p><p align="center"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/16aab0927d8f46e0ba95475aca38b694~tplv-k3u1fbpfcp-watermark.image?" alt="Screenshot_2023-06-11-19-13-32-405_com.daimajia.gold-edit.jpg"></p><h3 id="💡-同系列阅读" tabindex="-1"><a class="header-anchor" href="#💡-同系列阅读" aria-hidden="true">#</a> 💡 同系列阅读</h3>',9)),s("ul",null,[s("li",null,[s("a",r,[n[0]||(n[0]=p("学不完的框架，🐔啄不完的米，SolidJS，你到底爱谁？😘")),e(a)])]),s("li",null,[s("a",k,[n[1]||(n[1]=p("🔥超级简单的Svelte，学不会你来打我")),e(a)])]),n[2]||(n[2]=s("li",null,"真心希望不会有烧不断地锁这篇文章！！！",-1))]),n[4]||(n[4]=t(`<h2 id="💎-初识qwik" tabindex="-1"><a class="header-anchor" href="#💎-初识qwik" aria-hidden="true">#</a> 💎 初识qwik</h2><p>废话不多说，我们先上代码。一个简单的计数器功能</p><h3 id="🚀-usesignal" tabindex="-1"><a class="header-anchor" href="#🚀-usesignal" aria-hidden="true">#</a> 🚀 <code>useSignal</code></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">component$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useSignal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick$<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>count<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们给这个计数器加上监听事件（后面会详细讲）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">useVisibleTask$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> track <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83291b82343845fa928fe3973369022e~tplv-k3u1fbpfcp-watermark.image?" alt="sigal.gif" tabindex="0" loading="lazy"><figcaption>sigal.gif</figcaption></figure><p><code>useSignal</code>，虽然让我想起来了熟悉地<code>SolidJS</code>，但是看写法，这不就是<code>vue3</code>的<code>ref</code>吗？是的，看起来很像，那有没有类似<code>reactive</code>呢？</p><h3 id="🚀-usestore" tabindex="-1"><a class="header-anchor" href="#🚀-usestore" aria-hidden="true">#</a> 🚀 <code>useStore</code></h3><p>当然有啊，<code>useSignal</code>是针对基本变量的。对于非基本类型可以使用<code>useStore</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">component$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick$<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83291b82343845fa928fe3973369022e~tplv-k3u1fbpfcp-watermark.image?" alt="sigal.gif" tabindex="0" loading="lazy"><figcaption>sigal.gif</figcaption></figure><p><code>useStore</code>可以听提供方法，不过比较复杂：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  $<span class="token punctuation">,</span>
  type <span class="token constant">QRL</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@builder.io/qwik&quot;</span><span class="token punctuation">;</span>
 
type Store <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> number
  <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token constant">QRL</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">component$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> useStore<span class="token operator">&lt;</span>Store<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick$<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>  
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83291b82343845fa928fe3973369022e~tplv-k3u1fbpfcp-watermark.image?" alt="sigal.gif" tabindex="0" loading="lazy"><figcaption>sigal.gif</figcaption></figure><h3 id="🚀-usecomputed" tabindex="-1"><a class="header-anchor" href="#🚀-usecomputed" aria-hidden="true">#</a> 🚀 <code>useComputed$</code></h3><p><code>reactive</code>有了，<code>computed</code>是不是也应该有啊，来了，它就是<code>useComputed$</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">const</span> capitalizedName <span class="token operator">=</span> <span class="token function">useComputed$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> count<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">&#39;mmdctjj&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">useVisibleTask$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> track <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>capitalizedName<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e6f6f13b23b48089aaf69b0cd8bd6e4~tplv-k3u1fbpfcp-watermark.image?" alt="computer.gif" tabindex="0" loading="lazy"><figcaption>computer.gif</figcaption></figure><h3 id="🚀-usecontext" tabindex="-1"><a class="header-anchor" href="#🚀-usecontext" aria-hidden="true">#</a> 🚀 <code>useContext</code></h3><p>那依赖注入有没有啊？抱歉，没有，因为<code>Qwik</code>是基于<code>jsx</code>的框架，所以只有拿<code>useContext</code>来将就了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
type Store <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> number
  <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token constant">QRL</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span><span class="token operator">:</span> Store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 🚗 创建全局的上下文</span>
<span class="token keyword">const</span> context <span class="token operator">=</span> createContextId<span class="token operator">&lt;</span>Store<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">&#39;uuid&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">component$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> data <span class="token operator">=</span> useStore<span class="token operator">&lt;</span>Store<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">this</span></span><span class="token punctuation">)</span> 
      <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token comment">// 🚗 provider数据</span>
  <span class="token function">useContextProvider</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick$<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> data<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>  
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">component$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 🚗 消费上下文</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>  
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好吧，接下来我们说些不一样的</p><h3 id="🚀-usetask-or-usevisibletask" tabindex="-1"><a class="header-anchor" href="#🚀-usetask-or-usevisibletask" aria-hidden="true">#</a> 🚀 <code>useTask$</code> or <code>useVisibleTask$</code></h3><p>上面的例子中，我们所有的监听事件都是通过<code>useVisibleTask$</code>实现的。虽然它看起来和<code>useEffect</code>类似，但是却有着很大的区别。</p><p>这得从<code>qwik</code>的架构说起，首先<code>Qwik</code>是个服务端渲染的框架，相当于<code>Next.js</code>（基于<code>React</code>服务端渲染框架）、 <code>Nuxt.js</code>(基于<code>Vue</code>地服务端渲染框架)，换句话说，它天生支持服务端渲染的前端框架。所以一个组件的生命周期是从服务器开始的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>        useTask$ <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token constant">RENDER</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">&gt;</span> useVisibleTask$
<span class="token operator">||</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token constant">SERVER</span> or <span class="token constant">BROWSER</span> <span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">|</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token constant">BROWSER</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">||</span> 
                        pause<span class="token operator">|</span>resume
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们都是用来注册任务的钩子函数，这个任务在服务端仅仅执行一次，在客户端可能多次渲染。</p><p>下面是具体的区别</p><h4 id="👉-usetask" tabindex="-1"><a class="header-anchor" href="#👉-usetask" aria-hidden="true">#</a> 👉 <code>useTask$</code></h4><p><code>useTask$</code>首先在服务端执行一次，如果客户端使用<code>track</code>订阅依赖了，那么当客户端渲染之后触发更新时，任务会在客户端再次执行。如果没有<code>track</code>，那么仅仅在客户端执行一次。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">component$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useSignal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">useTask$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> track <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick$<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>count<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26c97ff1877f499aa2b1e842b5bb340f~tplv-k3u1fbpfcp-watermark.image?" alt="task.gif" tabindex="0" loading="lazy"><figcaption>task.gif</figcaption></figure><p>页面刷新后服务端也执行了一次任务</p><h4 id="👉-usevisibletask" tabindex="-1"><a class="header-anchor" href="#👉-usevisibletask" aria-hidden="true">#</a> 👉 <code>useVisibleTask$</code></h4><p><code>useVisibleTask$</code>：仅仅在浏览器执行，渲染之后立马执行，当订阅的参数发生改变时，任务会被再次执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token function">component$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">useSignal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token function">useVisibleTask$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> track <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button onClick$<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token punctuation">{</span>count<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e2a30da9a56e4a77bd5d3b9d24d80d58~tplv-k3u1fbpfcp-watermark.image?" alt="taskvis.gif" tabindex="0" loading="lazy"><figcaption>taskvis.gif</figcaption></figure><p>它们还有一个特别重要的参数<code>cleanup</code>，每次新的任务被触发时，都会执行上次任务的<code>cleanup</code>。另外组件被移除时也会被执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">useVisibleTask$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> track<span class="token punctuation">,</span> cleanup  <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(&#39;I am excuted!&#39;)</span>
    <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;last&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b3f6cb2524fa4a13bc23770c943e768f~tplv-k3u1fbpfcp-watermark.image?" alt="cleanup.gif" tabindex="0" loading="lazy"><figcaption>cleanup.gif</figcaption></figure><p>我们可以看到，每次任务触发都是先打印<code>last</code>，然后才是最新的<code>count.value</code></p><p>另外，还有一个重要的配置项：<code>{ strategy: &#39;document-ready&#39; }</code>，此时，会在页面加载完毕立马执行。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">useVisibleTask$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 渲染完毕之后执行</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2222</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">useVisibleTask$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// document-ready立马执行</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1111</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">&#39;document-ready&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时<code>console</code>的打印结果是先<code>1111</code>，然后是<code>2222</code>。</p><h4 id="👉-帮它模拟完整的生命周期" tabindex="-1"><a class="header-anchor" href="#👉-帮它模拟完整的生命周期" aria-hidden="true">#</a> 👉 帮它模拟完整的生命周期</h4><p>综上，我们可以模拟出一个完整的生命周期</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">useVisibleTask$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before mounted!&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">strategy</span><span class="token operator">:</span> <span class="token string">&#39;document-ready&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">useVisibleTask$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> cleanup <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mounted!&#39;</span><span class="token punctuation">)</span>
    <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;unmount&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  
  <span class="token function">useVisibleTask$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> track<span class="token punctuation">,</span> cleanup <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">track</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;updated!&#39;</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before update&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>唯一的瑕疵是<code>before update</code>会在组件销毁时和<code>unmount</code>一起执行一次。</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7fdf3405ca54d76b0dbfd868234f771~tplv-k3u1fbpfcp-watermark.image?" alt="mounted.gif" tabindex="0" loading="lazy"><figcaption>mounted.gif</figcaption></figure><h2 id="💎-总结" tabindex="-1"><a class="header-anchor" href="#💎-总结" aria-hidden="true">#</a> 💎 总结</h2><p><code>qwik</code>上线一年不到已经<code>17.9k</code>地<code>star</code>了，足见它地优秀了！</p><p>今天的分享就这些，如果大家喜欢我一定会再出一篇介绍其它几个有意思的<code>Api</code>的和编译相关的文章。</p><p>如果文中有纰漏的地方欢迎指正</p><p>我的文章首发在公众号：萌萌哒草头将军，如果你想联系我，可以加我<code>SunBoy_mmdctjj</code>，我们一起成长</p>`,55))])}const g=o(u,[["render",d],["__file","学不完的框架，🐕舔不完的面，Qwik，你到底想嘎哈.html.vue"]]);export{g as default};
