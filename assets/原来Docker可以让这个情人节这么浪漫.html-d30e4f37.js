import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as n,b as a,e as t,f as l}from"./app-d5e6292e.js";const r={},d={href:"https://gitee.com/kiCode111/LikeGirl_5.1.0",target:"_blank",rel:"noopener noreferrer"},u={href:"https://github.com/lsky-org/lsky-pro",target:"_blank",rel:"noopener noreferrer"},k={href:"https://hub.docker.com/r/halcyonazure/lsky-pro-docker",target:"_blank",rel:"noopener noreferrer"};function v(m,s){const e=p("ExternalLinkIcon");return i(),c("div",null,[s[6]||(s[6]=n("blockquote",null,[n("p",null,"📌 本文是正经的 docker 教程，如果你不打算使用 docker 那么直接拉取代码运行就可以了，如果你想使用 docker，但是不想配置，可以去我公众号后台回复：love，即可获得打包好的镜像")],-1)),s[7]||(s[7]=n("p",null,"情人节马上要到了，正好最近发现了一个特别有意思的情侣相册的项目，遗憾的是目前不支持 docker，不过没关系，我出手了！",-1)),n("p",null,[s[1]||(s[1]=a("原项目地址：")),n("a",d,[s[0]||(s[0]=a("https://gitee.com/kiCode111/LikeGirl_5.1.0")),t(e)])]),s[8]||(s[8]=l(`<p>下面是制作情侣小站 <code>镜像</code> 的过程</p><h2 id="情侣小站" tabindex="-1"><a class="header-anchor" href="#情侣小站" aria-hidden="true">#</a> 情侣小站</h2><h3 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile" aria-hidden="true">#</a> Dockerfile</h3><p>首先，我们拉去代码：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://gitee.com/kiCode111/LikeGirl_5.1.0.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>clone</code> 代码后，在根目录下新建一个 <code>Dockerfile</code> 文件。</p><p>该文件用于自动化创建 <code>Docker</code> 镜像的过程。里面包含了运行这个应用所需的所有代码、库、依赖项和运行时环境。</p><p>由于该项目是<code>php</code>项目，所以我们需要指定基础镜像为<code>php</code>。</p><div class="language-Dockerfile line-numbers-mode" data-ext="Dockerfile"><pre class="language-Dockerfile"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="增加环境变变量" tabindex="-1"><a class="header-anchor" href="#增加环境变变量" aria-hidden="true">#</a> 增加环境变变量</h3><p>接下来需要设置几个环境变量，打开<code>./admin/Config_DB.php</code> 文件，将下面的变量值替换为上面设置的环境变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// localhost 为数据库地址 一般使用默认的即可 或（127.0.0.1）</span>
<span class="token comment">// $db_address = &quot;localhost&quot;;</span>
$db_address <span class="token operator">=</span> <span class="token string">&quot;localhost&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//数据库用户名</span>
<span class="token comment">// $db_username = &quot;root&quot;;</span>
$db_username <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//数据库密码</span>
<span class="token comment">// $db_password = &quot;123456&quot;;</span>
$db_password <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//数据库表名</span>
<span class="token comment">// $db_name = &quot;LikeGirl20240612&quot;;</span>
$db_name <span class="token operator">=</span> <span class="token string">&quot;LikeGirl20240612&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//敏感信息修改安全码 建议设置复杂一些</span>
<span class="token comment">// $Like_Code = &quot;Love&quot;;</span>
$Like_Code <span class="token operator">=</span> <span class="token string">&quot;Love&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="准备好数据库" tabindex="-1"><a class="header-anchor" href="#准备好数据库" aria-hidden="true">#</a> 准备好数据库</h3><p>在你的机器上准备好 <code>mysql</code> 数据库，你可以使用 <code>docker</code> 镜像运行数据库或者服务器数据库，然后使用数据库客户端链接，根据准备好的文件<code>./love20240612.sql</code> 执行 <code>sql</code> 创建命令，创建对应的表。</p><p>推荐使用 <code>vscode</code> 插件，链接数据库，打开 <code>sql</code> 文件点击执行按钮快速创建</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 数据库相关</span>
<span class="token key atrule">DB_NAME</span><span class="token punctuation">:</span> <span class="token string">&quot;db_name&quot;</span>
<span class="token key atrule">DB_USERNAME</span><span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span>
<span class="token key atrule">DB_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">&quot;psd&quot;</span>
<span class="token key atrule">DB_ADDRESS</span><span class="token punctuation">:</span> <span class="token string">&quot;192.168.x.xxx&quot;</span>

<span class="token key atrule">LIKE_CODE</span><span class="token punctuation">:</span> <span class="token string">&quot;xxxx&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包和运行" tabindex="-1"><a class="header-anchor" href="#打包和运行" aria-hidden="true">#</a> 打包和运行</h3><p>现在我们可以在根目录下使用下面的命令打包：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> build <span class="token parameter variable">-t</span> love_girl:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查看打包好的镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>保存到本地</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> save <span class="token parameter variable">-o</span> love_girl.tar love_girl:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-o</code> 输出路径</p><p>上传到服务器后，我们还需要加载到服务器的 <code>docker</code> 镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> load <span class="token parameter variable">-i</span> /path/to/love_girl.tar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-i</code> 从什么路径加载进去</p><p>查看是否加载进去镜像</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一切成功后，我们可以启动了，一种是命令行启动：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> love <span class="token punctuation">\\</span>
  <span class="token parameter variable">--restart</span> always <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">1314</span>:8383 <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">DB_PASSWORD</span><span class="token operator">=</span><span class="token string">&quot;xxx&quot;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">DB_NAME</span><span class="token operator">=</span><span class="token string">&quot;xxx&quot;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">DB_USERNAME</span><span class="token operator">=</span><span class="token string">&quot;root&quot;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">LIKE_CODE</span><span class="token operator">=</span><span class="token string">&quot;xxxx&quot;</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">DB_ADDRESS</span><span class="token operator">=</span><span class="token string">&quot;192.168.x.xxx&quot;</span> <span class="token punctuation">\\</span>
  like_girl

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者我们使用 <code>docker-compose.yaml</code> 文件启动！</p><p>在你准备好的目录下面创建文件：<code>docker-compose.yaml</code>，内容如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.2&quot;</span>

<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">love</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> like_girl <span class="token comment"># 使用已创建的镜像</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;1314:8383&quot;</span>
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> love
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">DB_PASSWORD</span><span class="token punctuation">:</span> <span class="token string">&quot;xxx&quot;</span>
      <span class="token key atrule">DB_NAME</span><span class="token punctuation">:</span> <span class="token string">&quot;xxx&quot;</span>
      <span class="token key atrule">DB_USERNAME</span><span class="token punctuation">:</span> <span class="token string">&quot;root&quot;</span>
      <span class="token key atrule">LIKE_CODE</span><span class="token punctuation">:</span> <span class="token string">&quot;xxxx&quot;</span>
      <span class="token key atrule">DB_ADDRESS</span><span class="token punctuation">:</span> <span class="token string">&quot;192.168.x.xxx&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用命令行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>-d</code> 后台启动</p><p>查看状态</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> <span class="token function">ps</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>关闭服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker-compose</span> down
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>好了，现在我们打开 <code>http://localhost:1314</code> 就可以看到首页了！</p><p>进入管理页面： <code>http://localhost:1314/admin/</code>!</p><p>如果你已经有自己的图床提供图片链接，那么到这里就结束了，如果你还没有，可以接着部署一个图床！</p><h2 id="配置图床" tabindex="-1"><a class="header-anchor" href="#配置图床" aria-hidden="true">#</a> 配置图床</h2>`,45)),n("p",null,[s[3]||(s[3]=a("我使用的是蓝空图床，项目地址：")),n("a",u,[s[2]||(s[2]=a("https://github.com/lsky-org/lsky-pro")),t(e)])]),s[9]||(s[9]=l(`<p>如果你想要 docker 镜像，通用可以到我公众号后台回复：love，根据情况下载即可！</p><p>部署前，我们需要在上面提到的数据库中新增一个存放图片信息的库，然后使用下面的命令运行安装蓝空图床，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> network create lsky-net
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">--name</span> lskypro <span class="token punctuation">\\</span>
  <span class="token parameter variable">--restart</span> unless-stopped <span class="token punctuation">\\</span>
  <span class="token parameter variable">--hostname</span> lskypro <span class="token punctuation">\\</span>
  <span class="token parameter variable">-e</span> <span class="token assign-left variable">WEB_PORT</span><span class="token operator">=</span><span class="token number">8089</span> <span class="token punctuation">\\</span>
  <span class="token parameter variable">-v</span> ./web:/var/www/html/ <span class="token punctuation">\\</span>
  <span class="token parameter variable">-p</span> <span class="token number">9080</span>:8089 <span class="token punctuation">\\</span>
  <span class="token parameter variable">--network</span> lsky-net <span class="token punctuation">\\</span>
  halcyonazure/lsky-pro-docker:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者同样用 <code>docker-compose.yaml</code>文件启动!</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&quot;3.2&quot;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">lskypro</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> halcyonazure/lsky<span class="token punctuation">-</span>pro<span class="token punctuation">-</span>docker<span class="token punctuation">:</span>latest
    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> lskypro
    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> lskypro
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> WEB_PORT=8089
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./web<span class="token punctuation">:</span>/var/www/html/
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;9080:8089&quot;</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> lsky<span class="token punctuation">-</span>net

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">lsky-net</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),n("p",null,[s[5]||(s[5]=a("或者参考这里：")),n("a",k,[s[4]||(s[4]=a("https://hub.docker.com/r/halcyonazure/lsky-pro-docker")),t(e)])]),s[10]||(s[10]=n("p",null,"然后在首页配置刚才创建的数据库，即可自动创建对应组件，等创建完成，我们就可以上传图片之后得到图片链接了！",-1))])}const h=o(r,[["render",v],["__file","原来Docker可以让这个情人节这么浪漫.html.vue"]]);export{h as default};
