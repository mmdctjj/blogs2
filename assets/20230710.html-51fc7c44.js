import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,f as t,a as s,b as a,e as p}from"./app-2fb9669b.js";const r={},u={href:"https://juejin.cn/spost/7244520633354141751",target:"_blank",rel:"noopener noreferrer"},d={href:"https://www.npmjs.com/package/rollup-plugin-remove-others-console",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/mmdctjj/rollup-plugin-remove-others-console",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.npmjs.com/package/remove-others-console-loader",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/mmdctjj/remove-others-console-loader",target:"_blank",rel:"noopener noreferrer"};function v(b,n){const e=c("ExternalLinkIcon");return i(),l("div",null,[n[10]||(n[10]=t('<blockquote><p>文章同步在公众号：萌萌哒草头将军，欢迎关注</p></blockquote><p>插件已经开源了，可以看文章末尾</p><h2 id="console狂魔能有多狂" tabindex="-1"><a class="header-anchor" href="#console狂魔能有多狂" aria-hidden="true">#</a> console狂魔能有多狂</h2><p>事情是这样的，前段时间我加入了公司某个小项目组</p><p>入组第一天，我要来了项目权限，下载完代码和依赖</p><p>然后<code>npm start</code>，打开浏览器控制台，</p><p>我尼玛，一个登陆页面就这么多<code>log</code>？</p><p>此刻我怀着忐忑的心情打开了自己的即将负责的模块入口页面：</p><p>这让我怎么调试啊？</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ca10e95c0b464e03a220cb104776bc5e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>上图我已经把敏感信息屏蔽掉了(<sup>/ω＼</sup>)，每点击下页面就会蹦出好几行<code>console</code></p><p>全局一搜索，居然有近800多条<code>console</code>语句。</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/af9ce0143ce5419494e0e0701a5f173f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>起初，我为了方便我调试，我把影响我调试的<code>console</code>一一注释了，真是个体力活。</p><p>就在我开心了几天后，同事在开发群里发问了，“我调试打印的<code>console</code>怎么不见了？”，</p><p>我说我注释了，那么多<code>console</code>我没法调试啊，然后就被好几个同事”围攻“了，</p><p>后来想想没经过人家的同意修改人家的代码确实不对！</p><p>其实从他们的代码来看，完全是躺平的状态，完全放弃了公司的代码规范，真的很让人emo。</p><h2 id="emo时间的思考" tabindex="-1"><a class="header-anchor" href="#emo时间的思考" aria-hidden="true">#</a> emo时间的思考</h2><p>既然人家喜欢那样做，我也没办法，emo了一会，我就寻找别的方法解决让我强迫症发作的方法。</p><p>第一种方法是如果有console就不让提交代码，显然不现实，</p><p>第二种方法是使用去除conosle的插件，但是有个缺点，我的console也会被去掉，</p><p>焦虑了好久，我就想到，有没有一种插件，在开发环境只展示开发者自己的console，但是不影响别人开发时调试。</p><p>找了好久都没找到，那就自己动手开发一个吧。</p><p>我的思路是</p><ul><li>在每个文件中匹配console语句</li><li>用匹配到的行，请求git，查看当前行的作者</li><li>如果不是我就统统删除console之后再build</li></ul><p>这样既不会干扰我开发，也不会影响别人开发调试了。</p>',27)),s("p",null,[s("a",u,[n[0]||(n[0]=a("上次的文章")),p(e)]),n[1]||(n[1]=a("已经介绍了vite的插件开发了，这里就不赘述了。"))]),n[11]||(n[11]=t(`<p>我们开发的插件主要是在文件编译时，将文件中的console智能的清除，对应的插件hook为transform。基本的结构如下。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> RemoveConsole <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> string<span class="token punctuation">;</span>
  <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">&#39;pre&#39;</span><span class="token punctuation">;</span>
  <span class="token function-variable function">transform</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">code</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;remove-console&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enforce</span><span class="token operator">:</span> <span class="token string">&quot;pre&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">transform</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// todo something</span>
      <span class="token keyword">return</span> code
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来一步步实现，</p><h3 id="匹配console语句" tabindex="-1"><a class="header-anchor" href="#匹配console语句" aria-hidden="true">#</a> 匹配console语句</h3><p>如果文件中存在console则进行分析，否则返回原代码。</p><p>分析过程：</p><ol><li>按行划分</li><li>分析出包含console的行</li></ol><h3 id="查询git作者" tabindex="-1"><a class="header-anchor" href="#查询git作者" aria-hidden="true">#</a> 查询git作者</h3><p>主要使用child_process子进程运行git命令，根据命令的返回结果分别处理，</p><p>例如我们或者当前作者：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> userName <span class="token operator">=</span> childProcess<span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">git config user.name</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span>
<span class="token comment">// mmdctjj</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析每行作者，使用的git命令是</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 查看指定问价你的l1到l2行的作者详细信息</span>
git blame <span class="token operator">-</span><span class="token constant">L</span> l1<span class="token punctuation">,</span>l2 <span class="token operator">--</span>porcelain filepath
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d62ac9f0c22b4dec8da23ba9247c58fb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>我们还需要在此基础上改造下，完整的命令如下：（win不支持grep，使用findstr代替）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>git blame <span class="token operator">-</span><span class="token constant">L</span> $<span class="token punctuation">{</span>line<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>$<span class="token punctuation">{</span>line<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">}</span> <span class="token operator">--</span>porcelain $<span class="token punctuation">{</span>id<span class="token punctuation">}</span> <span class="token operator">|</span> grep <span class="token string">&quot;^author &quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着从字符串中截取出作者</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> author <span class="token operator">=</span> authorInfo<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>authorInfo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">author </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>根据当前作者和conosle的作者是否相等。我们得出需要删除的行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 需要删除的行</span>
 <span class="token keyword">const</span> removeLine <span class="token operator">=</span> includesLines<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">line</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> authorInfo <span class="token operator">=</span> childProcess<span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span>
      <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">git blame -L </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>line<span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>line<span class="token operator">+</span><span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --porcelain </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> | grep &quot;^author &quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span> <span class="token literal-property property">encoding</span><span class="token operator">:</span> <span class="token string">&#39;utf-8&#39;</span> 
    <span class="token punctuation">)</span>
    <span class="token keyword">const</span> author <span class="token operator">=</span> authorInfo
      <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>authorInfo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">author </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
      
    <span class="token keyword">return</span> author <span class="token operator">!==</span> userName
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除console" tabindex="-1"><a class="header-anchor" href="#删除console" aria-hidden="true">#</a> 删除console</h3><p>接着我们遍历每一行，进行替换</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> newRows <span class="token operator">=</span> rows<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">row<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>removeLine<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 正则表达式替换完整的console.log语句 </span>
    <span class="token keyword">return</span> row<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">console\\.log\\((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*\\)[;\\n]?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> row
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> newContent <span class="token operator">=</span> newRows<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

<span class="token keyword">return</span> newContent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><p>我们验证下效果。这个文件中有多个console语句</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3e56098d9bca4eec9f2ad1ae423f90ba~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a82e9e26ee34ce7b58d58989a1a18aa~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>十分完美！！！</p><p>今天的分享就到这了，感谢你的观看，如有错误的地方，欢迎指正！</p><p>最后附上我的插件和loader</p><h3 id="🚀-vite插件-rollup-plugin-remove-others-console" tabindex="-1"><a class="header-anchor" href="#🚀-vite插件-rollup-plugin-remove-others-console" aria-hidden="true">#</a> 🚀 vite插件: rollup-plugin-remove-others-console</h3>`,31)),s("p",null,[n[3]||(n[3]=a("插件地址：")),s("a",d,[n[2]||(n[2]=a("https://www.npmjs.com/package/rollup-plugin-remove-others-console")),p(e)])]),s("p",null,[n[5]||(n[5]=a("github地址：")),s("a",k,[n[4]||(n[4]=a("https://github.com/mmdctjj/rollup-plugin-remove-others-console")),p(e)])]),n[12]||(n[12]=s("h3",{id:"🚀-webpack-loader-remove-others-console-loader",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#🚀-webpack-loader-remove-others-console-loader","aria-hidden":"true"},"#"),a(" 🚀 webpack loader: remove-others-console-loader")],-1)),s("p",null,[n[7]||(n[7]=a("loader地址：")),s("a",m,[n[6]||(n[6]=a("https://www.npmjs.com/package/remove-others-console-loader")),p(e)])]),s("p",null,[n[9]||(n[9]=a("github地址：")),s("a",g,[n[8]||(n[8]=a("https://github.com/mmdctjj/remove-others-console-loader")),p(e)])]),n[13]||(n[13]=s("p",null,"功能还会继续完善，欢迎star⭐",-1))])}const j=o(r,[["render",v],["__file","20230710.html.vue"]]);export{j as default};
