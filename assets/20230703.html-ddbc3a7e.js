import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,f as p}from"./app-3e13ab12.js";const e={};function o(c,n){return a(),t("div",null,n[0]||(n[0]=[p(`<blockquote><p>文章同步在公众号：萌萌哒草头将军，欢迎关注</p></blockquote><p>js中媒体查询的主要方法是使用window对象下的<code>matchMedia</code>对象，查询语句和CSS媒体查询一样。</p><h3 id="封装媒体查询" tabindex="-1"><a class="header-anchor" href="#封装媒体查询" aria-hidden="true">#</a> 封装媒体查询</h3><p>首先我们先看监听系统主题色的例子</p><ul><li>首先创建媒体查询对象</li><li>根据查询结果设置对应的值</li><li>然后建立监听事件，并且在退出时取消监听</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useTheme</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token comment">// 首先创建媒体查询对象</span>
  <span class="token keyword">const</span> themeMedia <span class="token operator">=</span> <span class="token function">matchMedia</span><span class="token punctuation">(</span><span class="token string">&quot;(prefers-color-scheme: light)&quot;</span><span class="token punctuation">)</span>
  <span class="token comment">// 根据查询结果设置对应的值</span>
  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>themeMedia<span class="token punctuation">.</span>matches <span class="token operator">?</span> <span class="token string">&#39;light&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> MediaQueryListEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> theme<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>matches <span class="token operator">?</span> <span class="token string">&#39;light&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;dark&#39;</span>
  
  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onCleanup</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//  然后建立监听事件</span>
    themeMedia<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> onChange<span class="token punctuation">)</span>
    <span class="token comment">// 并且在退出时取消监听</span>
    <span class="token function">onCleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> themeMedia<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> onChange<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> theme<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们测试下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useTheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>theme<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">&#39;theme&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37e33588ee4b40438365db6841af4326~tplv-k3u1fbpfcp-watermark.image?" alt="theme.gif" loading="lazy"><br> 如果我们其他查询查询，我们需要重新设置新的值，所以，接下来我们封装一个更通用的媒体查询hook，如下，</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useMatchMedia</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">query</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> themeMedia <span class="token operator">=</span> <span class="token function">matchMedia</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>

  <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>themeMedia<span class="token punctuation">.</span>matches<span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">onChange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">e</span><span class="token operator">:</span> MediaQueryListEvent</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> match<span class="token punctuation">.</span>value <span class="token operator">=</span> e<span class="token punctuation">.</span>matches

  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onCleanup</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    
    themeMedia<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> onChange<span class="token punctuation">)</span>

    <span class="token function">onCleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> themeMedia<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;change&#39;</span><span class="token punctuation">,</span> onChange<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> match
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子里，我们不再对特定的媒体查询值做处理，同时，我们将查询语句作为动态变量，将结果处理交给开发者。</p><p>我们使用通用的hook重写监听系统主题色的hook，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useTheme</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useMatchMedia</span><span class="token punctuation">(</span><span class="token string">&quot;(prefers-color-scheme: light)&quot;</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>themeMedia<span class="token punctuation">.</span>matches <span class="token operator">?</span> <span class="token string">&#39;light&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;dark&#39;</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> theme  <span class="token operator">?</span> <span class="token string">&#39;light&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;dark&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是这样更简洁了。</p><h3 id="封装事件监听" tabindex="-1"><a class="header-anchor" href="#封装事件监听" aria-hidden="true">#</a> 封装事件监听</h3><p>接下来，我们再看第二个简单的例子，监听网络状态。</p><p>监听网络状态，主要通过监听<code>navigator.onLine</code>的变化，值的变化可以通过addEventListener方法，</p><p>有了封装媒体查询的例子，我们首先会想到封装事件监听的值的变化可以通过addEventListener方法，成为一个通用的钩子函数。如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> useEventListener <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token class-name">keyof</span> WindowEventMap<span class="token operator">&gt;</span><span class="token punctuation">(</span>
  <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token constant">K</span><span class="token punctuation">,</span>
  <span class="token function-variable function">listener</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">ev</span><span class="token operator">:</span> WindowEventMap<span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> any
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onCleanup</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

    <span class="token function">addEventListener</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> listener<span class="token punctuation">)</span>

    <span class="token function">onCleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> listener<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，我们就可以这样封装监听网络状态的hook了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useNetWork</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  
  <span class="token keyword">const</span> isOnLine <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>onLine<span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">setOnLine</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isOnLine<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">const</span> <span class="token function-variable function">setOffLine</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> isOnLine<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>

  <span class="token function">useEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;online&#39;</span><span class="token punctuation">,</span> setOnLine<span class="token punctuation">)</span>
  <span class="token function">useEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;offline&#39;</span><span class="token punctuation">,</span> setOffLine<span class="token punctuation">)</span>
  
  <span class="token keyword">return</span> isOnLine
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们测试下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> isOnLine <span class="token operator">=</span> <span class="token function">useNetWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>isOnLine<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token string">&#39;isOnLine&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span>h1 v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">&quot;isOnLine&quot;</span><span class="token operator">&gt;</span>onLine<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>h1 v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">&gt;</span>offLine<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84a306c2d8b54d238cf32f8ba9473556~tplv-k3u1fbpfcp-watermark.image?" alt="offline.gif" loading="lazy"><br> 接下来我们测试下其他的监听事件，比如监听scroll事件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">useEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d43ab372521e436ba7099877db0b639c~tplv-k3u1fbpfcp-watermark.image?" alt="scroll.gif" tabindex="0" loading="lazy"><figcaption>scroll.gif</figcaption></figure><p>功能是正常的，但是顺理成章，我们还需要写一个防抖函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
  <span class="token literal-property property">delay</span><span class="token operator">:</span> number
<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token keyword">let</span> <span class="token literal-property property">timer</span><span class="token operator">:</span> NodeJS<span class="token punctuation">.</span>Timeout
  
  <span class="token keyword">return</span>  <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args<span class="token operator">:</span> any<span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>
  
    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>

    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">useEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;scroll&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a64954ae2f234f7f80c2c9d2cd727664~tplv-k3u1fbpfcp-watermark.image?" alt="scroll2.gif" tabindex="0" loading="lazy"><figcaption>scroll2.gif</figcaption></figure><p>好了今天的分享到这了，如果文章中有纰漏的地方欢迎指正，我及时修改，感谢你的阅读</p><p>觉得文章还不错可以关注我的公众号，或者点个赞再走吧，十分感谢！！！</p>`,32)]))}const u=s(e,[["render",o],["__file","20230703.html.vue"]]);export{u as default};
