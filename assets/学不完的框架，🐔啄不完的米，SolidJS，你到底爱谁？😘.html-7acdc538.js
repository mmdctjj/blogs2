import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as s,b as a,e as i,f as l}from"./app-833c27f7.js";const u={},k={href:"https://juejin.cn/post/7235628080219078693",target:"_blank",rel:"noopener noreferrer"};function r(d,n){const t=e("ExternalLinkIcon");return o(),c("div",null,[n[2]||(n[2]=s("h1",{id:"_10分钟快速了解solidjs原理",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_10分钟快速了解solidjs原理","aria-hidden":"true"},"#"),a(" 10分钟快速了解SolidJS原理")],-1)),n[3]||(n[3]=s("p",null,[a("最近刚刚整明白点"),s("code",null,"Svelte"),a("感觉整个世界都清净了，但是昨天，有人给我介绍了"),s("code",null,"SolidJS"),a("，")],-1)),s("blockquote",null,[s("p",null,[n[1]||(n[1]=a("上篇：")),s("a",k,[n[0]||(n[0]=a("Svelte原理和进阶看这篇就够了")),i(t)])])]),n[4]||(n[4]=l(`<p>当时我心想：这又是啥玩意啊！</p><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aeb77b706f724340bd3041d6ce677856~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%"></p><p>经过一番深入交流才知道，居然又是个前端框架。</p><p align="center"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dfc2751d114d4b85af808c092bbb3fe3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%"></p><p>“还有完没完了，一个接一个的框架啥时候是个头啊！”</p><p align="center"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7509dc3757a348f5a91e6e58b6e1658d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%"></p><p>不过本着给大家踩坑避雷的精神，我又秉烛夜读，通宵达旦研究了一番。</p><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41bca1f75b304e2fb30ace23894f8008~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="30%"></p><h2 id="🚀模仿-超越" tabindex="-1"><a class="header-anchor" href="#🚀模仿-超越" aria-hidden="true">#</a> 🚀模仿？超越？</h2><h3 id="💎写法" tabindex="-1"><a class="header-anchor" href="#💎写法" aria-hidden="true">#</a> 💎写法</h3><p>先上代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;solid-js/web&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createSignal<span class="token punctuation">,</span> createMemo<span class="token punctuation">,</span> createEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;solid-js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义变量</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createSignal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 缓存中间值</span>
  <span class="token keyword">const</span> fib <span class="token operator">=</span> <span class="token function">createMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Calculating Fibonacci&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 执行副作用</span>
  <span class="token function">createEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The count is now&quot;</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
          <span class="token literal-property property">Count</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
          fib Count<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">&lt;</span>Counter <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是很熟悉，这不就是<code>React</code>吗？</p><p>难道这是<code>React</code>被抄袭的最惨的一次吗？</p><p>是的，官网明确告诉你，它会让你感觉既熟悉又现代。</p><p>和<code>React</code>类似的<code>hook</code>写法，一样的<code>Jsx</code>模板语法，熟悉吧？</p><p>不过，当你揭开它神秘的面纱，你会发现里面居然是你曾经的神——<code>Vue</code>！</p><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8857c93162bc48e2b46bd93212389c87~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="50%"></p><h3 id="💎响应式原理" tabindex="-1"><a class="header-anchor" href="#💎响应式原理" aria-hidden="true">#</a> 💎响应式原理</h3><p>因为它的响应式官方称为<code>primitive</code>，是基于<code>Proxy</code>的发布订阅模式的<code>API</code>，</p><p><code>primitive</code>的响应式主要包括<code>Signal</code>、<code>Memo</code> 和 <code>Effect</code>，对应的接口如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 定义变量</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createSignal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 缓存中间值</span>
  <span class="token keyword">const</span> fib <span class="token operator">=</span> <span class="token function">createMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 执行副作用</span>
  <span class="token function">createEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The count is now&quot;</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看看<code>createSignal</code>的大致逻辑</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createSignal</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> subscribers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">const</span> <span class="token function-variable function">read</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> listener <span class="token operator">=</span> <span class="token function">getCurrentListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span> <span class="token punctuation">(</span>listener<span class="token punctuation">)</span> subscribers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  
  <span class="token keyword">const</span> <span class="token function-variable function">write</span> <span class="token operator">=</span> <span class="token parameter">nextValue</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    value <span class="token operator">=</span> nextValue<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> sub <span class="token keyword">of</span> subscribers<span class="token punctuation">)</span> sub<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> <span class="token punctuation">[</span>read<span class="token punctuation">,</span> write<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在每次<code>read()</code>的地方收集<code>listener</code>，做为订阅者，每次<code>write()</code>的时候作为发布者，通知每个<code>listener</code>更新数据。</p><blockquote><p>SolidJS的发布订阅模式也是基于<code>Proxy</code>的。下篇文章会做详细的对比。</p></blockquote><p>和<code>React</code>不同的是，<code>reead</code>是个方法，这也是前面模板使用<code>count()</code>，而不是<code>count</code>的原因。</p><p><code>createMemo</code>和<code>createEffect</code>会自动收集依赖项，每次触发依赖项<code>listener</code>的更新时，都会重新执行。</p><p>到这，是不是觉得，这太简单了吧，这不就是<code>React</code>和<code>Vue</code>的结合体嘛！</p><p>欢欣之后，你又想和它谈心，可当你走近它的心，又发现了你最近心心念念的<code>Svelte</code>的影子！</p><h3 id="💎模板编译原理" tabindex="-1"><a class="header-anchor" href="#💎模板编译原理" aria-hidden="true">#</a> 💎模板编译原理</h3><p>上述例子的编译结果如下: （编译结果可以在官网的演练场<code>Output</code>查看）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> template <span class="token keyword">as</span> _$template <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;solid-js/web&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> delegateEvents <span class="token keyword">as</span> _$delegateEvents <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;solid-js/web&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createComponent <span class="token keyword">as</span> _$createComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;solid-js/web&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> insert <span class="token keyword">as</span> _$insert <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;solid-js/web&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> _tmpl$ <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span><span class="token function">_$template</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;Count: &lt;!&gt;fib Count: &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;solid-js/web&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> createSignal<span class="token punctuation">,</span> createMemo<span class="token punctuation">,</span> createEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;solid-js&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义变量</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">createSignal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 缓存中间值</span>

  <span class="token keyword">const</span> fib <span class="token operator">=</span> <span class="token function">createMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Calculating Fibonacci&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行副作用</span>

  <span class="token function">createEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The count is now&quot;</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> _el$ <span class="token operator">=</span> _tmpl$<span class="token punctuation">.</span><span class="token function">cloneNode</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          _el$2 <span class="token operator">=</span> _el$<span class="token punctuation">.</span>firstChild<span class="token punctuation">,</span>
          _el$4 <span class="token operator">=</span> _el$2<span class="token punctuation">.</span>nextSibling<span class="token punctuation">,</span>
          _el$3 <span class="token operator">=</span> _el$4<span class="token punctuation">.</span>nextSibling<span class="token punctuation">;</span>

    _el$<span class="token punctuation">.</span><span class="token function-variable function">$$click</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">_$insert</span><span class="token punctuation">(</span>_el$<span class="token punctuation">,</span> count<span class="token punctuation">,</span> _el$4<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">_$insert</span><span class="token punctuation">(</span>_el$<span class="token punctuation">,</span> fib<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> _el$<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">_$createComponent</span><span class="token punctuation">(</span>Counter<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">_$delegateEvents</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单分析之后可以得出结论如下：</p><ul><li>🚗首先，使用<code>_$template </code>创建纯静态的<code>jsx</code>模板，</li><li>🚗接着，通过<code>cloneNode</code>方法，以及<code>firstChild</code>等属性获取动态元素，</li><li>🚗紧接着，为每个元素绑定对应的方法</li><li>🚗再接着，将动态的片段使用<code>_$insert</code>方法插入模板中，<strong>注意到<code>count</code>和<code>fib</code>都是未执行的函数</strong>。</li><li>🚗接着使用<code>$createComponent</code>包裹组件。</li><li>🚗最后组装<code>render</code>方法，将组件包装成函数，和根节点一起作为<code>render</code>方法的参数。</li></ul><p>这和<code>Svelte</code>的编译结果有两个十分类似的地方：</p><ul><li>💎将每动态片段的更新范围，精确到了原子级别。</li><li>💎它们的返回值都没有<code>虚拟DOM</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">_$insert</span><span class="token punctuation">(</span>_el$<span class="token punctuation">,</span> count<span class="token punctuation">,</span> _el$4<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">_$insert</span><span class="token punctuation">(</span>_el$<span class="token punctuation">,</span> fib<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Svelte编译之后create_fragment返回的p方法，也就是update方法</span>
<span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span>dirty<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> <span class="token comment">/*count*/</span> ctx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="💎运行时原理" tabindex="-1"><a class="header-anchor" href="#💎运行时原理" aria-hidden="true">#</a> 💎运行时原理</h3><p>在运行时阶段，会执行<code>render</code>方法，<code>render</code>方法如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> element<span class="token punctuation">,</span> init<span class="token punctuation">,</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> disposer<span class="token punctuation">;</span>
  <span class="token function">createRoot</span><span class="token punctuation">(</span><span class="token parameter">dispose</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    disposer <span class="token operator">=</span> dispose<span class="token punctuation">;</span>
    element <span class="token operator">===</span> document
        <span class="token operator">?</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">insert</span><span class="token punctuation">(</span>
            element<span class="token punctuation">,</span>
            <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            element<span class="token punctuation">.</span>firstChild <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span>
            init
         <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> options<span class="token punctuation">.</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">disposer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    element<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码都会将编译的<code>() =&gt; _$createComponent(Counter, {})</code>执行，并挂载到<code>document.getElementById(&#39;app&#39;)</code></p><p>由于在编译阶段还没有建立变量的响应式机制，执行<code>render</code>方法后，才会通过发布订阅模式创建响应式变量，每次调用<code>write()</code>、或者触发事件时，导致变量更新，以及对应的<code>元素节点</code>使用<code>_$insert</code>更新<code>DOM</code>。</p><p>看着<code>SolidJS</code>朴素的运行时原理，</p><p>你才回过神来，发现你曾经邂逅过的一切，它早已拥有，</p><p>你爱慕着的，也为你准备完毕，</p><p>最后你不禁感叹，<code>SolidJS</code>才是你那个：</p><p>『众里寻他千百度，慕然回首，那人却在，灯火阑珊处』</p><p>的框架啊！</p><p>你刚想抓住它，它却早已隐入了那灯影里！！！</p><p>好了好了，不做梦了，今天的分享就这些了，</p><p align="center"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/078ab3ddf1de44b18e1234d241b39820~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>下篇文章会介绍下<code>SolidJS</code>别的用法以及响应式原理。</p><p>敬请期待！欢迎关注我</p><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/28473f1a602146e0831ceb84323ab899~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p>`,56))])}const b=p(u,[["render",r],["__file","学不完的框架，🐔啄不完的米，SolidJS，你到底爱谁？😘.html.vue"]]);export{b as default};
