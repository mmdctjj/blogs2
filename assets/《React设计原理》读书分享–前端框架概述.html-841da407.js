import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as s,b as a,e as i,f as l}from"./app-cb76e5d1.js";const u={},d={href:"https://react.iamkasong.com/",target:"_blank",rel:"noopener noreferrer"};function r(k,n){const e=p("ExternalLinkIcon");return o(),c("div",null,[n[3]||(n[3]=s("h1",{id:"《react设计原理》读书分享–前端框架概述",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#《react设计原理》读书分享–前端框架概述","aria-hidden":"true"},"#"),a(" 《React设计原理》读书分享–前端框架概述")],-1)),s("p",null,[n[1]||(n[1]=a("很早就阅读了电子版的")),s("a",d,[n[0]||(n[0]=a("《React技术揭秘》")),i(e)]),n[2]||(n[2]=a("，后来听说出了实体书，果断就下单了"))]),n[4]||(n[4]=l(`<p>所以今天分享下最近的阅读心得</p><h2 id="基本原理" tabindex="-1"><a class="header-anchor" href="#基本原理" aria-hidden="true">#</a> 基本原理</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>前端框架主要的作用是将数据的变化映射为<code>UI</code>的变化：</p><p align="center">UI=fn(state)</p><p><code>fn</code>就是计算<code>数据</code>的变动导致<code>UI</code>是如何变化的，不同的框架中，<code>fn</code>的描述方式不同</p><p>主流的描述方式分为：</p><ol><li><code>jsx</code>：使UI和逻辑更紧密，它是<code>ES</code>语法糖.（从逻辑出发，扩展逻辑，描述UI）</li><li><code>模板语法</code>：使用<code>HTML</code>描述UI，它是<code>HTML</code>语法扩展。（从UI出发，扩展UI，描述逻辑）</li></ol><p><code>jsx</code>是动态的，即使代码没有边，每次更新，都会重新编译，</p><p><code>模板语法</code>是静态的，可以用来分析，哪些节点是动态的，哪些节点是静态的。有很大的优化空间。</p><p>不管是<code>jsx</code>还是<code>模板语法</code>，它们都是组织逻辑和UI的关系</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// react</span>
<span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span>div onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>conut<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Vue</span>
<span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token operator">&lt;</span>div @click<span class="token operator">=</span><span class="token punctuation">{</span>count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>count<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Svelte</span>
<span class="token keyword">const</span> <span class="token keyword">let</span> <span class="token operator">=</span> <span class="token number">0</span>

<span class="token operator">&lt;</span>div on<span class="token operator">:</span>click<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> conut<span class="token operator">++</span><span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面三块代码功能都是一样的：当<code>count</code>发生变化时，UI跟着变化</p><p>根据UI变化方式（更新细粒度）不同，将框架可以分为三类：</p><ol><li>应用级：数据变化时，重新渲染整个应用，<code>React</code></li><li>组件级：数据变化时，重新渲染数据有变化的组件<code>Vue</code></li><li>元素级：数据变化时，只渲染数据变化的<code>DOM</code>节点，<code>Svelte</code></li></ol><p>按下性能问题暂且不表，先想想，为啥会有这种差别呢？</p><p>这是因为不同的框架，架构不同导致的。</p><p>我们的代码并不是立即执行的，而是先进行编译（语法转换、将ts转为js、压缩、polyfill等），将我们的代码转为宿主环境可以识别的代码。</p><h3 id="react" tabindex="-1"><a class="header-anchor" href="#react" aria-hidden="true">#</a> React</h3><p><code>React</code>经过编译之后返回的是<code>createElement</code>函数，所以每次数据变化，<code>React</code>都会从应用根节点重新加载整个应用。因此<code>React</code>无需知道是哪个变量发生变化导致的更新。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token comment">/*#__PURE__*/</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setCount</span><span class="token punctuation">(</span>conut<span class="token operator">++</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以这种框被架称为<code>应用级框架</code></p><h3 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3" aria-hidden="true">#</a> Vue3</h3><p><code>Vue3</code>经过编译之后返回的是组件的<code>render</code>函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token parameter">_ctx<span class="token punctuation">,</span> _cache<span class="token punctuation">,</span> $props<span class="token punctuation">,</span> $setup<span class="token punctuation">,</span> $data<span class="token punctuation">,</span> $options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">_openBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">_createElementBlock</span><span class="token punctuation">(</span><span class="token string">&quot;h1&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">onClick</span><span class="token operator">:</span> _cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>_cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token parameter">$event</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">_toDisplayString</span><span class="token punctuation">(</span>_ctx<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token comment">/* TEXT */</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Vue3</code>会为每个组件建立<code>watchEffect</code>事件，这个大致如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// patch是对比前后VNode变化的方法</span>
<span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token function">render</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span> preVDOM<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>conut<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在页面首次进入或者<code>watchEffect</code>的依赖项发生变化时，都会调用组件的<code>render</code>函数。</p><p><code>render</code>函数的返回值是本次更新的<code>VNode</code>，Vue会根据本次更新的<code>VNode</code>与上次更新做比较（<code>patch</code>），找到最优的更新路径，并且进行更新。</p><p>所以这种框架被称为<code>组件级框架</code></p><h3 id="svelte" tabindex="-1"><a class="header-anchor" href="#svelte" aria-hidden="true">#</a> Svelte</h3><p><code>Svelte</code>经过编译之后的返回值如下：（先别晕，可以跳过代码往下看）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
    SvelteComponent<span class="token punctuation">,</span>
    append<span class="token punctuation">,</span>
    detach<span class="token punctuation">,</span>
    element<span class="token punctuation">,</span>
    init<span class="token punctuation">,</span>
    insert<span class="token punctuation">,</span>
    listen<span class="token punctuation">,</span>
    noop<span class="token punctuation">,</span>
    safe_not_equal<span class="token punctuation">,</span>
    set_data<span class="token punctuation">,</span>
    text
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;svelte/internal&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">create_fragment</span><span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> div<span class="token punctuation">;</span>
    <span class="token keyword">let</span> t<span class="token punctuation">;</span>
    <span class="token keyword">let</span> mounted<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            div <span class="token operator">=</span> <span class="token function">element</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            t <span class="token operator">=</span> <span class="token function">text</span><span class="token punctuation">(</span><span class="token comment">/*count*/</span> ctx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">m</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">insert</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> div<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">append</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                dispose <span class="token operator">=</span> <span class="token function">listen</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> <span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token comment">/*click_handler*/</span> ctx<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mounted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">p</span><span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> <span class="token punctuation">[</span>dirty<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>dirty <span class="token operator">&amp;</span> <span class="token comment">/*count*/</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">set_data</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token comment">/*count*/</span> ctx<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">d</span><span class="token punctuation">(</span><span class="token parameter">detaching</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>detaching<span class="token punctuation">)</span> <span class="token function">detach</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mounted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">instance</span><span class="token punctuation">(</span><span class="token parameter">$$self<span class="token punctuation">,</span> $$props<span class="token punctuation">,</span> $$invalidate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token function-variable function">click_handler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">$$invalidate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> count<span class="token operator">++</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> click_handler<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">SvelteComponent</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> options<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> create_fragment<span class="token punctuation">,</span> safe_not_equal<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Svelte返回的值主要包括三块：</p><h4 id="_1-create-fragment函数" tabindex="-1"><a class="header-anchor" href="#_1-create-fragment函数" aria-hidden="true">#</a> 1.<code>create_fragment</code>函数：</h4><ol><li><code>c方法</code>：create元素<code>div</code>的操作。</li><li><code>m方法</code>：mounted时执行将创建的<code>div</code>插入，并且监听<code>div</code>的<code>click</code>事件.</li><li><code>d方法</code>：delete元素<code>div</code>的操作。</li><li><code>p方法</code>：updata数据的操作。</li></ol><h4 id="_2-instance函数" tabindex="-1"><a class="header-anchor" href="#_2-instance函数" aria-hidden="true">#</a> 2.<code>instance</code>函数：</h4><p>声明在模板使用的变量，以及变量变化时的回调函数，并且返回它们（其实就是<code>ctx</code>上下文）。</p><h4 id="_3-继承sveltecomponent的组件-并且执行init方法" tabindex="-1"><a class="header-anchor" href="#_3-继承sveltecomponent的组件-并且执行init方法" aria-hidden="true">#</a> 3.继承<code>SvelteComponent</code>的组件，并且执行<code>init</code>方法</h4><p><code>init</code>方法的大致逻辑是：当数据变化，触发<code>mounted</code>阶段监听事件的回调函数，这个回调函数就是instance函数返回值里的<code>click_handler</code>，即<code>ctx[1]</code></p><p>如果仅仅声明了但是没有在模板中使用，那么就会作为第四块，单独声明，但这里就不做赘述了。</p><p>从前面的代码可以看出：<code>Svelte</code>在编译阶段，就已经找到元素和变量之间的对应关系了。</p><p>所以这种框被架称为<code>元素级框架</code></p><h2 id="react性能" tabindex="-1"><a class="header-anchor" href="#react性能" aria-hidden="true">#</a> React性能</h2><p>你肯定会问，我就改了个<code>count</code>的值，像<code>React</code>这样大动干戈，重新渲染整个应用，是不是很低效啊。</p><p>其实，<code>React</code>在运行时阶段，做了一部分关键的优化。</p><p>不管是<code>Vue</code>还是<code>React</code>，在编译之后返回的都是<code>VNode</code>。</p><h3 id="双缓存机制" tabindex="-1"><a class="header-anchor" href="#双缓存机制" aria-hidden="true">#</a> 双缓存机制</h3><p>一方面，<code>React</code>在拿到编译之后的<code>VNode</code>，首先会在内存中和上次更新的<code>VNode</code>进行对比，找到具体更新的<code>VNode</code>并且在内存中更新，上次没有更新时(<code>mount</code>)，在内存中全部更新。</p><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84d27b3060a9409f8116a527c438b60c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>然后将<code>VNode</code>渲染在真实<code>Dom</code>里，使用<code>current</code>属性连接，同时保留内存中的<code>VNode</code>，使用<code>altername</code>属性使每个真实<code>Dom</code>对应，以方便下次更新时对比。</p><p>这个机制叫做<code>双缓存机制</code></p><p>另一方面，<code>React</code>被重新设计为可以中断的更新<code>UI</code>，这么做的好处是可以避免因为高复杂度的更新因为耗时长使用户感知到页面的卡顿。</p><h3 id="firbe架构" tabindex="-1"><a class="header-anchor" href="#firbe架构" aria-hidden="true">#</a> <code>Firbe</code>架构</h3><p>这种可中断的更新架构就是<code>Firbe</code>架构。</p><p>可以中断的更新原理是：如果浏览器计算和渲染的时间超过人眼可以感知卡顿的最短时间<code>16.67ms</code>，那就中断它，把时间让给下一个更新任务。等时间充裕的时候再重新更新。</p><blockquote><p>显示器如果每秒刷新次数小于<code>60帧</code>（刷新率），就会被感知到卡顿，所以每帧最多时间是<code>1s/60</code>次，即<code>16.67ms</code></p></blockquote><p>与<code>Firbe</code>架构对应的是老版本的<code>Stack</code>架构，它因为组件渲染的时候<code>不可中断</code>的特点，被React团队抛弃了。因为组件层次过深，在不可中断的情况下，计算和渲染的时候超过<code>16.67ms</code>会造成页面卡顿。</p><h3 id="其他的手段" tabindex="-1"><a class="header-anchor" href="#其他的手段" aria-hidden="true">#</a> 其他的手段</h3><p><code>React</code>还将一些优化的任务交给了开发者，比如，前面说过，<code>jsx</code>是动态的，如果你的组件全是不会变化的，那么你可以使用<code>React.meno()</code>包裹你的组件，明确这是个静态的，依次来较少无用的更新。还有<code>useState</code><br> 、<code>useMemo</code>、<code>useCallback</code>等。</p>`,62))])}const b=t(u,[["render",r],["__file","《React设计原理》读书分享–前端框架概述.html.vue"]]);export{b as default};
