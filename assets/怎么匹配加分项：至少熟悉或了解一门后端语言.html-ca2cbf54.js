import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as e,f as p}from"./app-06d780e8.js";const t={};function o(c,n){return s(),e("div",null,n[0]||(n[0]=[p(`<h3 id="一、说明" tabindex="-1"><a class="header-anchor" href="#一、说明" aria-hidden="true">#</a> 一、说明</h3><blockquote><p>声明：本文为原创文章，未经许可禁止转载</p></blockquote><p>虽然有点标题党，但本文旨在帮助读者增加薪酬谈判的底气和筹码。</p><p>众所周知，现在前端的招聘加分项要求里多半会有一条：至少熟悉或了解一门后端语言（<code>java</code>/<code>python</code>/<code>golang</code>）。本文主要以Java为例。</p><p>另外注意，简历上只需写自己最熟悉的一门后端语言就行，同时也从下面选择一个自己容易理解的语言。</p><h3 id="二、怎么问你" tabindex="-1"><a class="header-anchor" href="#二、怎么问你" aria-hidden="true">#</a> 二、怎么问你</h3><p>作为前端，虽然经常和后端打交道，但是很难有机会系统学习某个后端语言，所幸，前端面试的时候一般会将JavaScript和Java两门语言的比较作为面试题目。比如：说说JavaScript和Java的异同点、JavaScript和Java相比有啥优点或缺点。</p><p>所以我们在面试前多做这类问题的准备。</p><p>下面就是你需要提前准备并且熟悉的知识点，</p><blockquote><p>我将知识点分为了<code>青铜</code>、<code>黄金</code>、<code>铂金</code>，分别代表基础语法、语言特性、语言设计，面试的时候分别说出一两个点（十分推荐带星号标记的），这样粗中有细，有深有浅，面试官就会觉得你是真的了解而不是滥竽充数。如果被问道这个问题，你再假装思索一下（睁大眼睛，眼球向右上微微瞅一两秒）然后娓娓道来，效果更佳哦。</p></blockquote><h3 id="三、这么回答" tabindex="-1"><a class="header-anchor" href="#三、这么回答" aria-hidden="true">#</a> 三、这么回答</h3><h4 id="青铜" tabindex="-1"><a class="header-anchor" href="#青铜" aria-hidden="true">#</a> <code>青铜</code></h4><h5 id="_1-语言类型" tabindex="-1"><a class="header-anchor" href="#_1-语言类型" aria-hidden="true">#</a> 1.语言类型</h5><p>JavaScript是弱类型语言，边解释边执行，一个非const声明的变量可以保存多种类型的值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// js</span>
<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">2022</span>
<span class="token keyword">let</span> str <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而Java是强类型语言，先编译后执行，在编译前所有变量类型都是确定的，Java中如果一个变量接受另外类型的值，需要强制类型转换。另外，Java中使用<code>final</code>关键字定义不可变的常量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java</span>
<span class="token comment">// 声明前需要指定变量类型</span>
<span class="token class-name">Integer</span> num <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-包装类" tabindex="-1"><a class="header-anchor" href="#_2-包装类" aria-hidden="true">#</a> 2.包装类*</h5><p>JavaScript基本类型和包装类是一样的，基本类型可以调用类方法。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// js</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">2022</span>
a<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而Java基本类型无法调类方法，必须自动装箱成为包装类才能调用类型方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java</span>
<span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">2022</span>
num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面演示下Java的自动装箱和拆箱</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 没有自动装箱，声明一个包装类是这样的</span>
<span class="token class-name">Integer</span> num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 有自动装箱，声明一个包装类是这样的</span>
<span class="token class-name">Integer</span> num2 <span class="token operator">=</span> <span class="token number">2022</span><span class="token punctuation">;</span>

<span class="token comment">// 反过来就是自动拆箱</span>
<span class="token keyword">int</span> num3 <span class="token operator">=</span> num1<span class="token punctuation">;</span>

<span class="token comment">// num1、num2是可以调用Integer类型方法的，比如toString，因为它们是包装类。</span>
<span class="token comment">// num3是没法调用任何方法的，因为是基本类型。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d8cf387a7c04f268a4736defbe24265~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h5 id="_3-number类型的差异" tabindex="-1"><a class="header-anchor" href="#_3-number类型的差异" aria-hidden="true">#</a> 3.number类型的差异*</h5><p>JavaScript中数字类型只有number类型一种，而Java中数据类型字节数从小到大分为byte、short、int、long、double类型。所以JavaScript数字的转换是自动的，而Java中，小字节转换为大字节是自动转换，但是大字节转换为小字节，需要强制转换。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java</span>
<span class="token keyword">byte</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">// 由小到大</span>
<span class="token keyword">short</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>

<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">// 由大到小需要手动指定</span>
<span class="token keyword">byte</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>c<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-的区别" tabindex="-1"><a class="header-anchor" href="#_4-的区别" aria-hidden="true">#</a> 4.<code>==</code>的区别*</h5><p>JavaScript的<code>==</code>会进行隐式类型转换，然后按值比较。如果都是引用类型，只比较引用地址，如果是不同的类型，则会都会转换为同类型比较；</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// js</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment">// true</span>

<span class="token string">&#39;1&#39;</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token comment">// true</span>

<span class="token string">&#39;hello&#39;</span> <span class="token operator">==</span> <span class="token string">&#39;he&#39;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;llo&#39;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而Java中<code>==</code>是严格按地址比较，地址相同时才相等，Java中的equals是严格按值比较的；同时Java中没有<code>===</code>；</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java</span>
<span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token comment">// false</span>

<span class="token char">&#39;1&#39;</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// false</span>

<span class="token string">&quot;hello&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;he&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;llo&quot;</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-数组的异同" tabindex="-1"><a class="header-anchor" href="#_5-数组的异同" aria-hidden="true">#</a> 5.数组的异同</h5><p>JavaScript的数组是任意长度的，并且可以存放各种类型。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// js</span>
<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java中的数组是固定长度的固定类型的，如果要像JavaScript使用数组，需要使用Java集合框架里的ArrayList或者LinkedList。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="黄金" tabindex="-1"><a class="header-anchor" href="#黄金" aria-hidden="true">#</a> <code>黄金</code></h4><h5 id="_6-面向对象" tabindex="-1"><a class="header-anchor" href="#_6-面向对象" aria-hidden="true">#</a> 6.面向对象*</h5><p>JavaScript虽然可以面向对象编程，但是它不符合面向对象编程的编程方式，class语法仅仅是prototype的语法糖，而Java是标准的面向对象的编程语言，天生具有面向对象特性：封装、继承、多态（多态的表现：重载、重写），JavaScript中没有封装和多态，所以没有重载，JavaScript的“重写”仅仅是prototype“短路”假象（因为子类有这个方法就不会沿着prototype属性向上查询）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java</span>
<span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> fish<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">Cat</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> fish<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>fish <span class="token operator">=</span> fish<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> call <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I am &quot;</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">&quot;, I have &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fish <span class="token operator">+</span> <span class="token string">&quot;小鱼干&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> bone<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Cat</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> bone<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>bone <span class="token operator">=</span> bone<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> call <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I am &quot;</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">&quot;, I have &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bone <span class="token operator">+</span> <span class="token string">&quot;小鱼干&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">&quot;cat&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cat<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;dog&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	dog<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-私有属性和公有属性" tabindex="-1"><a class="header-anchor" href="#_7-私有属性和公有属性" aria-hidden="true">#</a> 7. 私有属性和公有属性</h5><p>JavaScript使用对象的<code>defineProperty</code>或者<code>proxy</code>方法可以限制对象属性私有还是公有。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// js</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> <span class="token string">&#39;pi&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
     <span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
     <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">3.14</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java中使用修饰符private或者public控制。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java</span>
<span class="token comment">// 公有</span>
<span class="token keyword">public</span> <span class="token keyword">float</span> pi <span class="token operator">=</span> <span class="token number">3.14</span>

<span class="token comment">// 私有</span>
符<span class="token keyword">private</span> <span class="token keyword">float</span> pi <span class="token operator">=</span> <span class="token number">3.14</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="铂金" tabindex="-1"><a class="header-anchor" href="#铂金" aria-hidden="true">#</a> <code>铂金</code></h4><h5 id="_8-垃圾回收-gc" tabindex="-1"><a class="header-anchor" href="#_8-垃圾回收-gc" aria-hidden="true">#</a> 8. 垃圾回收（GC）*</h5><p>不管什么语言，垃圾回收的整体策略都是一样的：先判断这块内存是否可回收，然后对可回收的内存使用回收器进行回收。</p><blockquote><p>引用计数</p></blockquote><p>怎么确定内存是否可回收的，业界的第一种做法是<code>引用计数</code>：如果一个对象被引用，就给这个对象的引用计数<code>+1</code>，如果不再使用这个对象，那就给这个对象的引用计数<code>-1</code>，每次触发GC流程时清除引用计数为零的对象。</p><blockquote><p>标记-清除</p></blockquote><p>引用计数基本是任何编程语言GC标配了，但是引用计数容易因为互相引用导致内存泄露，所以又出现了<code>标记-清除</code>：所有变量在进入内存前没有标记，如果对象被使用就将其标记，每次触发为GC流程时，清除没有被标记变量的内存。从上述可以发现，该策略分为两步：首先<code>标记</code>，然后<code>清除</code>。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea16ada655284ddeb4cd85112b87d95e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" loading="lazy"><br><code>标记-清除</code>也存在很大的缺陷：</p><ol><li>每次运行GC时是扫描所有的变量，而有些变量是常驻变量。</li><li>清理掉的内存会成为内存碎片，导致内存成为不连续的片段。</li></ol><p>所以很多编程语言在具体设计GC时，基于上述策略做了很多类似的优化。比如使用分代回收，避免每次扫描常驻对象，从而提升GC效率；将清理后的内存空间重写分配整理，避免形成内存碎片而浪费内存空间。</p><p>另外，所有的清除阶段，代码都是<code>STW</code>（Stop The World）状态。所以怎么缩短<code>STW</code>的时间也是各语言努力优化的目标。</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1c5fc38ad3aa45fe95229986eba94726~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h6 id="v8引擎" tabindex="-1"><a class="header-anchor" href="#v8引擎" aria-hidden="true">#</a> v8引擎</h6><p>不管是JavaScript还是Nodejs，都是运行在V8引擎（Chrome内核浏览器）上的，v8引擎为JavaScript的GC做了<code>分代回收</code>、<code>并行回收</code>的优化，同时升级了<code>标记-清除</code>方案。</p><blockquote><p>分代回收</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea59b51339a9416db2c115532e7b1270~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" loading="lazy"><br> 首先将内存分为新生代区域和老生代区域，新生代里存放存活周期短的对象，老生代里存放存活周期长的常驻对象，这么做的好处就是，不用对一些常驻的对象频繁的做回收扫描，其次，又将新生代区域一分为二，一半作为使用区，一半作为空闲区。</p><p>新声明的变量会存入使用区，当使用区的剩余容量不足一存放新对象时，就会出发GC，大致的过程是将还在使用中（可达性分析确定的）对象复制到在空闲区然后清理，不使用的对象直接清理掉，然后将现在的空闲区标记为使用区，清理之后的使用区标记为空闲区。</p><blockquote><p>并行回收</p></blockquote><p>对于上述的新生代采用并行回收的方式。并行回收就是使用多个线程和主线程执行GC流程，并行回收的好处是可以缩短GC时间（不是成倍缩短，因为线程的通信也会消耗时间）。</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/219429619fca4a17a11371412ca10099~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><blockquote><p>标记清除和三色标记法</p></blockquote><p>对于上述中的老生代采用<code>标记清除</code>的方法，它仍然是<code>STW</code>的，所以为了缩短<code>STW</code>时间，又将<code>标记阶段</code>切分为多个小段，每执行一小段就继续执行JavaScript代码，然后又执行小段的GC，反反复复......，v8将此称为<code>增量标记</code>。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c130b1f285549ccb0403e186c644ed3~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" loading="lazy"><br> 起初的标记清理，只是非黑即白的标记方式，如果在<code>增量标记</code>的场景下，当一小段增量标记完，下一小段增量标记开始时无法得知标记状态，所以V8采用了<code>三色标记清除</code>：未被标记时为白色、自身被标记但是成员未被标记时为灰色、自身和成员都被标记时是黑色。这样每段的<code>增量标记</code>都可以接着上段的标记继续工作了。</p><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7d37349dbe944dfe912da733ab8b8bdb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h6 id="java" tabindex="-1"><a class="header-anchor" href="#java" aria-hidden="true">#</a> Java</h6><p>Java使用引用计数和可达性分析作为GC策略，使用标记清除、标记整理、复制等GC方式</p><blockquote><p>可达性分析</p></blockquote><p>可达性分析是从GC Roots作为起始对象，依次寻找依赖的子对象，直至找不到依赖对象，如果此时对象没有和GC Root相连通，就会被判别为可回收对象（严格来说是准可回收，之后还有严格的验证措施）。</p><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b798762077614f72aa7a05a8de05191c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><blockquote><p>标记整理</p></blockquote><p>将使用中的对象移到内存的另一端，将未使用的对象标记为可清除。</p><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/804bf0948f0b40268c634257096f096c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><blockquote><p>复制</p></blockquote><p>将内存一分为二，一半作为使用区，一半作为空闲区，当使用区内存不足时，触发GC，将使用中的对象复制到空闲区，使用区的内存清空作为空闲区，前面的空闲区作为使用区，是不是很熟悉啊，没错V8新生代确实是借鉴了这里。</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e3c8a2ec5c042e0afb68a6df71c7dfe~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><blockquote><p>分代清理</p></blockquote><p>Java的分代清理和JavaScript一样也是将内存分为新生代和老生代（永生代已经被移除了），不同的是，Java的新生代又被分为了三块，依次是：较大的Eden、较小的fron（s0）和to（s1）区，默认比例<code>8 : 1 : 1 </code>。对象优先在Eden区和from区，当Eden区没有足够空间进行分配时，虚拟机将发起一次<code>Minor GC</code>（新生代特有的GC算法），此时Eden区存活下来的变量将会被分配到to区，from区存活下来的变量年龄阈值，就会进入老年代，否则进入to区。此时清空Eden区和from区，然后将to区和from区调换身份。等待下一轮<code>Minor GC</code>。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3630923f15b54478a1dbb4f5ea2f3fa0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" loading="lazy"><br> 新生代使用的是<code>Minor GC</code>，老年代使用的是<code>Full GC</code>。</p><h5 id="_10-异步编程" tabindex="-1"><a class="header-anchor" href="#_10-异步编程" aria-hidden="true">#</a> 10.异步编程</h5><h6 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h6><p>JavaScript当时仅仅用来和服务端交互，所以被设计成单线程语言（语言本身，浏览器是多进程多线程的），异步编程时只能采用回调函数或者Promise等方式，也没有并发。</p><h6 id="java-1" tabindex="-1"><a class="header-anchor" href="#java-1" aria-hidden="true">#</a> Java</h6><p>Java是多进程多线程语言，多线程就已经可以满足日常的并发需求了。不过多线程都会涉及线程状态和消息同步的问题。</p><blockquote><p>Java的线程状态</p></blockquote><p>一个线程被创建后成为<code>初始（新建）状态</code>，当调用<code>start()</code>之后进入<code>就绪状态</code>，表示可以被系统调用分配系统资源，当线程拿到系统分配的资源会调用<code>run()</code>方法，进入<code>运行中状态</code>，当线程失去系统分配的资源，比如执行了<code>sleep(睡眠)</code>、<code>suspend(挂起)</code>就进入了<code>阻塞状态</code>。一个运行状态的线程完成任务或者其他终止条件发生时，该线程就切换到<code>终止状态</code>。</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/348d9837b2eb4ca9a13f559096e98d36~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><blockquote><p>消息同步</p></blockquote><p>线程同步消息的方式是：基于Java内存模型(JMM)的<code>内存共享</code>和使用<code>wait()</code>和<code>notify()</code>的<code>消息传递</code>。内存共享时，多个线程对同一个全局变量进行写操作时，是可能造成冲突的（<code>线程安全</code>问题），解决的方案就是增加安全机制：当一个线程对一个变量进行写操作时，其余想要对这个变量进行写操作的线程必须等待该线程写操作结束，Java中实现这个功能，有两种方法：<code>synchronized</code>(<code>Volatile</code>是轻量级的同步，只能修饰变量)、<code>ThreadLock</code>。</p><p><code>synchronized</code>既可以修饰方法成为同步方法也可以包裹需要同步的代码块成为同步代码块。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//java</span>
<span class="token comment">// 同步代码块</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> setCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>cout <span class="token operator">++</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 同步方法</span>
<span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> setCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">this</span><span class="token punctuation">.</span>cout <span class="token operator">++</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果同步代码里又包了别的同步代码，就会形成<code>死锁</code>.</p><p>以Java为例创建线程，需要实现Runable接口，或者继承Thread类（本质也是实现了Runable接口）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java</span>
<span class="token keyword">class</span> <span class="token class-name">ThreadTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
   <span class="token comment">// 保存当前线程</span>
   <span class="token keyword">private</span> <span class="token class-name">Thread</span> t<span class="token punctuation">;</span>
   <span class="token comment">// 线程名</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> threadName<span class="token punctuation">;</span>
   <span class="token comment">// 锁</span>
   <span class="token keyword">private</span> <span class="token class-name">Object</span> lock<span class="token punctuation">;</span>
   <span class="token comment">// 操作对象</span>
   <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
   
   <span class="token class-name">ThreadTest</span> <span class="token punctuation">(</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      threadName <span class="token operator">=</span> name<span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;创建了线程：&quot;</span> <span class="token operator">+</span>  threadName <span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程&quot;</span> <span class="token operator">+</span>  threadName <span class="token operator">+</span> <span class="token string">&quot;运行中&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
         <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程: &quot;</span> <span class="token operator">+</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 做点啥吧</span>
            <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程 &quot;</span> <span class="token operator">+</span>  threadName <span class="token operator">+</span> <span class="token string">&quot; interrupted.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程 &quot;</span> <span class="token operator">+</span>  threadName <span class="token operator">+</span> <span class="token string">&quot; 结束了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   
   <span class="token keyword">public</span> <span class="token keyword">void</span> start <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始线程：&quot;</span> <span class="token operator">+</span>  threadName <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>
         t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token comment">// 同步代码块</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> setCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>cout <span class="token operator">++</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
   <span class="token comment">// 同步方法</span>
   <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> setCount <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">this</span><span class="token punctuation">.</span>cout <span class="token operator">++</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是使用多进程的最大的缺点是进程之间消息通信、Cpu上下文切换消耗很大，所以使用过多的线程并发编程，效率反而降低了。</p><h3 id="四、结束" tabindex="-1"><a class="header-anchor" href="#四、结束" aria-hidden="true">#</a> 四、结束</h3><p>本文到此就结束了，感兴趣的话可以关注我的微信公众号：萌萌哒草头将军</p><p>祝大家都能拿到满意的offer</p>`,103)]))}const u=a(t,[["render",o],["__file","怎么匹配加分项：至少熟悉或了解一门后端语言.html.vue"]]);export{u as default};
