import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,f as p}from"./app-48cd79aa.js";const o={};function e(c,n){return a(),t("div",null,n[0]||(n[0]=[p(`<h3 id="迅速崛起和快速退出" tabindex="-1"><a class="header-anchor" href="#迅速崛起和快速退出" aria-hidden="true">#</a> 迅速崛起和快速退出</h3><p>时间回到 2014 年，此时的 <code>Angular 1.x</code> 习得了多种武林秘籍，左手降龙十八掌、右手六脉神剑，哦不，左手<code>双向数据绑定</code>、右手<code>依赖注入</code>、上能<code>模块化开发</code>、下有<code>模板引擎</code> 和 <code>前端路由</code>, 背后还有<code>Google</code>这个风头无两的带头大哥做技术背书，可以说集万千功能和宠爱于一身，妥妥的主角光环。</p><p>而此时的江湖，<code>B端</code>开发正尝到了 <code>SPA</code> 的甜头，积极的从传统的 <code>MVC</code> 开发模式转变为更为方便快捷的单页面应用开发模式，</p><blockquote><p>文章同步在公众号：萌萌哒草头将军，欢迎关注！</p></blockquote><p>一拍即合，强大的一站式单页面开发框架<code>Angular</code>自然而然，就成了公认的武林盟主，江湖一哥。</p><figure><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/d8d7a15e0a3f4db789f37707c4215151~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6JCM6JCM5ZOS6I2J5aS05bCG5Yab:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTExNjc1OTU0MzI2MDcyNyJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1739535838&amp;x-orig-sign=4jR3Ruzv%2BNrQuZTO%2BWjq3AwsHxA%3D" alt="angular下载量" tabindex="0" loading="lazy"><figcaption>angular下载量</figcaption></figure><p>但是好景不长，2016 年 9 月 14 日 <code>Angular 2.x</code> 的发布，彻底断送了武林盟主的宝座，</p><blockquote><p><code>Vue</code>：大哥，你可是真给机会呀！</p></blockquote><figure><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/7d1f8854c13f4f24ab37dcf4339f1dc9~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6JCM6JCM5ZOS6I2J5aS05bCG5Yab:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTExNjc1OTU0MzI2MDcyNyJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1739535838&amp;x-orig-sign=lBi%2B69anPAo43FetuVV%2BSUVFsjs%3D" alt="ts下载量" tabindex="0" loading="lazy"><figcaption>ts下载量</figcaption></figure><p><code>2.0</code> 使用<code>ts</code>彻底重写（最早支持<code>ts</code>的框架）、放弃了脏检查更新机制，引入了响应式系统、使用现代浏览器标准、加入装饰器语法，和 <code>1.0</code> 完全不兼容。可以从上图看到，此时大家基本上还不太接受<code>ts</code>!</p><p>新手面对陡然升高的学习曲线叫苦连连，已经入坑的开发者因为巨大的迁移工作而怨声载道。</p><p>此时，默默耕耘了两年的小弟，<code>Vue</code>已经拥有完备的本地化文档和丰富的可选生态，而且作为新手你只要会使用<code>html</code>、<code>css</code>、<code>javascript</code>，就可以上手写项目了。</p><p>所以，此时的 <code>Vue</code> 振臂一呼：“王侯将相宁有种乎！”，立马新皇加冕！</p><h3 id="积极改变-三拜义父的数据驱动" tabindex="-1"><a class="header-anchor" href="#积极改变-三拜义父的数据驱动" aria-hidden="true">#</a> 积极改变，三拜义父的数据驱动</h3><blockquote><p>忆往昔峥嵘岁月稠，恰同学少年，风华正茂；书生意气，挥斥方遒。</p></blockquote><p>一转眼，angular 已经发布第<code>19</code>个大版本了（平均一年两个版本）。</p><p>失去武林盟主的<code>Angular</code>，飘零半生，未逢明主，公若不弃，<code>Angular</code>愿拜为义父，</p><p>从 <code>脏检查机制</code> 到 <code>响应式系统</code>，再到<code>Signals系统</code>， <code>Angular</code> 历经沧桑的数据驱动方式可以说是前端发展的缩影。</p><h4 id="脏检查机制" tabindex="-1"><a class="header-anchor" href="#脏检查机制" aria-hidden="true">#</a> <code>脏检查机制</code></h4><p><code>脏检查机制</code> 是通过拦截异步操作，<code>http</code> <code>setTimeout</code> 用户交互事件等，触发变更检测系统，从根组件开始检查组件中数据是否有更新，有更新时，对应的 <code>$scope</code> 变量会被标记为 <code>脏</code>，然后同步的更新<code>dom</code>的内容，重新开始变更检查，直到稳定后标记为干净，即通过稳定性检查！</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ng-app</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myApp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>AngularJS Counter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">ng-controller</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CounterController as ctrl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Count: {{ ctrl.count }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>Double Count: {{ ctrl.doubleCount() }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">ng-click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ctrl.increment()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      angular<span class="token punctuation">.</span><span class="token function">module</span><span class="token punctuation">(</span><span class="token string">&quot;myApp&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">controller</span><span class="token punctuation">(</span><span class="token string">&quot;CounterController&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        vm<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        vm<span class="token punctuation">.</span><span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          vm<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Latest count:&quot;</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        vm<span class="token punctuation">.</span><span class="token function-variable function">doubleCount</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> vm<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这种检查机制存在缺陷，例如，当数据量十分庞大时，就会触发非常多次的<code>脏检查机制</code>。</p><h4 id="响应式系统" tabindex="-1"><a class="header-anchor" href="#响应式系统" aria-hidden="true">#</a> <code>响应式系统</code></h4><p><code>响应式系统</code> 没有出现之前，<code>脏检查机制</code> 是唯一的选择，但是<code>响应式系统</code>凭借快速轻便的特点，立马在江湖上引起了不小的轰动，<code>Angular</code>也放弃了笨重的脏检查机制采用了<code>响应式系统</code>!</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;h1&gt;Count: {{ count }}&lt;/h1&gt;
    &lt;h2&gt;Double Count: {{ doubleCount() }}&lt;/h2&gt;
    &lt;button (click)=&quot;increment()&quot;&gt;+1&lt;/button&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">count</span><span class="token operator">:</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Latest count:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">doubleCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和我们熟知的<code>Vue</code>的响应式不同，<code>Angular</code>的响应式采用双向数据流的设计，这也使得它在面对复杂项目时，性能和维护上不如<code>Vue</code>快捷方便。</p><p>所以，为了更好的驾驭<code>双向数据流</code>的响应式系统，<code>Angular</code>也是自创了很多绝学，例如：局部变更检测。</p><p>该绝学主要招式：<code>组件级变更检测策略</code>、引入<code>zonejs</code>、<code>OnPush</code> 策略等。</p><h5 id="_1-组件级变更检测策略" tabindex="-1"><a class="header-anchor" href="#_1-组件级变更检测策略" aria-hidden="true">#</a> 1. 组件级变更检测策略</h5><p>每个组件都有自己的更新策略，只有组件的属性和文本发生变化时，才会触发变更检测！</p><h5 id="_2-引入zonejs" tabindex="-1"><a class="header-anchor" href="#_2-引入zonejs" aria-hidden="true">#</a> 2. 引入<code>zonejs</code></h5><p>引入<code>zonejs</code>拦截<code>http</code> <code>setTimeout</code> 用户交互事件等异步操作</p><h5 id="_3-onpush-策略" tabindex="-1"><a class="header-anchor" href="#_3-onpush-策略" aria-hidden="true">#</a> 3. <code>OnPush</code> 策略</h5><p>默认情况下，整个组件树在变更时更新。</p><figure><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/3faf5acd50384ba1b8e7872d773bd2a7~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6JCM6JCM5ZOS6I2J5aS05bCG5Yab:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTExNjc1OTU0MzI2MDcyNyJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1739535838&amp;x-orig-sign=KNaUtv7bLvkC%2Bcmg1159JvLECRE%3D" alt="默认策略" tabindex="0" loading="lazy"><figcaption>默认策略</figcaption></figure><p>但是开发者可以选择 <code>OnPush</code> 策略，使得组件仅在输入属性发生变化、事件触发或手动调用时才进行变更检测。这进一步大大减少了变更检测的频率，适用于数据变化不频繁的场景。</p><figure><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/86c3668e2f75477984bd660adffee790~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6JCM6JCM5ZOS6I2J5aS05bCG5Yab:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTExNjc1OTU0MzI2MDcyNyJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1739535838&amp;x-orig-sign=ZoC2pB6KhA2VDxl3AfcrizzP8tM%3D" alt="OnPush策略" tabindex="0" loading="lazy"><figcaption>OnPush策略</figcaption></figure><h4 id="signals系统" tabindex="-1"><a class="header-anchor" href="#signals系统" aria-hidden="true">#</a> <code>Signals系统</code></h4><p>很快啊，当<code>SolidJS</code>凭借优异的信号系统在江湖上闯出了响亮的名声，这时，大家才意识到，原来还有更优秀的开发方式！<code>signal</code>系统的开发方式，也被公认为新一代的武林绝技！</p><p>于是，<code>Angular 16</code>它来了，它带着<code>signal</code>、<code>memo</code>、<code>effect</code>三件套走来了！</p><p>当使用<code>signal</code>时，更新仅仅发生在当前组件。</p><figure><img src="https://p0-xtjj-private.juejin.cn/tos-cn-i-73owjymdk6/063321160a464f6c99fa381728c9ea54~tplv-73owjymdk6-jj-mark-v1:0:0:0:0:5o6Y6YeR5oqA5pyv56S-5Yy6IEAg6JCM6JCM5ZOS6I2J5aS05bCG5Yab:q75.awebp?policy=eyJ2bSI6MywidWlkIjoiMTExNjc1OTU0MzI2MDcyNyJ9&amp;rk3s=f64ab15b&amp;x-orig-authkey=f32326d3454f2ac7e96d3d06cdbb035152127018&amp;x-orig-expires=1739535838&amp;x-orig-sign=pxZbszOwPX0M6sn%2BROv7Mo%2B%2BxLI%3D" alt="signal系统" tabindex="0" loading="lazy"><figcaption>signal系统</figcaption></figure><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// app.component.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> signal<span class="token punctuation">,</span> effect<span class="token punctuation">,</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@angular/core&quot;</span><span class="token punctuation">;</span>

@<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">selector</span><span class="token operator">:</span> <span class="token string">&quot;app-root&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;h1&gt;Count: {{ count() }}&lt;/h1&gt;
    &lt;h2&gt;Double Count: {{ doubleCount() }}&lt;/h2&gt;
    &lt;button (click)=&quot;increment()&quot;&gt;+1&lt;/button&gt;
  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token literal-property property">styles</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppComponent</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使用 signal 来管理状态</span>
  count <span class="token operator">=</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 使用 memo 来计算 doubleCount</span>
  doubleCount <span class="token operator">=</span> <span class="token function">memo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用 effect 来监听 count 的变化</span>
    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Latest count:&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 更新 signal 的值</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p><code>Angular</code> 虽然在国内市场一蹶不振，但是在国际市场一直默默耕耘 <code>10</code> 年。它作为一站式解决方案的框架，虽然牺牲了灵活性，但是也为开发者提供了沉浸式开发的选择！</p><p>且它不断创新、积极拥抱新技术的精神令人十分钦佩！</p><p>今天的内容就这些了，如果你觉得还不错，可以关注我。</p><p>如果文章中存在问题，欢迎指正！</p>`,48)]))}const u=s(o,[["render",e],["__file","2025年了，令人唏嘘的Angular，现在怎么样了🚀🚀🚀.html.vue"]]);export{u as default};
