import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o,c,f as s,a,b as p,e as l}from"./app-ae661cb6.js";const r={},u={href:"https://github.com/vbenjs/vite-plugin-imagemin/blob/main/README.zh_CN.md",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const e=i("ExternalLinkIcon");return o(),c("div",null,[n[2]||(n[2]=s(`<blockquote><p>文章同步在公众号：萌萌哒草头将军，欢迎关注</p></blockquote><h3 id="⚡️-使用-vite" tabindex="-1"><a class="header-anchor" href="#⚡️-使用-vite" aria-hidden="true">#</a> ⚡️ 使用 Vite</h3><p>前段时间，将练习了时长两年半的 react 项目脚手架换成 vite 了，过程如下</p><p>首先使用 vite 创建基础项目框架</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>npm create vite@latest my<span class="token operator">-</span>vue<span class="token operator">-</span>app <span class="token operator">--</span>template react<span class="token operator">-</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将 src 工作目录直接拷贝过来</p><p>接着配置常用的路径解析 alias</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite-config,ts</span>
<span class="token literal-property property">alias</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token operator">...</span><span class="token punctuation">(</span>
    Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      <span class="token string-property property">&#39;@&#39;</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">find</span><span class="token operator">:</span> key<span class="token punctuation">,</span> <span class="token literal-property property">replacement</span><span class="token operator">:</span> val <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token literal-property property">extensions</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;.js&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.ts&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.tsx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.jsx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.d.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时页面可以访问了，但是还是会有 ts 相关报错，</p><p>只需要在 tsconfig.json 里添加如下配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string-property property">&quot;paths&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;@/*&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./src/*&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使 ci/cd 可以正常进行，还需要将项目默认打包默认目录从 dist 换成 build</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// vite-config,ts</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">outDir</span><span class="token operator">:</span> <span class="token string">&quot;./build&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个过程很快，</p><h3 id="性能优化过程" tabindex="-1"><a class="header-anchor" href="#性能优化过程" aria-hidden="true">#</a> 性能优化过程</h3><p>接下来我执行了打包命令，部署在服务器上看看</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/443ea611019a446fa16b2e329fece41b~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c108f63da0794d05a7124705e8542bcd~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>在没有任何优化情况下，包体积为 6.7M，比 webpack 版包体积小了 0.4M</p><figure><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9d8a40b738714a51b9aabdef20f2a030~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>部署之后，vite 版 lighthouse 的性能得分 59 分</p><figure><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa5131a3e5d64fc8b85d3cb1c64e09fb~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>通过分析，发现是因为没有压缩，大文件太多，加载过慢导致的，所以接下来，我们进行压缩文件。</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e19814d532c249ef82664c24e578c004~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>压缩配置</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> viteCompression <span class="token keyword">from</span> <span class="token string">&quot;vite-plugin-compression&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// https://vitejs.dev/config/</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">build</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">outDir</span><span class="token operator">:</span> <span class="token string">&quot;./build&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">rollupOptions</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token function">viteCompression</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">verbose</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否在控制台中输出压缩结果</span>
        <span class="token literal-property property">disable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token literal-property property">threshold</span><span class="token operator">:</span> <span class="token number">10240</span><span class="token punctuation">,</span> <span class="token comment">// 阈值，单位为b</span>
        <span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">&quot;gzip&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 压缩算法，可选[&#39;gzip&#39;，&#39; brotliccompress &#39;，&#39;deflate &#39;，&#39;deflateRaw&#39;]</span>
        <span class="token literal-property property">ext</span><span class="token operator">:</span> <span class="token string">&quot;.gz&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 格式</span>
        <span class="token literal-property property">deleteOriginFile</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// 是否清除源文件，简易这里保留</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>并不是所有的 nginx 都带有 gzip 模块，所以最好保留源文件，以备不时之需</p></blockquote><p>打包之后</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fc237f6496b748a9832823068a5de3ef~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>同时需要，nginx 需要开启压缩识别，否则无效。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>server <span class="token punctuation">{</span>
    # 其他配置

    gzip on<span class="token punctuation">;</span>
    gzip_comp_level <span class="token number">5</span><span class="token punctuation">;</span>
    gzip_min_length <span class="token number">256</span><span class="token punctuation">;</span>
    gzip_types text<span class="token operator">/</span>plain text<span class="token operator">/</span>css application<span class="token operator">/</span>json application<span class="token operator">/</span>javascript text<span class="token operator">/</span>xml application<span class="token operator">/</span>xml application<span class="token operator">/</span>xml<span class="token operator">+</span>rss text<span class="token operator">/</span>javascript<span class="token punctuation">;</span>

    # 其他配置
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过压缩文件优化后，性能有了明显提升。</p>`,32)),a("blockquote",null,[a("p",null,[n[1]||(n[1]=p("我的项目没有图片，所以没有使用压缩图片的插件，如果需要可以使用")),a("a",u,[n[0]||(n[0]=p("vite-plugin-imagemin")),l(e)])])]),n[3]||(n[3]=s('<h3 id="性能比较" tabindex="-1"><a class="header-anchor" href="#性能比较" aria-hidden="true">#</a> 性能比较</h3><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cb43edcdf16d4010942fe58d44151157~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>而 webpack 版的 lighthouse 的性能得分 73 分</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9150fb3f824e41bca7db51a214662a29~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>webpack 版已经完成了代码压缩、代码分割、路由懒加载。</p><p>对比两个版本，webpack 的 FCP 指标十分优秀，Vite 的 TBT 指标很健康。</p><p>虽然，目前来看两者差距不大。但是 vite 的优势很明显，</p><p>使用默认配置加上代码压缩，可以比 webpack 优化配置之后更好一点。</p><h3 id="思考" tabindex="-1"><a class="header-anchor" href="#思考" aria-hidden="true">#</a> 思考</h3><p>此时影响的因素主要请求链的长度过长</p><figure><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b0657e70cd74a8ba1beb137bcf90c60~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><blockquote><p>翻译：下面的关键请求链显示了哪些资源是以高优先级加载的。考虑减少链的长度，减少资源的下载大小，或者推迟不必要资源的下载以提高页面负载。</p></blockquote><p>我们可以看到上面的请求链接，好几个都是只有几 kb 的小文件。 而这些小文件是外层 index 文件的依赖文件，所以会造成阻塞，小文件小文件众多阻塞的时间就越久。</p><p>vite 将文件根据路由切割成多个子模块，每个模块的文件来自于不同的依赖包的子集。并且通过 import 的方式，引入到主文件中。</p><p>如果我们在小文件引入前，将小文件进行合并，就可以有效缩短链长度，从而更进一步的提高性能。目前还没有类似的插件。</p><p>今天的分享就到这里了，感谢你的阅读！</p>',16))])}const v=t(r,[["render",d],["__file","简单几步，将React项目脚手架Webpack换成Vite⚡⚡，附带性能比较和思考.html.vue"]]);export{v as default};
