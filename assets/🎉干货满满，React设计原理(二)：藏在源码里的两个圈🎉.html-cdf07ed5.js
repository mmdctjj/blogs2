import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,a,b as s,e as o,f as l}from"./app-1a848f08.js";const d={},r={href:"https://juejin.cn/post/7241567583504728119",target:"_blank",rel:"noopener noreferrer"},u={href:"https://juejin.cn/post/7241567583504728119",target:"_blank",rel:"noopener noreferrer"},k={href:"https://juejin.cn/post/7241567583504728119",target:"_blank",rel:"noopener noreferrer"};function m(b,n){const e=p("ExternalLinkIcon");return c(),i("div",null,[n[6]||(n[6]=a("h3",{id:"💡相关阅读",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#💡相关阅读","aria-hidden":"true"},"#"),s(" 💡相关阅读")],-1)),a("ul",null,[a("li",null,[a("a",r,[n[0]||(n[0]=s("🎉干货满满，React设计原理(一)：藏在源码里的紧箍咒，几个容易混淆的变量🎉")),o(e)])])]),n[7]||(n[7]=l(`<blockquote><p>文章首发公众号：萌萌哒草头将军，最近关注有🎁，欢迎关注</p></blockquote><h2 id="💎-第二座大山-链表结构和双缓存机制" tabindex="-1"><a class="header-anchor" href="#💎-第二座大山-链表结构和双缓存机制" aria-hidden="true">#</a> 💎 第二座大山：链表结构和双缓存机制</h2><p>上篇文章中讲述了几个容易给源码阅读造成困扰的几个<code>fiber</code>相关的变量名称，这篇我将介绍下<code>Fiber</code>架构的链表结构和双缓存机制。</p><p>上文提到，<code>FiberNode</code>扮演多种角色时，保存着不同的数据，所以<code>FiberNode</code>保存的数据比较复杂。</p><p>本文重点，讲解作为<code>Fiber</code>架构的一环时，保存的链状数据结构（同时也会捎带的讲解其他的一些属性），以及双缓存机制，</p><h3 id="🚗-链表结构" tabindex="-1"><a class="header-anchor" href="#🚗-链表结构" aria-hidden="true">#</a> 🚗 链表结构</h3><p><code>Fiber tree</code>由多个<code>FiberNode</code>节点组成的树状链表结构的数据。每个<code>FiberNode</code><br> 的节点都有以下几个和<code>Fiber</code>架构相关的重要属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 指向父节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>return <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 指向第一个子节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 指向右边兄弟节点</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然根据不同的节点类型（比如函数组件、类组件、普通元素等）数据结构会有所不同，但是它们都会使用这三个属性描述它与它们相邻节点的关系。</p><p>比如，有如下的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>name<span class="token punctuation">,</span> setName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">&quot;mmdctjj&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span>button
        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=&gt;</span> name <span class="token operator">+</span> <span class="token string">&#39;l&#39;</span><span class="token punctuation">)</span>
          <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">count</span> <span class="token operator">=&gt;</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的<code>Fiber tree</code>示意图如下：</p><p align="center"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac675369855f44288257f7de916e60be~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>实际的<code>Fiber</code>树状链表结构如下：</p><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fe0441d4a31d4cf08d3359b0f65feee8~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>此时对应的是<code>mounted</code>阶段的初始状态，如果我们点击一次按钮，新的树状链状结构(对应<code>updated</code>阶段)如下：</p><p align="center"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/00db240d19b5452d9af1bfe1fc66cf79~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>对比两次的<code>Fiber</code>数据结构，从中我们可以得出结论：</p><ul><li>🔥 在函数组件对应的链表结构中，<code>React</code>每次将更新的内容渲染在页面之后，会将组件里的每个<code>useState</code>返回的状态记录在<code>memoizedState</code>下的<code>baseState</code>属性上，返回的<code>dispatch</code>方法有<code>queue</code>属性上，同时使用<code>next</code>属性指向下一个状态。直到最后一个状态时，<code>next</code>为<code>null</code>。这是我们发现的第二条链状结构。</li></ul><p align="center"><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/707388b24cab4677abd24a0e751b0d76~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ul><li>🔥 另外我们还发现，<code>button</code>所在的<code>fiber</code>结构中，<code>memoizedProps</code>、<code>pendingProps</code>属性上存在<code>children</code>、<code>onClick</code>属性</li></ul><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/321beee4d24b44e984df3e49502a8d81~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ul><li>🔥 我们还发现，更新之后，每个<code>fiber</code>结构的<code>alternate</code>都指向了上次的自己。这其实是双缓存机制的实现，下面我们还会讲到。</li></ul><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1f8503613f9941d7a2e9f2b974cd6624~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>如果我们将上面的函数组件替换为具有同样功能的类组件时（代码如下）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;mmdctjj&quot;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span>button
          onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
              <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
              <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;l&quot;</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token operator">&gt;</span>
          <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span class="token operator">--</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>name<span class="token punctuation">}</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的树状链表结构如下：</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/440658c709ca403bbe80bb07668073ea~tplv-k3u1fbpfcp-watermark.image?" alt="image.png" width="100%"><p>这里我们发现类组件和函数组件不一样的地方：</p><ul><li>🔥 类组件的<code>fiber</code>结构的<code>memoizedState</code>属性仅仅对应<code>this.state</code>的值，没有了想函数组件的第二条链表。</li></ul><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e6a49f8a4bf4f218b9aeb89d1e1ca5a~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ul><li>🔥 类组件的<code>fiber</code>结构的<code>updateQueue</code>属性承载了组件的更新信息。这里的更新我们以后会详细讲到的。</li></ul><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e261182a769243fa8798ba29e8df5664~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>总结下，<code>React</code>会为不同类型的<code>Fiber tree</code>节点创建不同的数据结构（略微不同的<code>FiberNode</code>类型），不同的数据结构更新方式也不一样。</p><p>除了上面说到的类组件和函数组件，还有<code>Fargement</code>、<code>Suspense</code>内置组件类型和一些别的情况下的特殊组件。</p><h3 id="🚗-双缓存机制" tabindex="-1"><a class="header-anchor" href="#🚗-双缓存机制" aria-hidden="true">#</a> 🚗 双缓存机制</h3><p>上面提到，更新之后每个<code>fiber</code>节点的<code>alternate</code>属性都会指向上次的自己。其实这是<code>React</code>的一种优化策略。</p><p><code>React</code>在运行时解析<code>vnode</code>，更新之后标记出更新前后变动的<code>dom</code>，然后渲染在页面中。如果每次都重新生成新的<code>dom</code>显然十分浪费资源。</p><p>所以<code>React</code>一方面会为每个<code>dom</code>绑定上次的状态，当发生变更时，快速比对，找出变动的地方。</p><p>另一方面，<code>React</code>还在内存中维护了一棵<code>Fiber tree</code>，变量名为<code>workInProgress</code>，用于快速切换。</p><blockquote><p>源码中，所有带着<code>workInProgressXxx</code>的变量，都是指运行在内存中的对象。比如<code>workInProgressHook</code></p></blockquote><p>上篇文章中提到过，每个应用都会有唯一的<code>FiberRootNode</code>实例用来维护整个应用的状态和组件信息。它有个<code>current</code>属性用于指向渲染在页面中的<code>fiber tree</code>，而每个<code>fiber</code>节点<code>alternate</code>指向另一棵树中的自己。</p><p>接下来我们从组件开始加载到更新，看看双缓存机制的作用过程。</p><p>首先是应用被建立。<code>App</code>组件还未还未加载，此时是<code>FiberRootNode</code>的<code>current</code>属性为<code>null</code>：</p><p align="center"><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e7913d514d394bdcb8d69295c87e644d~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>在<code>App</code>组件解析成<code>vMNode</code>后，还在内存<code>workInProgress</code>中时：</p><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f809eb4e310d411899e72622146a8519~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>当将<code>vNode</code>渲染在浏览器时，<code>FiberRootNode</code>的<code>current</code>属性指向<code>workInProgress</code>，<code>workInProgress</code>置空操作：</p><p align="center"><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a202ed2eef1f47f0aeb80ea47e578586~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>此时，我们点击<code>button</code>的点击事件，触发更新，内存中又多了个一棵树：</p><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/97619d2b8f674c988210ecf38ed85ccc~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>通过<code>alternate</code>属性比对，发现是<code>App</code>组件状态发生改变了，所以从<code>App</code>组件开始替换子树，然后将<code>FiberRootNode</code>的<code>current</code>属性指向<code>workInProgress</code>成为新的<code>curent</code>属性，旧的<code>current</code>替换之后成为<code>workInProgress</code>，并置为空，等待下次的更新：</p><p align="center"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4394ff787c1405fb320df209417b2d0~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><blockquote><p>这里我小小地剧透下，上述整个过程主要是<code>render</code>阶段地内容。具体而言，<code>render</code>阶段又可以分为三个小阶段：</p><ul><li><code>beginWork</code>阶段：顺着<code>child</code>属性向下遍历，找到变化地地方，打上<code>标记</code></li><li><code>complateWork</code>阶段：顺着<code>return</code>属性向上回归，将有<code>标记</code>的地方<code>更新</code>，此时就是更新<code>workInProgress</code>对应地<code>Fiber tree</code></li><li><code>commitRoot</code>阶段：将<code>workInProgress</code>对应的<code>Fiber tree</code>渲染到页面，同时完成上述指针的切换工作。</li></ul></blockquote><h2 id="🚗-总结" tabindex="-1"><a class="header-anchor" href="#🚗-总结" aria-hidden="true">#</a> 🚗 总结</h2><p><code>React</code>为不同的节点类型构建了不同的<code>fiber</code>结构和更新机制，但总的来说，它们具有同样的链表结构。</p><p>本文重点介绍了类组件和函数组件的一些字段区别。另外通过<code>alternate</code>引出并介绍了<code>双缓存</code>机制：<code>current</code>和<code>workInProgress</code>的循环往替更新。</p><p>就是这两个重要的”圈“，给<code>React</code>套上了神秘的面纱。</p><h2 id="🎉-最后" tabindex="-1"><a class="header-anchor" href="#🎉-最后" aria-hidden="true">#</a> 🎉 最后</h2><p>如果你发现本文一些错误的地方，请不吝指正，肥肠感谢🙏</p><p>这是本系列的第二篇了，真的干货满满，全文近六千五字符。</p><p>这个系列的目的通过分析一些理论知识，降低阅读源码的难度，即使不读源码也会对<code>React</code>的设计思想有总体上的理解。</p>`,62)),a("ul",null,[a("li",null,[a("a",u,[n[1]||(n[1]=s("🎉干货满满，React设计原理(一)：藏在源码里的紧箍咒，几个容易混淆的变量🎉")),o(e)])]),a("li",null,[a("a",k,[n[2]||(n[2]=s("🎉干货满满，React设计原理(二)：藏在源码里的两个圈，关键的链表结构和双缓存技术🎉")),o(e)])]),n[3]||(n[3]=a("li",null,[s("🎉干货满满，React设计原理(三)：藏在源码里的排位赛，"),a("code",null,"Lanu模型"),s("和"),a("code",null,"Batched Updates"),s("🎉")],-1)),n[4]||(n[4]=a("li",null,[s("🎉干货满满，React设计原理(四)：藏在源码里的传呼机，"),a("code",null,"Dispatch"),s("机制和事件系统🎉")],-1)),n[5]||(n[5]=a("li",null,"🎉干货满满，React设计原理(五)：藏在源码里的xx，待定🎉",-1))]),n[8]||(n[8]=a("p",null,"所以对你有帮助话请给我点下赞，这对我很重要！",-1)),n[9]||(n[9]=a("figure",null,[a("img",{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6e4eef4c835b47738b5376e577b3a5f1~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png",tabindex:"0",loading:"lazy"}),a("figcaption",null,"image.png")],-1))])}const f=t(d,[["render",m],["__file","🎉干货满满，React设计原理(二)：藏在源码里的两个圈🎉.html.vue"]]);export{f as default};
